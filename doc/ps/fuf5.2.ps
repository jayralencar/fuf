%!PS-Adobe-2.0
%%Title: fug5.2.mss
%%DocumentFonts: (atend)
%%Creator: Name not found%%EndComments
% PostScript Prelude for Scribe.
/BS {/SV save def 0.0 792.0 translate .01 -.01 scale} bind def
/ES {showpage SV restore} bind def
/SC {setrgbcolor} bind def
/FMTX matrix def
/RDF {WFT SLT 0.0 eq 
  {SSZ 0.0 0.0 SSZ neg 0.0 0.0 FMTX astore}
  {SSZ 0.0 SLT neg sin SLT cos div SSZ mul SSZ neg 0.0 0.0 FMTX astore}
  ifelse makefont setfont} bind def
/SLT 0.0 def
/SI { /SLT exch cvr def RDF} bind def
/WFT /Courier findfont def
/SF { /WFT exch findfont def RDF} bind def
/SSZ 1000.0 def
/SS { /SSZ exch 100.0 mul def RDF} bind def
/AF { /WFT exch findfont def /SSZ exch 100.0 mul def RDF} bind def
/MT /moveto load def
/XM {currentpoint exch pop moveto} bind def
/UL {gsave newpath moveto dup 2.0 div 0.0 exch rmoveto
   setlinewidth 0.0 rlineto stroke grestore} bind def
/LH {gsave newpath moveto setlinewidth
   0.0 rlineto
   gsave stroke grestore} bind def
/LV {gsave newpath moveto setlinewidth
   0.0 exch rlineto
   gsave stroke grestore} bind def
/BX {gsave newpath moveto setlinewidth
   exch
   dup 0.0 rlineto
   exch 0.0 exch neg rlineto
   neg 0.0 rlineto
   closepath
   gsave stroke grestore} bind def
/BX1 {grestore} bind def
/BX2 {setlinewidth 1 setgray stroke grestore} bind def
/PB {/PV save def newpath translate
    100.0 -100.0 scale pop /showpage {} def} bind def
/PE {PV restore} bind def
/GB {/PV save def newpath translate rotate
    div dup scale 100.0 -100.0 scale /showpage {} def} bind def
/GE {PV restore} bind def
/FB {dict dup /FontMapDict exch def begin} bind def
/FM {cvn exch cvn exch def} bind def
/FE {end /original-findfont /findfont load def  /findfont
   {dup FontMapDict exch known{FontMapDict exch get} if
   original-findfont} def} bind def
/BC {gsave moveto dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto closepath clip} bind def
/EC /grestore load def
/SH /show load def
/MX {exch show 0.0 rmoveto} bind def
/W {0 32 4 -1 roll widthshow} bind def
/WX {0 32 5 -1 roll widthshow 0.0 rmoveto} bind def
/RC {100.0 -100.0 scale
612.0 0.0 translate
-90.0 rotate
.01 -.01 scale} bind def
/URC {100.0 -100.0 scale
90.0 rotate
-612.0 0.0 translate
.01 -.01 scale} bind def
/RCC {100.0 -100.0 scale
0.0 -792.0 translate 90.0 rotate
.01 -.01 scale} bind def
/URCC {100.0 -100.0 scale
-90.0 rotate 0.0 792.0 translate
.01 -.01 scale} bind def
%%EndProlog
%%Page: 0 1
BS
0 SI
15 /Times-Bold AF
23034 13965 MT
(FUF: the Universal Unifier)SH
27492 15749 MT
(User Manual)SH
28055 17533 MT
(Version 5.2)SH
10 /Times-Italic AF
28222 22038 MT
(Michael Elhadad)SH
/Times-Roman SF
24973 24248 MT
(Department of Computer Science)SH
24389 25353 MT
(Ben Gurion University of the Negev)SH
26653 26458 MT
(84105 Beer Sheva, Israel)SH
26401 27563 MT
(elhadad@bengus.bgu.ac.il)SH
29013 30878 MT
(27 June 1993)SH
13 /Times-Bold AF
29261 47747 MT
(Abstract)SH
10 /Times-Roman AF
8280 50120 MT
(This document is)
18 W( the user manual for FUF version 5.2, a natural language generator program that uses the technique)17 W
8280 51225 MT
(of unification grammars.)
130 W( The program is composed of two main modules: a unifier and a linearizer. The unifier)131 W
8280 52330 MT
(takes as)
15 W( input a semantic description of the text to be generated and a unification grammar, and produces as output a)14 W
8280 53435 MT
(rich syntactic description of the text. The linearizer interprets this syntactic description and produces an English)139 W
8280 54540 MT
(sentence. This manual includes a)
140 W( detailed presentation of the technique of unification grammars and a reference)139 W
8280 55645 MT
(manual for the current implementation \050FUF 5.2\051.  Version 5.2 includes novel)
17 W( techniques in the unification allowing)18 W
8280 56750 MT
(the specification of types and the expression of complete information.)
48 W( It)
344 W( also allows for procedural unification and)47 W
8280 57855 MT
(supports sophisticated forms of control.)SH
24355 58400 MT
(Copyright)SH
/Symbol SF
28661 XM
(\323)SH
/Times-Roman SF
29701 XM
(1993 Michael)
250 W( Elhadad)SH
ES
%%Page: 1 2
BS
0 SI
10 /Times-Roman AF
54580 4286 MT
(1)SH
16 /Times-Bold AF
8280 11872 MT
(1. Introduction)SH
14 SS 
8280 15690 MT
(1.1. How to Read this Manual)SH
10 /Times-Roman AF
10080 17067 MT
(This manual is designed to help you use the)
222 W( FUF package and to describe and explain the technique of)223 W
8280 18444 MT
(unification grammars.)SH
10080 20923 MT
(The FUF package is made available)
55 W( to people interested in text generation and/or functional unification. It can)54 W
8280 22300 MT
(be used:)SH
/Symbol SF
10070 23753 MT
(\267)SH
/Times-Roman SF
10780 XM
(as a front-end to a text generation system, providing a surface realization)
198 W( component.  SURGE, a)199 W
10780 24858 MT
(grammar of English with large syntactic coverage written in FUF, is included for that purpose.)SH
/Symbol SF
10070 26616 MT
(\267)SH
/Times-Roman SF
10780 XM
(as an environment for grammar development. People interested in expressing)
93 W( grammatical theories or)92 W
10780 27721 MT
(developing a practical grammar can experiment with the unifier and linearizer.)SH
/Symbol SF
10070 29479 MT
(\267)SH
/Times-Roman SF
10780 XM
(as an environment for a study of functional unification.  Functional unification is a powerful technique)50 W
10780 30584 MT
(and can be used for non-linguistic or non-grammatical applications.)SH
10080 33063 MT
(This manual contains)
145 W( material for people falling in any of these categories. It starts with an introduction to)144 W
8280 34440 MT
(functional unification, its syntax, semantics and terminology. The following chapters deal with the)
220 W( ``grammar)221 W
8280 35817 MT
(development'' tools: tracing and indexing, a presentation of the)
119 W( morphology component and the dictionary.  The)118 W
8280 37194 MT
(next two chapters present the novel features of FUF: typing and control facilities.)
33 W( A)
317 W( chapter is devoted to typing in)34 W
8280 38571 MT
(FUF: type definition, user-defined unification methods and expression of complete information.)
153 W( One)
555 W( chapter is)152 W
8280 39948 MT
(devoted to to flow of control specification \050indexing, dependency-directed backtracking and goal freezing\051.  Finally)38 W
8280 41325 MT
(the last chapter is a reference manual to the)
81 W( package.  One appendix is devoted to possible non-linguistic applica-)80 W
8280 42702 MT
(tions of the formalism, and compares the formalism with programming languages, in particular with PROLOG.)SH
10080 45181 MT
(Note that this)
128 W( manual does)129 W
/Times-Bold SF
21639 XM
(not)SH
/Times-Roman SF
23407 XM
(describe or document the example grammars provided as examples with the)129 W
8280 46558 MT
(unifier. The)
324 W( sample)
37 W( grammars contain a brief documentation on-line and are accompanied by example inputs.  The)36 W
8280 47935 MT
(SURGE grammar is documented in a separate manual.)SH
14 /Times-Bold AF
8280 51753 MT
(1.2. Function and Content of the Package)SH
10 /Times-Roman AF
10080 53130 MT
(FUF implements a natural language surface generator using)
133 W( the theory of unification grammars \050cf. bibliog-)134 W
8280 54507 MT
(raphy for references\051.)
220 W( It)
689 W( follows most closely the original FUG formalism introduced in)
219 W( [17].)
SH( Its)
688 W( input is a)219 W
8280 55884 MT
(Functional Description \050fd\051 describing)
128 W( the meaning of an utterance and a grammar \050also described as an fd\051.The)129 W
8280 57261 MT
(Syntax of fds is fully described in section 5.  The)
6 W( output is an English sentence expressing this meaning according to)5 W
8280 58638 MT
(the grammatical constraints expressed by the grammar.)SH
10080 61117 MT
(There are two major stages in this process: unification and linearization.)SH
10080 63596 MT
(Unification consists in making the input-fd and the grammar ``compatible'')
113 W( in the sense described in)
114 W( [17].)
SH( It)114 W
8280 64973 MT
(comes down to enriching the input-fd with directives coming)
11 W( from the grammar and indicating word order, syntactic)10 W
8280 66350 MT
(constructions, number agreement and other features.)SH
10080 68829 MT
(The enriched input is then linearized to produce an English sentence.)
120 W( The)
491 W( linearizer includes a morphology)121 W
8280 70206 MT
(module handling all the problems of word formation \050s's, preterits, ...\051.)SH
ES
%%Page: 2 3
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(2)SH
ES
%%Page: 3 4
BS
0 SI
10 /Times-Roman AF
54580 4286 MT
(3)SH
16 /Times-Bold AF
8280 11872 MT
(2. Getting Started)SH
10 /Times-Roman AF
10080 13249 MT
(Appendix I describes how to install the package on a new machine.)
30 W( Contact)
309 W( your local system administrator to)29 W
8280 14626 MT
(learn how to load the program on your system.  You should know)
235 W( how to load the example grammars and)236 W
8280 16003 MT
(corresponding inputs.)SH
14 /Times-Bold AF
8280 19821 MT
(2.1. Main User Functions)SH
10 /Times-Roman AF
10080 21198 MT
(Once the system is loaded, you are ready to)
67 W( run the program.  If you are in a hurry to try the system, the user)66 W
8280 22575 MT
(functions are:)SH
9 /Courier AF
10839 24260 MT
(\050UNI INPUT &key GRAMMAR NON-INTERACTIVE \050LIMIT 10000\051\051)SH
15159 25208 MT
(by default the grammar used is *u-grammar*)SH
21099 26156 MT
(non-interactive is nil)SH
21099 27104 MT
(limit is 10000)SH
10839 28052 MT
(Complete work : unification + linearization. Outputs a sentence.)SH
19479 29000 MT
(If non-interactive is nil, a line of statistics is)SH
19479 29948 MT
(also printed.)SH
19479 30896 MT
(In any case, stops after limit backtracking points.)SH
10839 32792 MT
(\050UNI-FD INPUT &key GRAMMAR NON-INTERACTIVE \050LIMIT 10000\051\051)SH
15159 33740 MT
(by default the grammar used is *u-grammar*)SH
21099 34688 MT
(non-interactive is nil.)SH
21099 35636 MT
(limit is 10000)SH
10839 36584 MT
(Does only the unification. Outputs the enriched fd. This is the)SH
10839 37532 MT
(function to use when trying the grammars manipulating lists of gr5.l)SH
10839 38480 MT
(If non-interactive is nil, a line of statistics is also printed.)SH
10839 39428 MT
(In any case, stops after limit backtracking points.)SH
16779 41324 MT
(CL> \050uni ir01\051)SH
16779 42272 MT
(The boy loves a girl.)SH
16779 43220 MT
(CL> \050uni-fd ir02\051)SH
16779 44168 MT
(\050# # ...\051)SH
10839 46064 MT
(\050UNIF FD &key \050GRAMMAR *u-grammar*\051\051)SH
15159 47012 MT
(by default the grammar used is *u-grammar*)SH
10839 47960 MT
(As uni-fd but works even if FD does not contain a CAT feature.)SH
42480 25246 50 10440 48545 BX BX1
10 /Times-Roman AF
10080 51024 MT
(If you want to change the grammar, or the input)
30 W( you can edit the files defining it, or the function with the same)31 W
8280 52401 MT
(name.)SH
10080 54880 MT
(There are two other useful)
150 W( functions for grammar developers:)149 W
/Courier SF
36335 XM
(fd-p)SH
/Times-Roman SF
39134 XM
(checks whether a Lisp expression is a)149 W
8280 56257 MT
(syntactically correct Functional Description \050FD\051 to be)
131 W( used as an input.  If it is not, helpful error messages are)132 W
8280 57634 MT
(given.)SH
/Courier SF
11252 XM
(grammar-p)SH
/Times-Roman SF
16902 XM
(checks whether a grammar is well-formed.)SH
10080 60113 MT
(NOTE: use)SH
/Courier SF
14857 XM
(fd-p)SH
/Times-Roman SF
17507 XM
(on inputs only and)SH
/Courier SF
25174 XM
(grammar-p)SH
/Times-Roman SF
30824 XM
(on grammars only.)SH
ES
%%Page: 4 5
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(4)SH
9 /Courier AF
8679 11761 MT
(\050FD-P FD &key \050PRINT-MESSAGES t\051 \050PRINT-WARNINGS t\051\051)SH
8679 12709 MT
(--> T if FD is a well-formed FD.)SH
8679 13657 MT
(--> nil \050and error messages\051 otherwise.)SH
8679 14605 MT
(The error messages and warnings are only printed if PRINT-MESSAGES and)SH
8679 15553 MT
(PRINT-WARNINGS are true.)SH
8679 16501 MT
(DO NOT USE FD-P ON GRAMMARS)SH
8679 18397 MT
(\050GRAMMAR-P &optional \050GRAMMAR *u-grammar*\051)SH
14619 19345 MT
(&key \050PRINT-MESSAGES t\051 \050PRINT-WARNINGS t\051\051)SH
8679 20293 MT
(--> T if GRAMMAR \050by default *u-grammar*\051 is a well-formed grammar.)SH
8679 21241 MT
(--> nil \050and error messages\051 otherwise.)SH
8679 22189 MT
(- FD is *u-grammar* by default)SH
8679 23137 MT
(- PRINT-MESSAGES is t by default.)SH
9759 24085 MT
(If it is non-nil, some statistics on the grammar are printed.)SH
9759 25033 MT
(It should be nil when the function is called non-interactively.)SH
8679 25981 MT
(- PRINT-WARNINGS is nil by default.)SH
9759 26929 MT
(If it is non-nil, warnings are generated for all paths in the)SH
9759 27877 MT
(grammar. \050It is sometimes a good idea to manually check that all)SH
9759 28825 MT
(paths are valid.\051)SH
42480 18610 50 8280 29410 BX BX1
8679 31095 MT
(Examples:)SH
14619 32043 MT
(CL> \050fd-p '\050\050a 1\051 \050a 2\051\051\051)SH
14619 32991 MT
(----> error, attribute a has 2 incompatible values: 1 and 2.)SH
17319 33939 MT
(nil)SH
14619 34887 MT
(CL> \050grammar-p\051)SH
14619 35835 MT
(----> t)SH
14619 36783 MT
(CL> \050grammar-p '\050\050a 1\051 \050b 2\051\051\051)SH
14619 37731 MT
(----> error, a grammar must be a valid FD of the form:)SH
17859 38679 MT
(\050\050alt \050\050\050cat c1\051...\051 ... \050\050cat cn\051 ...\051\051\051\051. nil.)SH
42480 9130 50 8280 39264 BX BX1
ES
%%Page: 5 6
BS
0 SI
10 /Times-Roman AF
54580 4286 MT
(5)SH
16 /Times-Bold AF
8280 11872 MT
(3. FDs, Unification and Linearization)SH
10 /Times-Roman AF
10080 13249 MT
(In this section, we informally introduce the concepts of FDs and unification. The)
202 W( next section provides a)201 W
8280 14626 MT
(complete description of the FDs as used in the package, and presents all available unification mechanisms.)SH
14 /Times-Bold AF
8280 18444 MT
(3.1. What is an FD?)SH
10 /Times-Roman AF
10080 19821 MT
(An FD \050functional description\051 is a data structure representing constraints on an object. It is best)
6 W( viewed as a list)7 W
8280 21198 MT
(of pairs \050attribute value\051.  Here is a simple example:)SH
9 /Courier AF
10839 22883 MT
(\050\050article "the"\051 \050noun "cat"\051\051)SH
42480 1546 50 10440 23468 BX BX1
10 /Times-Roman AF
10080 25947 MT
(There is a function called)75 W
/Courier SF
20869 XM
(fd-p)SH
/Times-Roman SF
23594 XM
(in the package that lets you know whether a given Lisp)
75 W( expression is a valid)74 W
8280 27324 MT
(FD or not and gives you helpful error messages if it is not. In FUGs, the same formalism is used for representing)82 W
8280 28701 MT
(both the input expressions and the grammar.)SH
14 /Times-Bold AF
8280 32519 MT
(3.2. A Simple Example of Unification)SH
10 /Times-Roman AF
10080 33896 MT
(We present here a minimal grammar)
24 W( that contains just enough to generate the simplest complete sentences. It is)23 W
8280 35273 MT
(included in)
157 W( file)158 W
/Courier SF
15058 XM
(gr0.l)SH
/Times-Roman SF
18466 XM
(in the directory containing the examples. A little more complex grammar, handling the)158 W
8 SS 
43305 36305 MT
(1)SH
10 SS 
8280 36650 MT
(active/passive distinction, is available in)SH
/Courier SF
24668 XM
(gr1.l)SH
/Times-Roman SF
(, and a more interesting one in)SH
/Courier SF
40055 XM
(gr2.l)SH
/Times-Roman SF
(.)SH
9 /Courier AF
10839 38335 MT
(\050\050alt MAIN \050)SH
12459 39283 MT
(;; a grammar always has the same form: an alternative)SH
12459 40231 MT
(;; with one branch for each constituent category.)SH
12459 42127 MT
(;; First branch of the alternative)SH
12459 43075 MT
(;; Describe the category S.)SH
12459 44023 MT
(\050\050cat s\051)SH
12999 44971 MT
(\050prot \050\050cat np\051\051\051)SH
12999 45919 MT
(\050goal \050\050cat np\051\051\051)SH
12999 46867 MT
(\050verb \050\050cat vp\051)SH
16779 47815 MT
(\050number {prot number}\051\051\051)SH
12999 48763 MT
(\050pattern \050prot verb goal\051\051\051)SH
12459 50659 MT
(;; Second branch: NP)SH
12459 51607 MT
(\050\050cat np\051)SH
12999 52555 MT
(\050n \050\050cat noun\051\051\051)SH
12999 53503 MT
(\050alt \050)SH
14079 54451 MT
(;; Proper names don't need an article)SH
14079 55399 MT
(\050\050proper yes\051)SH
14619 56347 MT
(\050pattern \050n\051\051\051)SH
14079 57295 MT
(;; Common names do)SH
14079 58243 MT
(\050\050proper no\051)SH
14619 59191 MT
(\050pattern \050det n\051\051)SH
14619 60139 MT
(\050det \050\050cat article\051)SH
17859 61087 MT
(\050lex "the"\051\051\051\051\051\051\051)SH
12459 62983 MT
(;; Third branch: VP)SH
12459 63931 MT
(\050\050cat vp\051)SH
12999 64879 MT
(\050pattern \050v dots\051\051)SH
12999 65827 MT
(\050v \050\050cat verb\051\051\051\051\051\051\051)SH
42480 29038 50 10440 66412 BX BX1
10800 50 8280 68504 UL
6 /Times-Roman AF
9080 69843 MT
(1)SH
8 SS 
9380 70152 MT
(Note that the simplest grammars presented in the manual use the standard phrase structure approach S -> NP VP.)
35 W( More)
268 W( advanced grammars)34 W
8280 71076 MT
(use a systemic approach to language \050after gr4\051.  In general, the FUG formalism is convenient to)
8 W( write systemic grammars, but it can also be used)9 W
8280 72000 MT
(to implement other linguistic models \050PS rules, LFG, GPSG or HPSG\051.)SH
ES
%%Page: 6 7
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(6)SH
7920 11486 MT
(A few)
171 W( comments on the form of this grammar: the skeleton of a grammar is always the same, a big)170 W
/Courier SF
51120 XM
(alt)SH
/Times-Roman SF
6120 12863 MT
(\050alternation of)
58 W( possible branches, the unifier will pick one compatible branch to unify with the input\051. Each branch)59 W
6120 14240 MT
(of this alternation corresponds to a single category \050here,)SH
/Courier SF
29115 XM
(S, NP)SH
/Times-Roman SF
32365 XM
(and)SH
/Courier SF
34059 XM
(VP)SH
/Times-Roman SF
(\051.)SH
7920 16719 MT
(The second remark is about the form of the input: as shown in the following)
23 W( example, an input is an FD, giving)22 W
6120 18096 MT
(some constraints)
181 W( on certain constituents. The grammar decides what grammatical category corresponds to each)182 W
6120 19473 MT
(constituent.)SH
7920 21952 MT
(The next main function of the grammar is to give constraints)
66 W( on the ordering of the words. This is done using)65 W
6120 23329 MT
(the)SH
/Courier SF
7727 XM
(pattern)SH
/Times-Roman SF
12312 XM
(special attribute. A)135 W
/Courier SF
20549 XM
(pattern)SH
/Times-Roman SF
25134 XM
(is followed by a picture of how the constituents of)
135 W( the current FD)136 W
6120 24706 MT
(should be ordered:)77 W
/Courier SF
14044 XM
(\050Pattern \050prot verb goal\051\051)77 W
/Times-Roman SF
30202 XM
(means that)
77 W( the prot constituent should come just before)76 W
6120 26083 MT
(the verb constituent, etc.)SH
7920 28562 MT
(In the first branch, the only thing to notice is how the agreement subject/verb is described:)
82 W( the number of the)83 W
/Courier SF
6120 29939 MT
(PROT)SH
/Times-Roman SF
8770 XM
(will appear in the input as a feature of the FD appearing under)SH
/Courier SF
33903 XM
(PROT)SH
/Times-Roman SF
(, as in:)SH
/Courier SF
7920 32418 MT
(\050prot \050\050number plural\051 \050lex "car"\051\051\051)SH
/Times-Roman SF
7920 34897 MT
(standing for ``cars''. To enforce the subject/verb agreement,)
78 W( the grammar picks the feature)77 W
/Courier SF
45500 XM
(number)SH
/Times-Roman SF
49427 XM
(from the)77 W
/Courier SF
6120 36274 MT
(prot)SH
/Times-Roman SF
8770 XM
(sub-fd and requests that it be unified with the corresponding feature of the)SH
/Courier SF
38681 XM
(verb)SH
/Times-Roman SF
41331 XM
(sub-fd. This is expressed by:)SH
/Courier SF
7920 38753 MT
(\050verb \050\050number {prot number}\051\051\051)SH
/Times-Roman SF
7920 41232 MT
(which means: the value of the)42 W
/Courier SF
20392 XM
(number)SH
/Times-Roman SF
24284 XM
(feature of)43 W
/Courier SF
28479 XM
(verb)SH
/Times-Roman SF
31172 XM
(must be the same as the value of the)43 W
/Courier SF
46251 XM
(number)SH
/Times-Roman SF
50144 XM
(feature)SH
6120 42609 MT
(of)SH
/Courier SF
7262 XM
(prot)SH
/Times-Roman SF
(. The)
368 W( curly-braces notation denotes what is called a ``path'' which is a pointer within an fd.  Note that)
59 W( in)58 W
6120 43986 MT
(this line of the)
3 W( grammar, we refer to)4 W
/Courier SF
20840 XM
({prot number})4 W
/Times-Roman SF
28898 XM
(even though the)4 W
/Courier SF
35548 XM
({prot number})4 W
/Times-Roman SF
43606 XM
(feature does not appear)4 W
6120 45363 MT
(under)SH
/Courier SF
8678 XM
(prot)SH
/Times-Roman SF
11359 XM
(in the rest of the grammar.  This is a general feature of FUF: any attribute can appear in an FD,)
31 W( and its)30 W
6120 46740 MT
(value can be given either by)
10 W( the grammar directly where it would appear, or by the input, or by the grammar coming)11 W
6120 48117 MT
(from a distant place and using a path.)SH
7920 50596 MT
(Note also that the agreement constraint could have been written in the ``opposite'' direction:)SH
/Courier SF
7920 53075 MT
(\050prot \050\050number {verb number}\051\051\051)SH
/Times-Roman SF
7920 55554 MT
(Or even:)SH
/Courier SF
7920 58033 MT
(\050{prot number} {verb number}\051)SH
/Times-Roman SF
7920 60512 MT
(In the second branch, describing the NPs, we have two cases, corresponding to proper and)
143 W( common nouns.)142 W
6120 61889 MT
(Common nouns are preceded by an article, whereas proper nouns just consist of themselves,)134 W
/Times-Italic SF
45157 XM
(e.g.)SH
/Times-Roman SF
(, ``the car'' vs.)135 W
6120 63266 MT
(``John''. If the feature)12 W
/Courier SF
15302 XM
(proper)SH
/Times-Roman SF
19163 XM
(is not given in the input, the grammar will add it. By default, the current unifier will)11 W
6120 64643 MT
(always try the first branch of an)SH
/Courier SF
19089 XM
(alt)SH
/Times-Roman SF
21139 XM
(first. That)
250 W( means that in this grammar, proper nouns are the default.)SH
7920 67122 MT
(Finally, a brief word about the general mechanism of the unification: the unifier first unifies the input)
48 W( FD with)49 W
6120 68499 MT
(the grammar. In the following example, this will be the first)
56 W( pass through the grammar. Then, each sub-constituent)55 W
6120 69876 MT
(of the resulting FD that is)
200 W( part of the)201 W
/Courier SF
22784 XM
(cset)SH
/Times-Roman SF
25635 XM
(\050constituent-set\051 of the FD will be unified again with the whole)201 W
6120 71253 MT
(grammar. This will unify)
67 W( the sub-constituents)66 W
/Courier SF
25046 XM
(prot, verb)66 W
/Times-Roman SF
31428 XM
(and)SH
/Courier SF
33188 XM
(goal)SH
/Times-Roman SF
35904 XM
(also. This is how recursion is triggered in)66 W
ES
%%Page: 7 8
BS
0 SI
10 /Times-Roman AF
54580 4286 MT
(7)SH
8280 11486 MT
(the grammar. The next section describes how the)23 W
/Courier SF
28321 XM
(cset)SH
/Times-Roman SF
30994 XM
(is determined. All you)
23 W( need to know at this point is that if a)24 W
8280 12863 MT
(constituent contains a feature)SH
/Courier SF
20222 XM
(\050cat xxx\051)SH
/Times-Roman SF
25872 XM
(it will be tried for unification.)SH
10080 15342 MT
(In the input FDs, the sign)SH
/Courier SF
20497 XM
(===)SH
/Times-Roman SF
22547 XM
(is used as a shortcut for the notation:)SH
9 /Courier AF
10839 17027 MT
(\050n === John\051)
SH( <===>)
1080 W( \050n)
540 W( \050\050lex John\051\051\051)SH
42480 1546 50 10440 17612 BX BX1
10 /Times-Roman AF
10080 20091 MT
(The)SH
/Courier SF
11942 XM
(lex)SH
/Times-Roman SF
14049 XM
(feature always contains)
57 W( the single string that is to be used in the English sentence for all ``terminal'')56 W
8280 21468 MT
(constituents.)SH
9 /Courier AF
10839 23153 MT
(When unified with the following FD, the grammar will output the)SH
10839 24101 MT
(sentence ``John likes Mary''.)SH
10839 25997 MT
(\050setq ir01 '\050\050cat s\051)SH
17859 26945 MT
(\050prot \050\050n === john\051\051\051)SH
17859 27893 MT
(\050verb \050\050v === like\051\051\051)SH
17859 28841 MT
(\050goal \050\050n === Mary\051\051\051\051\051)SH
10839 31685 MT
(Which corresponds to the linearization of the following complete)SH
10839 32633 MT
(FD \050this is the result of the unification\051:)SH
10839 34529 MT
(CLISP> \050uni-fd ir01\051)SH
10839 36425 MT
(\050\050cat s\051)SH
11379 37373 MT
(\050prot \050\050n \050\050lex "john"\051)SH
17319 38321 MT
(\050cat noun\051\051\051)SH
15159 39269 MT
(\050cat np\051)SH
15159 40217 MT
(\050proper yes\051)SH
15159 41165 MT
(\050pattern \050n\051\051\051\051)SH
11379 42113 MT
(\050verb \050\050v \050\050lex "like"\051)SH
17319 43061 MT
(\050cat verb\051\051\051)SH
15159 44009 MT
(\050cat vp\051)SH
15159 44957 MT
(\050number {prot number}\051)SH
15159 45905 MT
(\050pattern \050v dots\051\051\051\051)SH
11379 46853 MT
(\050goal \050\050n \050\050lex "Mary"\051)SH
17319 47801 MT
(\050cat noun\051\051\051)SH
15159 48749 MT
(\050cat np\051)SH
15159 49697 MT
(\050proper yes\051)SH
15159 50645 MT
(\050pattern \050n\051\051\051\051)SH
11379 51593 MT
(\050pattern \050prot verb goal\051\051\051)SH
42480 29986 50 10440 52178 BX BX1
10 /Times-Roman AF
10080 54657 MT
(Following the trace of the program will be the easiest way to figure out what is going on:)SH
ES
%%Page: 8 9
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(8)SH
9 /Courier AF
8679 11761 MT
(LISP> \050uni ir01\051)SH
8679 12709 MT
(-->)SH
8679 13657 MT
(>STARTING CAT S AT LEVEL {})SH
8679 15553 MT
(-->Entering alt TOP -- Jump indexed to branch #1: S matches input S)SH
8679 16501 MT
(-->Updating \050CAT NIL\051 with NP at level {PROT CAT})SH
8679 17449 MT
(-->Updating \050CAT NIL\051 with NP at level {GOAL CAT})SH
8679 18397 MT
(-->Updating \050CAT NIL\051 with VP at level {VERB CAT})SH
8679 19345 MT
(-->Enriching input with \050NUMBER {PROT NUMBER}\051 at level {VERB})SH
8679 20293 MT
(-->Enriching input with \050PATTERN \050PROT VERB GOAL\051\051 at level {})SH
8679 21241 MT
(-->Success with branch #1 S in alt TOP)SH
8679 23137 MT
(>STARTING CAT NP AT LEVEL {PROT})SH
8679 25033 MT
(-->Entering alt TOP -- Jump indexed to branch #2: NP matches input NP)SH
8679 25981 MT
(-->Updating \050CAT NIL\051 with NOUN at level {PROT N CAT})SH
8679 26929 MT
(-->Enriching input with \050NUMBER {PROT NUMBER}\051 at level {PROT N})SH
8679 27877 MT
(-->Updating \050PROPER NIL\051 with YES at level {PROT PROPER})SH
8679 28825 MT
(-->Enriching input with \050PATTERN \050N\051\051 at level {PROT})SH
8679 29773 MT
(-->Success with branch #2 NP in alt TOP)SH
8679 31669 MT
(>STARTING CAT VP AT LEVEL {VERB})SH
8679 33565 MT
(-->Entering alt TOP -- Jump indexed to branch #3: VP matches input VP)SH
8679 34513 MT
(-->Enriching input with \050PATTERN \050V DOTS\051\051 at level {VERB})SH
8679 35461 MT
(-->Updating \050CAT NIL\051 with VERB at level {VERB V CAT})SH
8679 36409 MT
(-->Success with branch #3 VP in alt TOP)SH
8679 38305 MT
(>STARTING CAT NP AT LEVEL {GOAL})SH
8679 40201 MT
(-->Entering alt TOP -- Jump indexed to branch #2: NP matches input NP)SH
8679 41149 MT
(-->Updating \050CAT NIL\051 with NOUN at level {GOAL N CAT})SH
8679 42097 MT
(-->Enriching input with \050NUMBER {GOAL NUMBER}\051 at level {GOAL N})SH
8679 43045 MT
(-->Updating \050PROPER NIL\051 with YES at level {GOAL PROPER})SH
8679 43993 MT
(-->Enriching input with \050PATTERN \050N\051\051 at level {GOAL})SH
8679 44941 MT
(-->Success with branch #2 NP in alt TOP)SH
8679 47785 MT
([Used 3 backtracking points - 0 wrong branches - 0 undos])SH
8679 48733 MT
(John likes mary.)SH
42480 38518 50 8280 49318 BX BX1
10 /Times-Roman AF
7920 51797 MT
(In the figure, you can identify each step of the unification:  first the top level category is identified: \050cat s\051.)
18 W( The)287 W
6120 53174 MT
(input is unified with)
1 W( the corresponding branch of the grammar \050branch #1\051.  Then the constituents are identified.  We)SH
6120 54551 MT
(have here 3 constituents: PROT of cat NP, VERB of cat VP and GOAL of CAT NP.  Each constituent is)
39 W( unified in)40 W
6120 55928 MT
(turn. Then)
668 W( for each constituent, the)
209 W( unifier identifies the sub-constituents.  In this case, no constituent has a)208 W
6120 57305 MT
(sub-constituent, and unification succeeds.  Note that in general, the tree of constituents is traversed breadth first.)SH
7920 59784 MT
(Now, it is also important to know when unification fails. The)
295 W( following example tries to override the)296 W
6120 61161 MT
(subject/verb agreement, causing the failure:)SH
ES
%%Page: 9 10
BS
0 SI
10 /Times-Roman AF
54580 4286 MT
(9)SH
9 /Courier AF
10839 12709 MT
(\050setq ir02 '\050\050cat s\051)SH
17859 13657 MT
(\050prot \050\050n === john\051 \050number sing\051\051\051)SH
17859 14605 MT
(\050verb \050\050v === like\051 \050number plural\051\051\051)SH
17859 15553 MT
(\050goal \050\050n === Mary\051\051\051\051\051)SH
10839 17449 MT
(LISP> \050uni ir02\051)SH
10839 19345 MT
(>STARTING CAT S AT LEVEL {})SH
10839 21241 MT
(-->Entering alt TOP -- Jump indexed to branch #1: S matches input S)SH
10839 22189 MT
(-->Updating \050CAT NIL\051 with NP at level {PROT CAT})SH
10839 23137 MT
(-->Updating \050CAT NIL\051 with NP at level {GOAL CAT})SH
10839 24085 MT
(-->Updating \050CAT NIL\051 with VP at level {VERB CAT})SH
10839 25033 MT
(-->Fail in trying PLURAL with SING at level {VERB NUMBER})SH
10839 26929 MT
(<fail>)SH
42480 16714 50 10440 27514 BX BX1
14 /Times-Bold AF
8280 31332 MT
(3.3. Linearization)SH
10 /Times-Roman AF
10080 32709 MT
(Once the unification has succeeded, the unified fd is sent)
72 W( to the linearizer.  The linearizer works by following)71 W
8280 34086 MT
(the directives included in the)71 W
/Courier SF
20439 XM
(pattern)SH
/Times-Roman SF
24960 XM
(. The)
392 W( exact way to define these features is)
71 W( explained in section 5.6.  The)72 W
8280 35463 MT
(linearizer works as follows:)SH
10280 36802 MT
(1.)SH
11280 XM
(Identify the)SH
/Courier SF
16168 XM
(pattern)SH
/Times-Roman SF
20618 XM
(feature in the top level:  for ir01, it is)SH
/Courier SF
35644 XM
(\050pattern \050prot verb goal\051\051)SH
/Times-Roman SF
(.)SH
10280 38560 MT
(2.)SH
11280 XM
(If a pattern is found:)SH
13336 39899 MT
(a.)SH
14280 XM
(For each constituent of the pattern,)
35 W( recursively linearize the constituent.  \050That means linearize)34 W
14280 41004 MT
(PROT, VERB and GOAL\051.)SH
13280 42762 MT
(b.)SH
14280 XM
(The linearization of the fd is the)
92 W( concatenation of the linearizations of the constituents in the)93 W
14280 43867 MT
(order prescribed by the pattern feature.)SH
10280 45625 MT
(3.)SH
11280 XM
(If no feature pattern is found:)SH
13336 46964 MT
(a.)SH
14280 XM
(Find the)150 W
/Courier SF
18136 XM
(lex)SH
/Times-Roman SF
20336 XM
(feature of the fd, and depending on the category)
150 W( of the constituent, the mor-)149 W
14280 48069 MT
(phological features needed.)
92 W( For)
435 W( example, if fd is of)93 W
/Courier SF
36147 XM
(\050cat verb\051)93 W
/Times-Roman SF
(, the features needed are:)93 W
/Courier SF
14280 49174 MT
(person, number, tense)SH
/Times-Roman SF
(.)SH
13280 50932 MT
(b.)SH
14280 XM
(Send the lexical item and the appropriate morphological features to the morphology module .)79 W
14280 52037 MT
(The linearization of the fd is the resulting string.)
39 W( For)
330 W( example, if lex=``give'' and the features)40 W
14280 53142 MT
(are the default values \050as it is in ir01\051, the result is ``gives.'')SH
10080 55621 MT
(When the fd does not contain a morphological feature, the morphology)
104 W( module provides reasonable defaults.)103 W
8280 56998 MT
(More details on morphology are provided in section 11.)SH
10080 59477 MT
(If a pattern contains a reference to a constituent and)
196 W( that constituent does not exist, nothing happens: the)197 W
8280 60854 MT
(linearization of an empty constituent is the empty string.  The following example illustrates this feature:)SH
9 /Courier AF
10839 62539 MT
(Unified FD:)SH
10839 63487 MT
(\050\050cat s\051)SH
11379 64435 MT
(\050pattern \050prot verb goal benef\051\051)SH
11379 65383 MT
(\050prot \050\050cat noun\051 \050lex "John"\051\051\051)SH
11379 66331 MT
(\050verb \050\050cat verb\051 \050lex "like"\051\051\051\051)SH
10839 68227 MT
(Linearized string \050note that constituents GOAL and BENEF are missing\051:)SH
10839 69175 MT
(John likes.)SH
42480 8182 50 10440 69760 BX BX1
ES
%%Page: 10 11
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(10)SH
7920 11486 MT
(Finally, if one of the constituent sent to the morphology is not a known morphological category,)
64 W( the morphol-)63 W
6120 12863 MT
(ogy module can not perform the necessary agreements.  This is indicated by the following output:)SH
9 /Courier AF
8679 14548 MT
(Unified FD:)SH
8679 15496 MT
(\050\050cat s\051)SH
9219 16444 MT
(\050pattern \050prot verb goal\051\051)SH
9219 17392 MT
(\050prot \050\050cat noun\051 \050lex "John"\051\051\051)SH
9219 18340 MT
(\050verb \050\050cat verb\051 \050lex "like"\051\051\051)SH
9219 19288 MT
(\050goal \050\050cat zozo\051 \050lex "trotteur"\051\051\051\051)SH
8679 21184 MT
(Linearized string:)SH
8679 22132 MT
(John likes <unknown cat ZOZO: trotteur>)SH
42480 9130 50 8280 22717 BX BX1
10 /Times-Roman AF
7920 25196 MT
(In general,)
109 W( when you find that in your output, it means that there is something wrong in the grammar.  You)110 W
6120 26573 MT
(should check the list of legal morphological categories \050see section 11\051)
178 W( or you should check why a high level)177 W
6120 27950 MT
(constituent is sent to the morphology \050your)
172 W( fd is too flat\051.  You can use the function)173 W
/Courier SF
42719 XM
(morphology-help)SH
/Times-Roman SF
52142 XM
(to)SH
6120 29327 MT
(receive on-line help on which categories are known to the morphology module.)SH
ES
%%Page: 11 12
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(11)SH
16 /Times-Bold AF
8280 11872 MT
(4. Writing and Modifying Grammars)SH
10 /Times-Roman AF
10080 13249 MT
(In this section, we briefly outline what steps must be followed)
84 W( to develop a Functional Unification Grammar.)83 W
8280 14626 MT
(The methodology is the following:)SH
10280 15965 MT
(1.)SH
11280 XM
(Determine the input to use.  In general, input is given by an underlying application.  If not, the)199 W
11280 17070 MT
(criterion to decide what is a good)
158 W( input is that it should be as much ``semantic'' as possible, and)157 W
11280 18175 MT
(contain the fewest syntactic features as possible.)SH
10280 19933 MT
(2.)SH
11280 XM
(Identify the types of sentences to produce.)SH
10280 21691 MT
(3.)SH
11280 XM
(For each type of sentence, identify the)
172 W( constituents and sub-constituents, and their function in the)173 W
11280 22796 MT
(sentence. A)
496 W( constituent is a group of words that are ``tied together'' in a clause.  A)
123 W( constituent in)122 W
11280 23901 MT
(general plays a certain function with respect to the higher level constituent containing it.)
12 W( For)
276 W( example,)13 W
11280 25006 MT
(in ``John gives a book to Mary,'' the group ``a)
18 W( book'' forms a constituent, of category ``noun-group,'')17 W
11280 26111 MT
(and it plays the role of)
41 W( the ``object upon which action is performed'' in the clause.  Such role is often)42 W
11280 27216 MT
(called ``medium'' or ``affected'' in functional grammars.)SH
10280 28974 MT
(4.)SH
11280 XM
(Determine the output)
73 W( \050that is, the unified fds before linearization\051.  In the output, constituents should)72 W
11280 30079 MT
(be grouped in the same pair and the attribute should indicate what function)
17 W( the constituent is fulfilling.)18 W
11280 31184 MT
(In the previous example,)
97 W( we want to have a pair of the form)96 W
/Courier SF
36692 XM
(\050medium <fd describing ``a)96 W
11280 32289 MT
(book''>\051)SH
/Times-Roman SF
16363 XM
(in the output.  The output)
33 W( must also contain all ordering constraints necessary to linearize)34 W
11280 33394 MT
(the sentence and provide all the morphological feature needed to derive all word)
171 W( inflections \050)170 W
/Times-Italic SF
(e.g.)SH
/Times-Roman SF
(,)SH
11280 34499 MT
(number, person, tense\051.)SH
10280 36257 MT
(5.)SH
11280 XM
(Determine the ``difference'' between the input and the output.  All features that are in)
67 W( the output but)68 W
11280 37362 MT
(not in the input must be added by the grammar.)SH
10280 39120 MT
(6.)SH
11280 XM
(For each category of constituent, write a branch of the grammar.)
5 W( To)
259 W( do that, you need to specify under)4 W
11280 40225 MT
(which conditions each feature of the ``difference'' must be added to the input.)SH
10080 42704 MT
(This is)
61 W( of course an over-simplified description of the process.  Sometimes, the mapping from the input to the)62 W
8280 44081 MT
(output is best considered)
44 W( if decomposed in several stages.  For example, in gr4 \050cf. file)43 W
/Courier SF
43882 XM
(gr4.l)SH
/Times-Roman SF
(\051, the)
336 W( grammar first)43 W
8280 45458 MT
(maps the roles from semantic functions \050like)387 W
/Courier SF
29070 XM
(agent)SH
/Times-Roman SF
32707 XM
(or)SH
/Courier SF
34177 XM
(medium)SH
/Times-Roman SF
(\051 to)
387 W( syntactic roles \050like)388 W
/Courier SF
49409 XM
(subject)SH
/Times-Roman SF
54247 XM
(or)SH
/Courier SF
8280 46835 MT
(direct-object)SH
/Times-Roman SF
(\051, and then does the required)
46 W( syntactic adjustments.  In gr11, \050cf. file)45 W
/Courier SF
44248 XM
(gr11.l)SH
/Times-Roman SF
(\051, , there are three)45 W
8280 48212 MT
(stages: first the clause grammar maps from semantic)
52 W( roles to a level called ``oblique'', and then oblique is mapped)53 W
8280 49589 MT
(to syntactic functions such as subject or adjunct.)SH
10080 52068 MT
(In general, the important idea here is that you must first determine your)
27 W( input and your output and the grammar)26 W
8280 53445 MT
(is the difference of the two.)SH
10080 55924 MT
(The process can)
22 W( be complicated if your grammar also includes a lexicon.  In this case, a good part of the output)23 W
8280 57301 MT
(should be provided by the lexicon.  Grammar gr11 illustrates one way of including the lexicon in your grammar.)SH
ES
%%Page: 12 13
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(12)SH
ES
%%Page: 13 14
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(13)SH
16 /Times-Bold AF
8280 11872 MT
(5. Precise Characterization of FDs)SH
14 SS 
8280 15690 MT
(5.1. Generalities: Features, Syntax, Paths and Equations)SH
10 /Times-Roman AF
10080 17067 MT
(An FD is a list of pairs, called features. The attribute of a feature needs to be a symbol.  The value of a)
41 W( feature)40 W
8280 18444 MT
(can be either a leaf or recursively an FD. Here is an example:)SH
9 /Courier AF
10839 20129 MT
(\0501\051 \050\050cat np\051)SH
13539 21077 MT
(\050det \050\050cat article\051)SH
16779 22025 MT
(\050definite yes\051\051\051)SH
13539 22973 MT
(\050n \050\050cat)
1080 W( noun\051)SH
16779 23921 MT
(\050number plural\051\051\051\051)SH
42480 5338 50 10440 24506 BX BX1
10 /Times-Roman AF
10080 26985 MT
(A ``leaf'' is a primitive fd.  It can be either a symbol, a number, a string, a character or an array.)SH
10080 29464 MT
(A given attribute in an FD must have at most ONE value.  Therefore, the FD)87 W
/Courier SF
42412 XM
(\050\050size 1\051)
87 W( \050size 2\051\051)88 W
/Times-Roman SF
54413 XM
(is)SH
8280 30841 MT
(illegal. In fact FDs can be viewed as a conjunction of constraints on the description of an object: for an object to)
33 W( be)32 W
8280 32218 MT
(described by)38 W
/Courier SF
13688 XM
(\050\050size 1\051 \050size 2\051\051)38 W
/Times-Roman SF
25490 XM
(it would need to)
38 W( have its property)39 W
/Courier SF
39453 XM
(size)SH
/Times-Roman SF
42142 XM
(to have both the values 1 and 2.)39 W
8280 33595 MT
(Conversely, if the attribute)87 W
/Courier SF
19599 XM
(size)SH
/Times-Roman SF
22336 XM
(does not appear in the FD, that means its value is not)
87 W( constrained and it can be)86 W
8280 34972 MT
(anything. The)
512 W( FD)131 W
/Courier SF
16387 XM
(nil)SH
/Times-Roman SF
18568 XM
(\050empty list of pairs\051)
131 W( thus represents all the objects in the world. The pair)132 W
/Courier SF
49548 XM
(\050att nil\051)132 W
/Times-Roman SF
8280 36349 MT
(expresses the constraint that the value of)47 W
/Courier SF
25078 XM
(att)SH
/Times-Roman SF
27175 XM
(can be anything.  It is therefore useless,)
47 W( and the FD)46 W
/Courier SF
48434 XM
(\050\050att1 nil\051)46 W
8280 37726 MT
(\050att2 val2\051\051)SH
/Times-Roman SF
15730 XM
(is exactly equivalent to the FD)SH
/Courier SF
28229 XM
(\050\050att2 val2\051\051)SH
/Times-Roman SF
(.)SH
10080 40205 MT
(Any position in an FD can be unambiguously referred to by the ``path'' leading from the top-level of the)
28 W( FD to)29 W
8280 41582 MT
(the value considered. For example, FD \0501\051 can be described by the set of expressions:)SH
9 /Courier AF
10839 43267 MT
({cat} = np)SH
10839 44215 MT
({det cat} = article)SH
10839 45163 MT
({det definite} = yes)SH
10839 46111 MT
({n cat} = noun)SH
10839 47059 MT
({n number} = plural)SH
42480 5338 50 10440 47644 BX BX1
10 /Times-Roman AF
10080 50123 MT
(Paths are represented as simple lists of atoms between)
68 W( curly braces \050for example,)67 W
/Courier SF
43618 XM
({det definite})67 W
/Times-Roman SF
(\051. This)384 W
8280 51500 MT
(notation is not ambiguous because at each level there is at most one feature with a given attribute.)SH
10080 53979 MT
(A path can be ``absolute'' or)
5 W( ``relative.'' An absolute path gives the way from the top-level of the FD down to a)6 W
8280 55356 MT
(value. A relative)
12 W( path starts with the symbol ``)11 W
/Courier SF
(^)SH
/Times-Roman SF
('' \050up-arrow\051. It refers to the FD embedding the current feature. You)11 W
8280 56733 MT
(can have several ``)SH
/Courier SF
(^)SH
/Times-Roman SF
('' in a row to go up several levels.)
SH( For)
500 W( example:)SH
9 /Courier AF
10839 58418 MT
(\050\050cat s\051)SH
11379 59366 MT
(\050prot \050\050cat np\051)SH
15159 60314 MT
(\050number sing\051\051\051)SH
11379 61262 MT
(\050verb \050\050cat vp\051)SH
15159 62210 MT
(\050number {^ ^ prot number}\051\051\051\051)SH
22179 63158 MT
(^)SH
10839 64106 MT
(_____________________|)SH
10839 65054 MT
(this is refering to the absolute path {prot number})SH
42480 8182 50 10440 65639 BX BX1
10 /Times-Roman AF
10080 68118 MT
(The notation {^4 x} is equivalent to {^ ^ ^)
210 W( ^ x}.  It is convenient when dealing with deeply embedded)211 W
8280 69495 MT
(constituents.)SH
10080 71974 MT
(Relative paths are)
88 W( not simply a syntactic convenience, but they extend the expressibility of the formalism, by)87 W
ES
%%Page: 14 15
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(14)SH
6120 11486 MT
(making grammars ``relocatable''.  For example, the grammar for NPs can be unified with)
98 W( a subconstituent of the)99 W
6120 12863 MT
(input FD at)
407 W( different levels \050)406 W
/Courier SF
({agent})SH
/Times-Roman SF
24423 XM
(and)SH
/Courier SF
26523 XM
({affected})SH
/Times-Roman SF
33179 XM
(for example\051.  In each case, a feature like)406 W
/Courier SF
6120 14240 MT
(\050determiner \050\050number {^ ^ number}\051\051\051)48 W
/Times-Roman SF
28210 XM
(points to the number of the appropriate constituent.)
48 W( Without)348 W
6120 15617 MT
(relative paths such a general constraint could not be expressed.)SH
7920 18096 MT
(The value of a pair can be a path. In that case, it means that the)
20 W( values of the pair pointed to by the path and the)19 W
6120 19473 MT
(value of the current pair must always be the same.  The two features are)
94 W( then said to be unified.  In the previous)95 W
6120 20850 MT
(example, the features at the paths)50 W
/Courier SF
20000 XM
({verb number})50 W
/Times-Roman SF
28150 XM
(and)SH
/Courier SF
29894 XM
({prot number})50 W
/Times-Roman SF
38044 XM
(are unified. This)
50 W( means that they are)49 W
6120 22227 MT
(absolutely equivalent, they are two names for the same object \050structure sharing\051.  This is)
23 W( equivalent to the systemic)24 W
6120 23604 MT
(operation of ``conflation''.)SH
7920 26083 MT
(In general, an expression of)
16 W( the form)15 W
/Courier SF
23025 XM
(x = y)15 W
/Times-Roman SF
(, where either)15 W
/Courier SF
31820 XM
(x)SH
/Times-Roman SF
32685 XM
(or)SH
/Courier SF
33783 XM
(y)SH
/Times-Roman SF
34648 XM
(is a path or a leaf is called an equation. An fd)15 W
6120 27460 MT
(can be viewed as a flat list of equations.)SH
7920 29939 MT
(In FUF, it is possible to have paths on the left of a pair.  It is therefore possible to represent an fd as a list of)75 W
6120 31316 MT
(equations as follows:)SH
9 /Courier AF
8679 33001 MT
(\050\050{cat} np\051)SH
9219 33949 MT
(\050{det cat} article\051)SH
9219 34897 MT
(\050{det definite} yes\051)SH
9219 35845 MT
(\050{n cat}  noun\051)SH
9219 36793 MT
(\050{n number}  plural\051\051)SH
42480 5338 50 8280 37378 BX BX1
8 /Times-Roman AF
46219 39512 MT
(2)SH
(3)SH
10 SS 
7920 39857 MT
(This notation allows to freely mix the ``fds as equations'' view with the ``fds as structure'' one.)SH
7920 42336 MT
(The only case where a given attribute can appear in)
54 W( several pairs is when it is followed by paths in all but one)53 W
6120 43713 MT
(pairs. That is:)SH
9 /Courier AF
8679 45398 MT
(\050\050a \050\050a1 v1\051\051\051)SH
9219 46346 MT
(\050a {b}\051)SH
9219 47294 MT
(\050a {c}\051\051)SH
42480 3442 50 8280 47879 BX BX1
10 /Times-Roman AF
7920 50358 MT
(is a valid FD. It is equivalent for example to:)SH
10800 50 6120 57438 UL
6 SS 
6920 58755 MT
(2)SH
8 SS 
7220 59064 MT
(Note that the possibility to put)
19 W( paths on the left increases the expressive power of the)18 W
/Courier SF
34874 XM
(external)SH
/Times-Roman SF
38932 XM
(construct, as it becomes possible to express)18 W
6120 59988 MT
(at run-time constraints on constituents which are not dominated by the position of the external construct in the structure.)SH
6 SS 
6920 61527 MT
(3)SH
8 SS 
7220 61836 MT
(When using a path on the left, note that the)
32 W( right hand side of the equation is always interpreted as occurring in the context pointed to by the)33 W
6120 62760 MT
(left-hand side.  So if you need to use relative paths, the relative path)
10 W( on the right is relative to the end position of the left-hand side.  For example,)9 W
6120 63684 MT
(to unify two features {verb syntax number} and {prot number} at level {verb v}, you must write:)SH
6920 65532 MT
(\050\050verb \050\050v \050\050{^ syntax number} {^ ^ ^ prot number}\051\051\051\051\051\051)SH
6920 67380 MT
(and not:)SH
6920 69228 MT
(\050\050verb \050\050v \050\050{^ syntax number} {^ prot number}\051\051\051\051\051\051)SH
6920 71076 MT
(because in this second equation, the path {^ prot number} is relative to the)
3 W( level {verb syntax number} \050not {verb v} as intended\051 and therefore)4 W
6120 72000 MT
(would end up at level {verb syntax prot number} instead of {prot number}.)SH
ES
%%Page: 15 16
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(15)SH
9 /Courier AF
10839 11761 MT
(\050\050b \050\050a1 v1\051\051\051)SH
11379 12709 MT
(\050a {b}\051)SH
11379 13657 MT
(\050c {b}\051\051)SH
10839 15553 MT
(or to:)SH
10839 17449 MT
(\050\050b \050\050a1 v1\051\051\051)SH
11379 18397 MT
(\050{a} {b}\051)SH
11379 19345 MT
(\050c {a}\051\051)SH
42480 9130 50 10440 19930 BX BX1
10 /Times-Roman AF
10080 22409 MT
(The function)SH
/Courier SF
15468 XM
(normalize-fd)SH
/Times-Roman SF
23168 XM
(is convenient to put an FD into its canonical form.  For example:)SH
9 /Courier AF
10839 25042 MT
(\050setf fd1 '\050\050a \050\050a1 v1\051\051\051)SH
17319 25990 MT
(\050b \050\050b1 w1\051\051\051)SH
17319 26938 MT
(\050a \050\050a2 v2\051\051\051)SH
17319 27886 MT
(\050b \050\050b2 \050\050w2 2\051\051\051\051\051)SH
17319 28834 MT
(\050b \050\050b2 \050\050w3 3\051\051\051\051\051\051\051)SH
10839 30730 MT
(LISP> \050normalize fd1\051)SH
10839 32626 MT
(\050\050a \050\050a1 v1\051)SH
13539 33574 MT
(\050a2 v2\051\051\051)SH
11379 34522 MT
(\050b \050\050b1 w1\051)SH
13539 35470 MT
(\050b2 \050\050w2 2\051)SH
16239 36418 MT
(\050w3 3\051\051\051\051\051\051)SH
42480 14632 50 10440 37765 BX BX1
10 /Times-Roman AF
10080 40244 MT
(All unification functions)
58 W( assume that the input fd is given in canonical form.)59 W
/Courier SF
41985 XM
(normalize-fd)SH
/Times-Roman SF
49494 XM
(is particularly)59 W
8280 41621 MT
(useful when the inputs are produced incrementally by a)
82 W( program.  Note that)81 W
/Courier SF
39835 XM
(normalize-fd)SH
/Times-Roman SF
47366 XM
(will fail and return)81 W
/Courier SF
8280 42998 MT
(*fail*)SH
/Times-Roman SF
12130 XM
(if the input FD is not consistent \050for example \050\050a 1\051 \050a 2\051\051\051.)SH
14 /Times-Bold AF
8280 46816 MT
(5.2. FDs as Graphs)SH
10 /Times-Roman AF
10080 48193 MT
(When the structure)
201 W( of an FD becomes complex, and more conflations with paths are introduced, a visual)202 W
8280 49570 MT
(representation of the FD)
8 W( becomes extremely useful.  This visual representation also provides a clear interpretation of)7 W
8280 50947 MT
(the path mechanism and makes reading of relative path)
8 W( much easier.  The structured format of FDs can be viewed as)9 W
8280 52324 MT
(equivalent to a directed graph with labeled arcs as pointed)
30 W( out in)
29 W( [9].)
SH( The)
308 W( correspondence is established as follows:)29 W
8280 53701 MT
(an FD is a node, each pair)26 W
/Courier SF
19126 XM
(\050attr value\051)26 W
/Times-Roman SF
26628 XM
(is a labeled arc leaving this node.  The)26 W
/Courier SF
42470 XM
(attr)SH
/Times-Roman SF
45146 XM
(of the pair is the)
26 W( label of)27 W
8280 55078 MT
(the arc, the value is the)
22 W( adjacent node. Internal nodes in the graph have therefore no label whereas leaves are atomic)21 W
8280 56455 MT
(values. The)
250 W( equivalence is illustrated in Fig.5-1.)SH
10080 58934 MT
(The graph notation is)
52 W( particularly useful to interpret relative paths.  When a relative path occurs somewhere in)53 W
8280 60311 MT
(an FD, its destination can be identified by going up on the)
36 W( arcs, one arc for each ")35 W
/Courier SF
(^)SH
/Times-Roman SF
(". When)
320 W( the value of a pair is a)35 W
8280 61688 MT
(path, e.g.,)97 W
/Courier SF
12640 XM
(\050a {b}\051)97 W
/Times-Roman SF
(, then the corresponding arc actually points to the same node as the given path. In this case,)97 W
8280 63065 MT
(there is structure sharing between a and b. This configuration is illustrated in Fig.5-2, where the paths)101 W
/Courier SF
50880 XM
({action)SH
8280 64442 MT
(number})SH
/Times-Roman SF
12915 XM
(and)SH
/Courier SF
14794 XM
({agent number})185 W
/Times-Roman SF
23814 XM
(are conflated,)
185 W( as well as the paths)186 W
/Courier SF
38778 XM
({affected lex})186 W
/Times-Roman SF
47800 XM
(and)SH
/Courier SF
49680 XM
({affected)SH
8280 65819 MT
(head lex})SH
/Times-Roman SF
13930 XM
(and)SH
/Courier SF
15624 XM
({subject})SH
/Times-Roman SF
21274 XM
(and)SH
/Courier SF
22968 XM
({agent})SH
/Times-Roman SF
(.)SH
10080 68298 MT
(The conflation of)151 W
/Courier SF
17726 XM
({subject})SH
/Times-Roman SF
23527 XM
(with)SH
/Courier SF
25706 XM
({agent})SH
/Times-Roman SF
30306 XM
(makes all the paths that are extensions of either)150 W
/Courier SF
50847 XM
(agent)SH
/Times-Roman SF
54247 XM
(or)SH
/Courier SF
8280 69675 MT
(subject)SH
/Times-Roman SF
12810 XM
(equivalent. For)
410 W( example,)80 W
/Courier SF
23573 XM
({agent lex})80 W
/Times-Roman SF
30583 XM
(and)SH
/Courier SF
32357 XM
({subject lex})80 W
/Times-Roman SF
40567 XM
(are equivalent.  This equivalence is)81 W
8280 71052 MT
(easily read in the graph notation.)SH
ES
%%Page: 16 17
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(16)SH
1216 1000 0 8193 96385 GB 
%%BeginDocument: graph12.ps
%!PS-Adobe-2.0 EPSF-1.2
%%DocumentFonts: Times-Roman
%%%Pages: 1
%%BoundingBox: 29 539 325 670
%%EndComments

50 dict begin

/arrowHeight 8 def
/arrowWidth 4 def
/none null def
/numGraphicParameters 17 def
/stringLimit 65535 def

/Begin {
save
numGraphicParameters dict begin
} def

/End {
end
restore
} def

/SetB {
dup type /nulltype eq {
pop
false /brushRightArrow idef
false /brushLeftArrow idef
true /brushNone idef
} {
/brushDashOffset idef
/brushDashArray idef
0 ne /brushRightArrow idef
0 ne /brushLeftArrow idef
/brushWidth idef
false /brushNone idef
} ifelse
} def

/SetCFg {
/fgblue idef
/fggreen idef
/fgred idef
} def

/SetCBg {
/bgblue idef
/bggreen idef
/bgred idef
} def

/SetF {
/printSize idef
/printFont idef
} def

/SetP {
dup type /nulltype eq {
pop true /patternNone idef
} {
dup -1 eq {
/patternGrayLevel idef
/patternString idef
} {
/patternGrayLevel idef
} ifelse
false /patternNone idef
} ifelse
} def

/BSpl {
0 begin
storexyn
newpath
n 1 gt {
0 0 0 0 0 0 1 1 true subspline
n 2 gt {
0 0 0 0 1 1 2 2 false subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 2 copy false subspline
} if
n 2 sub dup n 1 sub dup 2 copy 2 copy false subspline
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Circ {
newpath
0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
} def

/CBSpl {
0 begin
dup 2 gt {
storexyn
newpath
n 1 sub dup 0 0 1 1 2 2 true subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 0 0 false subspline
n 2 sub dup n 1 sub dup 0 0 1 1 false subspline
patternNone not { ifill } if
brushNone not { istroke } if
} {
Poly
} ifelse
end
} dup 0 4 dict put def

/Elli {
0 begin
newpath
4 2 roll
translate
scale
0 0 1 0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 1 dict put def

/Line {
0 begin
2 storexyn
newpath
x 0 get y 0 get moveto
x 1 get y 1 get lineto
brushNone not { istroke } if
0 0 1 1 leftarrow
0 0 1 1 rightarrow
end
} dup 0 4 dict put def

/MLine {
0 begin
storexyn
newpath
n 1 gt {
x 0 get y 0 get moveto
1 1 n 1 sub {
/i exch def
x i get y i get lineto
} for
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Poly {
3 1 roll
newpath
moveto
-1 add
{ lineto } repeat
closepath
patternNone not { ifill } if
brushNone not { istroke } if
} def

/Rect {
0 begin
/t exch def
/r exch def
/b exch def
/l exch def
newpath
l b moveto
l t lineto
r t lineto
r b lineto
closepath
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 4 dict put def

/Text {
ishow
} def

/idef {
dup where { pop pop pop } { exch def } ifelse
} def

/ifill {
0 begin
gsave
patternGrayLevel -1 ne {
fgred bgred fgred sub patternGrayLevel mul add
fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor
eofill
} {
eoclip
originalCTM setmatrix
pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def
/h t b sub ceiling cvi def
/imageByteWidth w 8 div ceiling cvi def
/imageHeight h def
bgred bggreen bgblue setrgbcolor
eofill
fgred fggreen fgblue setrgbcolor
w 0 gt h 0 gt and {
l b translate w h scale
w h true [w 0 0 h neg 0 h] { patternproc } imagemask
} if
} ifelse
grestore
end
} dup 0 8 dict put def

/istroke {
gsave
brushDashOffset -1 eq {
[] 0 setdash
1 setgray
} {
brushDashArray brushDashOffset setdash
fgred fggreen fgblue setrgbcolor
} ifelse
brushWidth setlinewidth
originalCTM setmatrix
stroke
grestore
} def

/ishow {
0 begin
gsave
fgred fggreen fgblue setrgbcolor
/fontDict printFont findfont printSize scalefont dup setfont def
/descender fontDict begin 0 [FontBBox] 1 get FontMatrix end
transform exch pop def
/vertoffset 0 descender sub printSize sub printFont /Courier ne
printFont /Courier-Bold ne and { 1 add } if def {
0 vertoffset moveto show
/vertoffset vertoffset printSize sub def
} forall
grestore
end
} dup 0 3 dict put def

/patternproc {
0 begin
/patternByteLength patternString length def
/patternHeight patternByteLength 8 mul sqrt cvi def
/patternWidth patternHeight def
/patternByteWidth patternWidth 8 idiv def
/imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def
/imageMaxHeight imageByteMaxLength imageByteWidth idiv patternHeight idiv
patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store
/imageString imageByteWidth imageMaxHeight mul patternByteWidth add string def
0 1 imageMaxHeight 1 sub {
/y exch def
/patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def
0 patternByteWidth imageByteWidth 1 sub {
/x exch def
imageString imageRow x add patternRowString putinterval
} for
} for
imageString
end
} dup 0 12 dict put def

/min {
dup 3 2 roll dup 4 3 roll lt { exch } if pop
} def

/max {
dup 3 2 roll dup 4 3 roll gt { exch } if pop
} def

/arrowhead {
0 begin
transform originalCTM itransform
/taily exch def
/tailx exch def
transform originalCTM itransform
/tipy exch def
/tipx exch def
/dy tipy taily sub def
/dx tipx tailx sub def
/angle dx 0 ne dy 0 ne or { dy dx atan } { 90 } ifelse def
gsave
originalCTM setmatrix
tipx tipy translate
angle rotate
newpath
0 0 moveto
arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto
closepath
patternNone not {
originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def
/padtail brushWidth 2 div def
tipx tipy translate
angle rotate
padtip 0 translate
arrowHeight padtip add padtail add arrowHeight div dup scale
arrowheadpath
ifill
} if
brushNone not {
originalCTM setmatrix
tipx tipy translate
angle rotate
arrowheadpath
istroke
} if
grestore
end
} dup 0 9 dict put def

/arrowheadpath {
newpath
0 0 moveto
arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto
closepath
} def

/leftarrow {
0 begin
y exch get /taily exch def
x exch get /tailx exch def
y exch get /tipy exch def
x exch get /tipx exch def
brushLeftArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/rightarrow {
0 begin
y exch get /tipy exch def
x exch get /tipx exch def
y exch get /taily exch def
x exch get /tailx exch def
brushRightArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/midpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 x1 add 2 div
y0 y1 add 2 div
end
} dup 0 4 dict put def

/thirdpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 2 mul x1 add 3 div
y0 2 mul y1 add 3 div
end
} dup 0 4 dict put def

/subspline {
0 begin
/movetoNeeded exch def
y exch get /y3 exch def
x exch get /x3 exch def
y exch get /y2 exch def
x exch get /x2 exch def
y exch get /y1 exch def
x exch get /x1 exch def
y exch get /y0 exch def
x exch get /x0 exch def
x1 y1 x2 y2 thirdpoint
/p1y exch def
/p1x exch def
x2 y2 x1 y1 thirdpoint
/p2y exch def
/p2x exch def
x1 y1 x0 y0 thirdpoint
p1x p1y midpoint
/p0y exch def
/p0x exch def
x2 y2 x3 y3 thirdpoint
p2x p2y midpoint
/p3y exch def
/p3x exch def
movetoNeeded { p0x p0y moveto } if
p1x p1y p2x p2y p3x p3y curveto
end
} dup 0 17 dict put def

/storexyn {
/n exch def
/y n array def
/x n array def
n 1 sub -1 0 {
/i exch def
y i 3 2 roll put
x i 3 2 roll put
} for
} def

%%EndProlog

%I Idraw 7 Grid 8 

%%%Page: 1 1

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.86747 0 0 0.86747 0 0 ] concat
/originalCTM matrix currentmatrix def

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 22 110 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 -95 40 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 -37 40 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 22 40 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 86 40 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 148 40 ] concat
%I
188 654 6 6 Elli
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 54 736 ] concat
%I
[
(agent)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 139 736 ] concat
%I
[
(action)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 213 736 ] concat
%I
[
(affected)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 277 736 ] concat
%I
[
(cat)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 344 736 ] concat
%I
[
(tense)
] Text
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 22 99 ] concat
%I
183 662 131 601 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 22 99 ] concat
%I
188 659 188 602 Line
End

Begin %I MLine
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 22 99 ] concat
%I 3
184 665
87 643
74 602
3 MLine
End

Begin %I MLine
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 22 99 ] concat
%I 3
194 663
249 635
252 604
3 MLine
End

Begin %I MLine
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 22 99 ] concat
%I 3
195 664
312 633
312 603
3 MLine
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 22 -6 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 -37 -7 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 -95 -6 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 -142 -5 ] concat
%I
188 654 6 6 Elli
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 22 99 ] concat
%I
71 589 29 554 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 22 99 ] concat
%I
72 589 72 556 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 22 99 ] concat
%I
130 588 130 555 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 22 99 ] concat
%I
189 590 189 558 Line
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 37 678 ] concat
%I
[
(proper)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 100 678 ] concat
%I
[
(lex)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 218 678 ] concat
%I
[
(lex)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 158 678 ] concat
%I
[
(lex)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 40 636 ] concat
%I
[
(no)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 69.5 636 ] concat
%I
[
("system")
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 129.5 636 ] concat
%I
[
("advise")
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 194 636 ] concat
%I
[
("John")
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 258 682 ] concat
%I
[
(clause)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 317 682 ] concat
%I
[
(present)
] Text
End

End %I eop

showpage

%%Trailer

end

%%EndDocument
 GE /Times-Bold SF
24304 32453 MT
(Figure 5-1:)SH
/Times-Roman SF
29553 XM
(FD as a graph)SH
46800 22976 50 6120 33776 BX BX1
1074 1000 0 4309 110815 GB 
%%BeginDocument: graph22.ps
%!PS-Adobe-2.0 EPSF-1.2
%%DocumentFonts: Times-Roman
%%%Pages: 1
%%BoundingBox: 69 507 404 670
%%EndComments

50 dict begin

/arrowHeight 8 def
/arrowWidth 4 def
/none null def
/numGraphicParameters 17 def
/stringLimit 65535 def

/Begin {
save
numGraphicParameters dict begin
} def

/End {
end
restore
} def

/SetB {
dup type /nulltype eq {
pop
false /brushRightArrow idef
false /brushLeftArrow idef
true /brushNone idef
} {
/brushDashOffset idef
/brushDashArray idef
0 ne /brushRightArrow idef
0 ne /brushLeftArrow idef
/brushWidth idef
false /brushNone idef
} ifelse
} def

/SetCFg {
/fgblue idef
/fggreen idef
/fgred idef
} def

/SetCBg {
/bgblue idef
/bggreen idef
/bgred idef
} def

/SetF {
/printSize idef
/printFont idef
} def

/SetP {
dup type /nulltype eq {
pop true /patternNone idef
} {
dup -1 eq {
/patternGrayLevel idef
/patternString idef
} {
/patternGrayLevel idef
} ifelse
false /patternNone idef
} ifelse
} def

/BSpl {
0 begin
storexyn
newpath
n 1 gt {
0 0 0 0 0 0 1 1 true subspline
n 2 gt {
0 0 0 0 1 1 2 2 false subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 2 copy false subspline
} if
n 2 sub dup n 1 sub dup 2 copy 2 copy false subspline
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Circ {
newpath
0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
} def

/CBSpl {
0 begin
dup 2 gt {
storexyn
newpath
n 1 sub dup 0 0 1 1 2 2 true subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 0 0 false subspline
n 2 sub dup n 1 sub dup 0 0 1 1 false subspline
patternNone not { ifill } if
brushNone not { istroke } if
} {
Poly
} ifelse
end
} dup 0 4 dict put def

/Elli {
0 begin
newpath
4 2 roll
translate
scale
0 0 1 0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 1 dict put def

/Line {
0 begin
2 storexyn
newpath
x 0 get y 0 get moveto
x 1 get y 1 get lineto
brushNone not { istroke } if
0 0 1 1 leftarrow
0 0 1 1 rightarrow
end
} dup 0 4 dict put def

/MLine {
0 begin
storexyn
newpath
n 1 gt {
x 0 get y 0 get moveto
1 1 n 1 sub {
/i exch def
x i get y i get lineto
} for
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Poly {
3 1 roll
newpath
moveto
-1 add
{ lineto } repeat
closepath
patternNone not { ifill } if
brushNone not { istroke } if
} def

/Rect {
0 begin
/t exch def
/r exch def
/b exch def
/l exch def
newpath
l b moveto
l t lineto
r t lineto
r b lineto
closepath
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 4 dict put def

/Text {
ishow
} def

/idef {
dup where { pop pop pop } { exch def } ifelse
} def

/ifill {
0 begin
gsave
patternGrayLevel -1 ne {
fgred bgred fgred sub patternGrayLevel mul add
fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor
eofill
} {
eoclip
originalCTM setmatrix
pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def
/h t b sub ceiling cvi def
/imageByteWidth w 8 div ceiling cvi def
/imageHeight h def
bgred bggreen bgblue setrgbcolor
eofill
fgred fggreen fgblue setrgbcolor
w 0 gt h 0 gt and {
l b translate w h scale
w h true [w 0 0 h neg 0 h] { patternproc } imagemask
} if
} ifelse
grestore
end
} dup 0 8 dict put def

/istroke {
gsave
brushDashOffset -1 eq {
[] 0 setdash
1 setgray
} {
brushDashArray brushDashOffset setdash
fgred fggreen fgblue setrgbcolor
} ifelse
brushWidth setlinewidth
originalCTM setmatrix
stroke
grestore
} def

/ishow {
0 begin
gsave
fgred fggreen fgblue setrgbcolor
/fontDict printFont findfont printSize scalefont dup setfont def
/descender fontDict begin 0 [FontBBox] 1 get FontMatrix end
transform exch pop def
/vertoffset 0 descender sub printSize sub printFont /Courier ne
printFont /Courier-Bold ne and { 1 add } if def {
0 vertoffset moveto show
/vertoffset vertoffset printSize sub def
} forall
grestore
end
} dup 0 3 dict put def

/patternproc {
0 begin
/patternByteLength patternString length def
/patternHeight patternByteLength 8 mul sqrt cvi def
/patternWidth patternHeight def
/patternByteWidth patternWidth 8 idiv def
/imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def
/imageMaxHeight imageByteMaxLength imageByteWidth idiv patternHeight idiv
patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store
/imageString imageByteWidth imageMaxHeight mul patternByteWidth add string def
0 1 imageMaxHeight 1 sub {
/y exch def
/patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def
0 patternByteWidth imageByteWidth 1 sub {
/x exch def
imageString imageRow x add patternRowString putinterval
} for
} for
imageString
end
} dup 0 12 dict put def

/min {
dup 3 2 roll dup 4 3 roll lt { exch } if pop
} def

/max {
dup 3 2 roll dup 4 3 roll gt { exch } if pop
} def

/arrowhead {
0 begin
transform originalCTM itransform
/taily exch def
/tailx exch def
transform originalCTM itransform
/tipy exch def
/tipx exch def
/dy tipy taily sub def
/dx tipx tailx sub def
/angle dx 0 ne dy 0 ne or { dy dx atan } { 90 } ifelse def
gsave
originalCTM setmatrix
tipx tipy translate
angle rotate
newpath
0 0 moveto
arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto
closepath
patternNone not {
originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def
/padtail brushWidth 2 div def
tipx tipy translate
angle rotate
padtip 0 translate
arrowHeight padtip add padtail add arrowHeight div dup scale
arrowheadpath
ifill
} if
brushNone not {
originalCTM setmatrix
tipx tipy translate
angle rotate
arrowheadpath
istroke
} if
grestore
end
} dup 0 9 dict put def

/arrowheadpath {
newpath
0 0 moveto
arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto
closepath
} def

/leftarrow {
0 begin
y exch get /taily exch def
x exch get /tailx exch def
y exch get /tipy exch def
x exch get /tipx exch def
brushLeftArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/rightarrow {
0 begin
y exch get /tipy exch def
x exch get /tipx exch def
y exch get /taily exch def
x exch get /tailx exch def
brushRightArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/midpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 x1 add 2 div
y0 y1 add 2 div
end
} dup 0 4 dict put def

/thirdpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 2 mul x1 add 3 div
y0 2 mul y1 add 3 div
end
} dup 0 4 dict put def

/subspline {
0 begin
/movetoNeeded exch def
y exch get /y3 exch def
x exch get /x3 exch def
y exch get /y2 exch def
x exch get /x2 exch def
y exch get /y1 exch def
x exch get /x1 exch def
y exch get /y0 exch def
x exch get /x0 exch def
x1 y1 x2 y2 thirdpoint
/p1y exch def
/p1x exch def
x2 y2 x1 y1 thirdpoint
/p2y exch def
/p2x exch def
x1 y1 x0 y0 thirdpoint
p1x p1y midpoint
/p0y exch def
/p0x exch def
x2 y2 x3 y3 thirdpoint
p2x p2y midpoint
/p3y exch def
/p3x exch def
movetoNeeded { p0x p0y moveto } if
p1x p1y p2x p2y p3x p3y curveto
end
} dup 0 17 dict put def

/storexyn {
/n exch def
/y n array def
/x n array def
n 1 sub -1 0 {
/i exch def
y i 3 2 roll put
x i 3 2 roll put
} for
} def

%%EndProlog

%I Idraw 7 Grid 8 

%%%Page: 1 1

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.86747 0 0 0.86747 0 0 ] concat
/originalCTM matrix currentmatrix def

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 113 110 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 -33 41 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 54 40 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 113 40 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 177 40 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 239 40 ] concat
%I
188 654 6 6 Elli
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 145 736 ] concat
%I
[
(agent)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 230 736 ] concat
%I
[
(action)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 304 736 ] concat
%I
[
(affected)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 368 736 ] concat
%I
[
(cat)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 435 736 ] concat
%I
[
(tense)
] Text
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 113 99 ] concat
%I
183 662 131 601 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 113 99 ] concat
%I
188 659 188 602 Line
End

Begin %I MLine
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1.23478 0 0 1 69.2868 99 ] concat
%I 3
184 665
92 629
72 602
3 MLine
End

Begin %I MLine
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 113 99 ] concat
%I 3
194 663
249 635
252 604
3 MLine
End

Begin %I MLine
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 113 99 ] concat
%I 3
195 664
312 633
312 603
3 MLine
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 113 -34 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 54 -7 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 -33 -5 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 -80 -4 ] concat
%I
188 654 6 6 Elli
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 84 100 ] concat
%I
71 589 29 554 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 84 100 ] concat
%I
72 589 72 556 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 113 99 ] concat
%I
130 588 130 555 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 113 99 ] concat
%I
189 590 189 529 Line
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 99 679 ] concat
%I
[
(proper)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 162 679 ] concat
%I
[
(lex)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 307 661 ] concat
%I
[
(lex)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 249 678 ] concat
%I
[
(lex)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 102 637 ] concat
%I
[
(no)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 131.5 637 ] concat
%I
[
("system")
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 220.5 636 ] concat
%I
[
("advise")
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 285 608 ] concat
%I
[
("John")
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 349 682 ] concat
%I
[
(clause)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 408 682 ] concat
%I
[
(present)
] Text
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 163 -34.0001 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 13 -43.0001 ] concat
%I
188 654 6 6 Elli
End

Begin %I BSpl
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 22 99 ] concat
%I 5
274 667
138 653
103 633
101 614
126 598
5 BSpl
End

Begin %I BSpl
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 22 99 ] concat
%I 4
140 593
164 576
173 542
178 520
4 BSpl
End

Begin %I BSpl
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 22 99 ] concat
%I 4
217 591
198 572
190 553
183 522
4 BSpl
End

Begin %I BSpl
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 22 99 ] concat
%I 3
283 591
308 579
328 530
3 BSpl
End

Begin %I BSpl
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 27 72 ] concat
%I 2
318 548
287 548
2 BSpl
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 83 736 ] concat
%I
[
(subject)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 187 678 ] concat
%I
[
(number)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 321 636 ] concat
%I
[
(lex)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 181 599 ] concat
%I
[
(singular)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 346 658 ] concat
%I
[
(head)
] Text
End

End %I eop

showpage

%%Trailer

end

%%EndDocument
 GE /Times-Bold SF
21817 57974 MT
(Figure 5-2:)SH
/Times-Roman SF
27066 XM
(Conflation in an FD graph)SH
46800 24416 50 6120 59297 BX BX1
7920 61776 MT
(The graph)
37 W( notation also makes it clear that the up-arrow notation can be ambiguous.  Whenever a Y configura-)36 W
6120 63153 MT
(tion is met in the graph,)
35 W( for example in the two black nodes in Fig.5-2, the up-arrow does not specify which branch)36 W
6120 64530 MT
(of the Y must be taken.  This problem is illustrated in the grammar in Fig.5-3. The FD is)
33 W( extracted from a grammar)32 W
6120 65907 MT
(dealing with conjunction.  The constraint enforced by the)
92 W( grammar is that all the conjuncts in a conjunction must)93 W
6120 67284 MT
(have the same syntactic category.  A conjunction is represented by an FD with)
83 W( two constituents:)82 W
/Courier SF
46134 XM
(head)SH
/Times-Roman SF
48866 XM
(represents)SH
6120 68661 MT
(the conjunction as a whole as a constituent and)14 W
/Courier SF
25271 XM
(list)SH
/Times-Roman SF
27936 XM
(is a list of conjuncts.  The list is represented in a singly-linked)15 W
6120 70038 MT
(list of elements, with a)
5 W( recursive FD containing at each level the first element of the list \050feature)4 W
/Courier SF
44828 XM
(car)SH
/Times-Roman SF
(\051 and the rest of)4 W
6120 71415 MT
(the list \050feature)99 W
/Courier SF
12721 XM
(cdr)SH
/Times-Roman SF
(\051. In)
448 W( Fig.5-3, the path)99 W
/Courier SF
24142 XM
(c1)SH
/Times-Roman SF
25691 XM
(is used to point to the first constituent of the)
99 W( list.)100 W
/Courier SF
46744 XM
(c1)SH
/Times-Roman SF
48294 XM
(is therefore)100 W
ES
%%Page: 17 18
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(17)SH
1125 1000 0 267 83448 GB 
%%BeginDocument: graph32.ps
%!PS-Adobe-2.0 EPSF-1.2
%%DocumentFonts: Times-Roman
%%%Pages: 1
%%BoundingBox: 121 474 401 634
%%EndComments

50 dict begin

/arrowHeight 8 def
/arrowWidth 4 def
/none null def
/numGraphicParameters 17 def
/stringLimit 65535 def

/Begin {
save
numGraphicParameters dict begin
} def

/End {
end
restore
} def

/SetB {
dup type /nulltype eq {
pop
false /brushRightArrow idef
false /brushLeftArrow idef
true /brushNone idef
} {
/brushDashOffset idef
/brushDashArray idef
0 ne /brushRightArrow idef
0 ne /brushLeftArrow idef
/brushWidth idef
false /brushNone idef
} ifelse
} def

/SetCFg {
/fgblue idef
/fggreen idef
/fgred idef
} def

/SetCBg {
/bgblue idef
/bggreen idef
/bgred idef
} def

/SetF {
/printSize idef
/printFont idef
} def

/SetP {
dup type /nulltype eq {
pop true /patternNone idef
} {
dup -1 eq {
/patternGrayLevel idef
/patternString idef
} {
/patternGrayLevel idef
} ifelse
false /patternNone idef
} ifelse
} def

/BSpl {
0 begin
storexyn
newpath
n 1 gt {
0 0 0 0 0 0 1 1 true subspline
n 2 gt {
0 0 0 0 1 1 2 2 false subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 2 copy false subspline
} if
n 2 sub dup n 1 sub dup 2 copy 2 copy false subspline
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Circ {
newpath
0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
} def

/CBSpl {
0 begin
dup 2 gt {
storexyn
newpath
n 1 sub dup 0 0 1 1 2 2 true subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 0 0 false subspline
n 2 sub dup n 1 sub dup 0 0 1 1 false subspline
patternNone not { ifill } if
brushNone not { istroke } if
} {
Poly
} ifelse
end
} dup 0 4 dict put def

/Elli {
0 begin
newpath
4 2 roll
translate
scale
0 0 1 0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 1 dict put def

/Line {
0 begin
2 storexyn
newpath
x 0 get y 0 get moveto
x 1 get y 1 get lineto
brushNone not { istroke } if
0 0 1 1 leftarrow
0 0 1 1 rightarrow
end
} dup 0 4 dict put def

/MLine {
0 begin
storexyn
newpath
n 1 gt {
x 0 get y 0 get moveto
1 1 n 1 sub {
/i exch def
x i get y i get lineto
} for
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Poly {
3 1 roll
newpath
moveto
-1 add
{ lineto } repeat
closepath
patternNone not { ifill } if
brushNone not { istroke } if
} def

/Rect {
0 begin
/t exch def
/r exch def
/b exch def
/l exch def
newpath
l b moveto
l t lineto
r t lineto
r b lineto
closepath
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 4 dict put def

/Text {
ishow
} def

/idef {
dup where { pop pop pop } { exch def } ifelse
} def

/ifill {
0 begin
gsave
patternGrayLevel -1 ne {
fgred bgred fgred sub patternGrayLevel mul add
fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor
eofill
} {
eoclip
originalCTM setmatrix
pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def
/h t b sub ceiling cvi def
/imageByteWidth w 8 div ceiling cvi def
/imageHeight h def
bgred bggreen bgblue setrgbcolor
eofill
fgred fggreen fgblue setrgbcolor
w 0 gt h 0 gt and {
l b translate w h scale
w h true [w 0 0 h neg 0 h] { patternproc } imagemask
} if
} ifelse
grestore
end
} dup 0 8 dict put def

/istroke {
gsave
brushDashOffset -1 eq {
[] 0 setdash
1 setgray
} {
brushDashArray brushDashOffset setdash
fgred fggreen fgblue setrgbcolor
} ifelse
brushWidth setlinewidth
originalCTM setmatrix
stroke
grestore
} def

/ishow {
0 begin
gsave
fgred fggreen fgblue setrgbcolor
/fontDict printFont findfont printSize scalefont dup setfont def
/descender fontDict begin 0 [FontBBox] 1 get FontMatrix end
transform exch pop def
/vertoffset 0 descender sub printSize sub printFont /Courier ne
printFont /Courier-Bold ne and { 1 add } if def {
0 vertoffset moveto show
/vertoffset vertoffset printSize sub def
} forall
grestore
end
} dup 0 3 dict put def

/patternproc {
0 begin
/patternByteLength patternString length def
/patternHeight patternByteLength 8 mul sqrt cvi def
/patternWidth patternHeight def
/patternByteWidth patternWidth 8 idiv def
/imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def
/imageMaxHeight imageByteMaxLength imageByteWidth idiv patternHeight idiv
patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store
/imageString imageByteWidth imageMaxHeight mul patternByteWidth add string def
0 1 imageMaxHeight 1 sub {
/y exch def
/patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def
0 patternByteWidth imageByteWidth 1 sub {
/x exch def
imageString imageRow x add patternRowString putinterval
} for
} for
imageString
end
} dup 0 12 dict put def

/min {
dup 3 2 roll dup 4 3 roll lt { exch } if pop
} def

/max {
dup 3 2 roll dup 4 3 roll gt { exch } if pop
} def

/arrowhead {
0 begin
transform originalCTM itransform
/taily exch def
/tailx exch def
transform originalCTM itransform
/tipy exch def
/tipx exch def
/dy tipy taily sub def
/dx tipx tailx sub def
/angle dx 0 ne dy 0 ne or { dy dx atan } { 90 } ifelse def
gsave
originalCTM setmatrix
tipx tipy translate
angle rotate
newpath
0 0 moveto
arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto
closepath
patternNone not {
originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def
/padtail brushWidth 2 div def
tipx tipy translate
angle rotate
padtip 0 translate
arrowHeight padtip add padtail add arrowHeight div dup scale
arrowheadpath
ifill
} if
brushNone not {
originalCTM setmatrix
tipx tipy translate
angle rotate
arrowheadpath
istroke
} if
grestore
end
} dup 0 9 dict put def

/arrowheadpath {
newpath
0 0 moveto
arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto
closepath
} def

/leftarrow {
0 begin
y exch get /taily exch def
x exch get /tailx exch def
y exch get /tipy exch def
x exch get /tipx exch def
brushLeftArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/rightarrow {
0 begin
y exch get /tipy exch def
x exch get /tipx exch def
y exch get /taily exch def
x exch get /tailx exch def
brushRightArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/midpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 x1 add 2 div
y0 y1 add 2 div
end
} dup 0 4 dict put def

/thirdpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 2 mul x1 add 3 div
y0 2 mul y1 add 3 div
end
} dup 0 4 dict put def

/subspline {
0 begin
/movetoNeeded exch def
y exch get /y3 exch def
x exch get /x3 exch def
y exch get /y2 exch def
x exch get /x2 exch def
y exch get /y1 exch def
x exch get /x1 exch def
y exch get /y0 exch def
x exch get /x0 exch def
x1 y1 x2 y2 thirdpoint
/p1y exch def
/p1x exch def
x2 y2 x1 y1 thirdpoint
/p2y exch def
/p2x exch def
x1 y1 x0 y0 thirdpoint
p1x p1y midpoint
/p0y exch def
/p0x exch def
x2 y2 x3 y3 thirdpoint
p2x p2y midpoint
/p3y exch def
/p3x exch def
movetoNeeded { p0x p0y moveto } if
p1x p1y p2x p2y p3x p3y curveto
end
} dup 0 17 dict put def

/storexyn {
/n exch def
/y n array def
/x n array def
n 1 sub -1 0 {
/i exch def
y i 3 2 roll put
x i 3 2 roll put
} for
} def

%%EndProlog

%I Idraw 7 Grid 8 

%%%Page: 1 1

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.86747 0 0 0.86747 0 0 ] concat
/originalCTM matrix currentmatrix def

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 78.625 68 ] concat
%I
188 654 6 6 Elli
End

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t u

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 138.25 -98 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 265 -98 ] concat
%I
188 654 6 6 Elli
End

End %I eop

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 -37.9999 -44 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 201.625 -44 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 76 -44 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 138.25 12 ] concat
%I
188 654 6 6 Elli
End

Begin %I Elli
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 19 12 ] concat
%I
188 654 6 6 Elli
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 54 122 ] concat
%I
212 595 157 549 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 54 122 ] concat
%I
212 595 268 549 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 54 122 ] concat
%I
148 540 102 494 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 54 122 ] concat
%I
268 540 219 495 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 54 122 ] concat
%I
275 537 331 492 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 54 122 ] concat
%I
333 482 279 439 Line
End

Begin %I Line
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 54 122 ] concat
%I
339 483 394 439 Line
End

Begin %I BSpl
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 54 122 ] concat
%I 3
265 433
168 433
103 480
3 BSpl
End

Begin %I BSpl
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 54 122 ] concat
%I 2
203 488
104 488
2 BSpl
End

Begin %I BSpl
%I b 65535
1 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 54 122 ] concat
%I 2
212 593
212 496
2 BSpl
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 208 702 ] concat
%I
[
(head)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 300 702 ] concat
%I
[
(list)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 252 665 ] concat
%I
[
(c1)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 282 652 ] concat
%I
[
(car)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 359 652 ] concat
%I
[
(cdr)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 339 593 ] concat
%I
[
(car)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 429 593 ] concat
%I
[
(cdr)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 228 578 ] concat
%I
[
(cat)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 195 623 ] concat
%I
[
(cat)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
/Times-Roman 12 SetF
%I t
[ 1 0 0 1 160 652 ] concat
%I
[
(cat)
] Text
End

End %I eop

showpage

%%Trailer

end

%%EndDocument
 GE /Times-Bold SF
23770 31733 MT
(Figure 5-3:)SH
/Times-Roman SF
29019 XM
(A grammar for conjunction)SH
46800 22256 50 8280 33056 BX BX1
8280 34847 MT
(defined by the equation)140 W
/Courier SF
18505 XM
({c1} = {list car})140 W
/Times-Roman SF
(. The)
530 W( grammar in)140 W
8 SS 
37268 XM
(LISP)SH
10 SS 
39302 XM
(notation is shown below along with a)139 W
8280 36224 MT
(sample input:)SH
9 /Courier AF
10839 38857 MT
(GR =)
SH( \050\050c1)
1620 W( {^ list car}\051)SH
15699 39805 MT
(\050c1 \050\050cat {^ ^ head cat}\051\051\051\051)SH
14580 50 15699 40005 UL
10839 41701 MT
(IN =)
SH( \050\050head)
1620 W( \050\050cat np\051\051\051)SH
15699 42649 MT
(\050list \050\050car \050\050lex "cat"\051\051\051)SH
19479 43597 MT
(\050cdr \050\050car \050\050lex "dog"\051\051\051)SH
22719 44545 MT
(\050cdr none\051\051\051\051\051\051)SH
42480 8944 50 10440 45892 BX BX1
10 /Times-Roman AF
10080 48371 MT
(The underlined line corresponds to the black)
115 W( dot in the graph notation shown in Fig.5-3.  The problem is to)116 W
8280 49748 MT
(interpret where the relative path)91 W
/Courier SF
21759 XM
({^ ^)
91 W( head cat})90 W
/Times-Roman SF
30770 XM
(is pointing to.  The notation is ambiguous between)90 W
/Courier SF
52080 XM
({head)SH
8280 51125 MT
(cat})SH
/Times-Roman SF
11048 XM
(and)SH
/Courier SF
12860 XM
({list head cat})118 W
/Times-Roman SF
(, depending)
118 W( on whether one considers the black dot as being located at address)119 W
/Courier SF
8280 52502 MT
({c1})SH
/Times-Roman SF
10962 XM
(or)SH
/Courier SF
12077 XM
({list car})32 W
/Times-Roman SF
(. This)
314 W( ambiguity is solved in FUF by following)
32 W( the convention that up-arrows always refer)31 W
8280 53879 MT
(to the textual location where they)
1 W( appear in the grammar.  So in this example, the up-arrows refer to the address)2 W
/Courier SF
53280 XM
({c1)SH
8280 55256 MT
(cat})SH
/Times-Roman SF
11011 XM
(and not to the address)81 W
/Courier SF
20387 XM
({list car cat})80 W
/Times-Roman SF
29277 XM
(because they are written as a pair)80 W
/Courier SF
43360 XM
(\050c1 \050\050cat {^ ^ head)80 W
8280 56633 MT
(cat}\051\051\051)SH
/Times-Roman SF
12730 XM
(and not as)SH
/Courier SF
17035 XM
(\050list \050\050car \050\050cat {^ ^ head cat}\051\051\051\051\051)SH
/Times-Roman SF
(.)SH
10080 59112 MT
(There are special attributes and)
6 W( values which cannot be drawn in this graph notation because they have a special)7 W
8280 60489 MT
(unification behavior.  These are, for attributes:)211 W
/Courier SF
28614 XM
(alt, opt, ralt, pattern, cset, fset, test,)211 W
8280 61866 MT
(control)SH
/Times-Roman SF
12758 XM
(and)SH
/Courier SF
14480 XM
(cat)SH
/Times-Roman SF
16558 XM
(\050or the)
28 W( currently specified cat attribute\051 and for values:)29 W
/Courier SF
39230 XM
(none, any)29 W
/Times-Roman SF
44938 XM
(and)SH
/Courier SF
46661 XM
(given)SH
/Times-Roman SF
(. The)
308 W( special)29 W
8280 63243 MT
(constructs)SH
/Courier SF
12708 XM
(#\050under x\051)123 W
/Times-Roman SF
19204 XM
(and)SH
/Courier SF
21021 XM
(#\050external y\051)123 W
/Times-Roman SF
29317 XM
(have also a special meaning for the unifier.  These are all the)122 W
8280 64620 MT
(``keywords'' known by the unifier.  They are presented in the following sections.)SH
ES
%%Page: 18 19
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(18)SH
14 /Times-Bold AF
6120 11738 MT
(5.3. Functional Descriptions vs. First-order Terms)SH
10 /Times-Roman AF
7920 13115 MT
(To conclude the characterization of FDs as a data-structure, it is useful to contrast)
75 W( functional unification \050FU\051)76 W
6120 14492 MT
(with the more well known structural unification \050SU\051 as used in)60 W
8 SS 
32527 XM
(PROLOG)SH
10 SS 
36039 XM
(for example, and to distinguish FDs from)59 W
6120 15869 MT
(the first-order terms used in SU.)SH
7920 18348 MT
(The most important difference is that functional unification is not based on order and length.  Therefore,)2 W
/Courier SF
49920 XM
({a:1,)SH
6120 19725 MT
(b:2})SH
/Times-Roman SF
8798 XM
(and)SH
/Courier SF
10520 XM
({b:2, a:1})27 W
/Times-Roman SF
16824 XM
(are equivalent in FU but not in SU, and)27 W
/Courier SF
33066 XM
({a:1})SH
/Times-Roman SF
36343 XM
(and)SH
/Courier SF
38064 XM
({b:2, a:1})27 W
/Times-Roman SF
44368 XM
(are compatible in FU)27 W
6120 21102 MT
(but not in SU \050FDs have no fixed)
132 W( arity\051.  The following quote from Knight summarizes the distinction between)133 W
6120 22479 MT
(feature structures and the first order terms used in SU:)SH
9 /Symbol AF
9531 23969 MT
(\267)SH
/Times-Roman SF
10170 XM
(Substructures are labeled symbolically, not inferred by argument position.)SH
/Symbol SF
9531 25590 MT
(\267)SH
/Times-Roman SF
10170 XM
(Fixed arity is not required.)SH
/Symbol SF
9531 27211 MT
(\267)SH
/Times-Roman SF
10170 XM
(The distinction between function and argument is removed.)SH
/Symbol SF
9531 28832 MT
(\267)SH
/Times-Roman SF
10170 XM
(Variables and coreference are treated separately. [21, p.105])SH
10 SS 
7920 31311 MT
(A comparison between the FD notation and the first-order term notation illustrates these differences.  The)182 W
6120 32688 MT
(following FD)
45 W( and first-order term can be used to represent the fact that)46 W
/Times-Italic SF
35294 XM
(Steve builds a crane that is 2 lbs and 4 feet)46 W
6120 34065 MT
(high)SH
/Times-Roman SF
(:)SH
/Courier SF
13320 35471 MT
(\050\050process build\051)SH
13920 36502 MT
(\050agent Steve\051)SH
13920 37533 MT
(\050object \050\050concept crane\051)SH
19920 38564 MT
(\050weight 2\051)SH
19920 39595 MT
(\050height 4\051\051\051\051)SH
8 SS 
30720 41324 MT
(4)SH
10 SS 
13320 41657 MT
(build\050Steve, Crane\050C1, 2, 4\051\051)SH
/Times-Roman SF
7920 44136 MT
(Contrasting these two notations for the same example illustrates the differences:)SH
/Symbol SF
7910 45589 MT
(\267)SH
/Times-Italic SF
8620 XM
(Symbolic labels for substructures)209 W
/Times-Roman SF
(: the arguments, that is the)209 W
/Courier SF
34667 XM
(agent)SH
/Times-Roman SF
38126 XM
(and the)209 W
/Courier SF
41710 XM
(medium)SH
/Times-Roman SF
(, are clearly)209 W
8620 46694 MT
(labeled in the feature structure notation.  In particular, a term like)40 W
/Courier SF
35483 XM
(Crane\050C1, 2, 4\051)40 W
/Times-Roman SF
44853 XM
(is particularly)40 W
8620 47799 MT
(difficult for a human to interpret.)SH
/Symbol SF
7910 49557 MT
(\267)SH
/Times-Italic SF
8620 XM
(Fixed arity)16 W
/Times-Roman SF
(: features can be added)
16 W( at will to an FD.  FDs are used to represent)15 W
/Times-Italic SF
40151 XM
(partial information)15 W
/Times-Roman SF
(. This)280 W
8620 50662 MT
(is not the)
50 W( case for first-order terms.  If the knowledge representation changes to include width to crane)51 W
8620 51767 MT
(descriptions, in addition to weight)
69 W( and height, all the terms need to be updated, since)68 W
/Courier SF
43752 XM
(Crane\050n, w,)68 W
8620 52872 MT
(h\051)SH
/Times-Roman SF
10123 XM
(is not compatible with)53 W
/Courier SF
19502 XM
(Crane\050n, w, h, l\051)53 W
/Times-Roman SF
(. The)
356 W( FD notation is always)
53 W( partial and leaves the)54 W
8620 53977 MT
(possibility of adding new features as needed.)SH
/Symbol SF
7910 55735 MT
(\267)SH
/Times-Italic SF
8620 XM
(Function and argument)100 W
/Times-Roman SF
(: first-order terms have a head \050the function\051 which plays a central role in the)99 W
8 SS 
42756 56503 MT
(5)SH
10 SS 
8620 56848 MT
(unification process.  This is not the case in FDs.  All information plays the same role.)SH
/Symbol SF
7910 58606 MT
(\267)SH
/Times-Italic SF
8620 XM
(Variables and coreference)75 W
/Times-Roman SF
(: in)
75 W( standard unification, a variable is used to mean two distinct things: that)76 W
8620 59711 MT
(the value of)
1 W( the role is unknown \050there are no constraints on it\051, and that the value of the role is the same)SH
8620 60816 MT
(as all other objects referred to with the same variable.)
1 W( So)
253 W( for example, in a term such as)2 W
/Courier SF
44168 XM
(like\050X, X\051)2 W
/Times-Roman SF
(,)SH
8620 61921 MT
(the use of the variable)21 W
/Courier SF
17806 XM
(X)SH
/Times-Roman SF
18677 XM
(means that)
21 W( we don't know who likes whom, and that it is known that the agent)20 W
10800 50 6120 64808 UL
6 SS 
6920 66147 MT
(4)SH
8 SS 
7220 66456 MT
(Other representations are of)
19 W( course possible using first-order notation.  Some of them have some of the advantages of features structures.  For)18 W
6120 67380 MT
(example: build\050B1\051, agent\050B1, Steve\051, object\050B1, C1\051, crane\050C1\051, weight\050C1, 2\051, height\050C1, 4\051.)
81 W( In)
364 W( fact, any FD can always be translated in a)82 W
6120 68304 MT
(one-to-one mapping to a class of restricted first-order terms.)SH
6 SS 
6920 69843 MT
(5)SH
8 SS 
7220 70152 MT
(In most cases, however, one feature plays a special role: for example, the)34 W
/Courier SF
31244 XM
(cat)SH
/Times-Roman SF
32918 XM
(attribute can specify the category or type of a description, but)35 W
6120 71076 MT
(this is not built into the syntax, and several such ``special'' attributes can coexist)
24 W( in the same FD, allowing a reader to adopt several perspectives)23 W
6120 72000 MT
(on the same FD.)SH
ES
%%Page: 19 20
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(19)SH
10780 11486 MT
(and the object of)161 W
/Courier SF
18367 XM
(like)SH
/Times-Roman SF
21178 XM
(must be the same objects.  The distinction between these two functions)
161 W( of)162 W
10780 12591 MT
(variables is best explained in)
199 W( [1].)
SH( In)
648 W( FDs, coreference and unspecification are)
199 W( represented by two)198 W
10780 13696 MT
(different syntactic devices: variables are features)
89 W( which are unspecified \050they simply do not appear in)90 W
10780 14801 MT
(the FD, or appear with)
21 W( an empty value\051, coreference is handled with)20 W
/Times-Italic SF
38517 XM
(paths)SH
/Times-Roman SF
(. For)
290 W( example, to express the)20 W
10780 15906 MT
(constraint that the medium of)33 W
/Courier SF
22972 XM
(like)SH
/Times-Roman SF
25655 XM
(must refer to the same object as its agent, the following FD can be)33 W
10780 17011 MT
(used:)SH
/Courier SF
14980 18417 MT
(\050\050process like\051)SH
15580 19448 MT
(\050agent {object}\051\051)SH
14 /Times-Bold AF
8280 23288 MT
(5.4. Disjunctions: The)SH
/Times-Roman SF
21697 XM
(ALT)SH
/Times-Bold SF
24768 XM
(and)SH
/Times-Roman SF
27374 XM
(RALT)SH
/Times-Bold SF
31379 XM
(Keywords)SH
10 /Courier AF
10080 24665 MT
(alt)SH
/Times-Roman SF
12130 XM
(stands for ``alternation''. The syntax for using)SH
/Courier SF
30904 XM
(alt)SH
/Times-Roman SF
32954 XM
(is:)SH
9 /Courier AF
10839 26350 MT
(\050\050att1 val1\051)SH
11379 27298 MT
(\050att2 val2\051)SH
12459 28246 MT
(...)SH
11379 29194 MT
(\050ALT {annotations*} \050fd1 fd2 ... fdn\051\051)SH
12459 30142 MT
(...)SH
11379 31090 MT
(\050attn valn\051\051)SH
42480 6286 50 10440 31675 BX BX1
10 /Times-Roman AF
10080 34154 MT
(The meaning of a pair with an)25 W
/Courier SF
22557 XM
(alt)SH
/Times-Roman SF
24631 XM
(attribute is the following: the unifier tries to unify the total FD by replacing)24 W
8280 35531 MT
(first the pair)58 W
/Courier SF
13592 XM
(alt)SH
/Times-Roman SF
15700 XM
(by the FD)58 W
/Courier SF
20124 XM
(fd1)SH
/Times-Roman SF
(, if this unification fails,)
58 W( then the unifier will try the following alternatives.  If all)59 W
8280 36908 MT
(branches of the)SH
/Courier SF
14639 XM
(alt)SH
/Times-Roman SF
16689 XM
(fail, the unification fails.)SH
10080 39387 MT
(The order in which branches are put within the)87 W
/Courier SF
29831 XM
(alt)SH
/Times-Roman SF
31968 XM
(does not change the result of)
87 W( the unification. \050This is an)86 W
8280 40764 MT
(important feature of the process of unification: the result is always order-independent.\051)
95 W( However,)
785 W( since only the)95 W
8280 42141 MT
(first successful unification is returned,)
146 W( order can be used to specify default values. For example, if you want to)145 W
8280 43518 MT
(specify that a sentence should be at the active voice by default, the following order should be used:)SH
9 /Courier AF
10839 45203 MT
(\050ALT \050\050\050voice active\051)SH
14619 46151 MT
(...\051)SH
14079 47099 MT
(\050\050voice passive\051)SH
14619 48047 MT
(...\051\051\051)SH
42480 4390 50 10440 48632 BX BX1
10 /Times-Roman AF
10080 51111 MT
(When the order is truly not relevant and there is)
111 W( no reason to choose a default branch, then you can use the)112 W
/Courier SF
8280 52488 MT
(ralt)SH
/Times-Roman SF
10956 XM
(keyword instead of)26 W
/Courier SF
18949 XM
(alt)SH
/Times-Roman SF
(.)SH
/Courier SF
21551 XM
(ralt)SH
/Times-Roman SF
24227 XM
(has exactly the same syntax as)26 W
/Courier SF
36825 XM
(alt)SH
/Times-Roman SF
38901 XM
(and also expresses a)
26 W( disjunction, but the)25 W
8280 53865 MT
(unifier will choose one of the branches at random instead of)
58 W( always trying the first untried branch.  \050ralt stands for)59 W
8280 55242 MT
(``random alt''\051)SH
10080 57721 MT
(Alternatively, the :order annotation)
70 W( can be used to specify whether the branches should be order in random or)69 W
8280 59098 MT
(sequential order.  The syntax is as follows:)SH
9 /Courier AF
10839 60783 MT
(\050alt \050:order :sequential\051)
SH( is)
2160 W( equivalent to  \050alt \050fd1...fdn\051\051)SH
11919 61731 MT
(\050fd1 ... fdn\051\051)SH
10839 63627 MT
(\050alt \050:order :random\051)
SH( is)
4320 W( equivalent to \050ralt \050fd1...fdn\051\051)SH
11919 64575 MT
(\050fd1 ... fdn\051\051)SH
42480 6100 50 10440 65922 BX BX1
10 /Times-Roman AF
10080 68401 MT
(An)SH
/Courier SF
11552 XM
(alt)SH
/Times-Roman SF
13602 XM
(can be embedded within another)SH
/Courier SF
26849 XM
(alt)SH
/Times-Roman SF
28899 XM
(or it can be the value of a feature as in:)SH
9 /Courier AF
10839 70086 MT
(\050\050a \050alt \0501 2 3 4\051\051\051\051)SH
42480 1546 50 10440 70671 BX BX1
ES
%%Page: 20 21
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(20)SH
14 /Times-Bold AF
6120 11760 MT
(5.5. Optional Features: the)SH
/Times-Roman SF
22451 XM
(OPT)SH
/Times-Bold SF
25445 XM
(Keyword)SH
10 /Courier AF
7920 13137 MT
(opt)SH
/Times-Roman SF
9970 XM
(is used to indicate that a set of features is optional. The syntax is)SH
9 /Courier AF
8679 14822 MT
(\050\050att1 val1\051)SH
11379 15770 MT
(...)SH
9219 16718 MT
(\050OPT fd\051)SH
11379 17666 MT
(...)SH
9219 18614 MT
(\050attn valn\051\051)SH
42480 5338 50 8280 19199 BX BX1
10 /Times-Roman AF
7920 21678 MT
(Its meaning is: if the unification of the whole FD succeeds with)
102 W( fd, it is returned as the result. If it fails, the)103 W
6120 23055 MT
(unifer tries again without fd.)
169 W( Since)
587 W( the FD nil can be unified successfully with any other FD,)168 W
/Courier SF
46700 XM
(opt)SH
/Times-Roman SF
48918 XM
(is a more)168 W
6120 24432 MT
(readable equivalent to the form:)SH
9 /Courier AF
8679 26117 MT
(\050ALT \050fd nil\051\051)SH
42480 1546 50 8280 26702 BX BX1
10 SS 
7920 29181 MT
(opt)SH
/Times-Roman SF
9970 XM
(is used exactly in the same way as)SH
/Courier SF
23912 XM
(alt)SH
/Times-Roman SF
(.)SH
14 /Times-Bold AF
6120 33021 MT
(5.6. Control of the Ordering: the)SH
/Times-Roman SF
25950 XM
(PATTERN)SH
/Times-Bold SF
32599 XM
(Keyword)SH
10 /Times-Roman AF
7920 34398 MT
(As mentioned previously, the generation of)
32 W( a sentence includes two subprocesses: unification and linearization.)33 W
6120 35775 MT
(Unification produces a complex description of a sentence, made of)
245 W( several constituents.  Each constituent is)244 W
6120 37152 MT
(described by an FD, and can recursively contain other subconstituents.)SH
7920 39631 MT
(Linearization takes such a complex non-ordered description)
37 W( and outputs a linear, ordered, string of words. This)38 W
6120 41008 MT
(operation is constrained by directives put within the)
71 W( FD. These constraints on the ordering appear after the special)70 W
6120 42385 MT
(attribute)SH
/Courier SF
9703 XM
(pattern)SH
/Times-Roman SF
(.)SH
7920 44864 MT
(For example, in)
52 W( a sentence containing the constituents)53 W
/Courier SF
30256 XM
(prot, goal)53 W
/Times-Roman SF
36612 XM
(and)SH
/Courier SF
38359 XM
(verb)SH
/Times-Roman SF
(, the following)53 W
/Courier SF
47029 XM
(pattern)SH
/Times-Roman SF
51532 XM
(can)SH
6120 46241 MT
(be used:)SH
9 /Courier AF
8679 47926 MT
(\050PATTERN \050PROT VERB GOAL\051\051)SH
42480 1546 50 8280 48511 BX BX1
10 /Times-Roman AF
7920 50990 MT
(This means that the linearizer should output a string made)
121 W( of the linearization of the constituent)120 W
/Courier SF
48289 XM
(prot)SH
/Times-Roman SF
51059 XM
(first,)SH
6120 52367 MT
(followed by the linearization)
1 W( of the constituent)2 W
/Courier SF
25101 XM
(verb)SH
/Times-Roman SF
27753 XM
(and terminated by the linearization of the constituent)2 W
/Courier SF
49155 XM
(goal)SH
/Times-Roman SF
(. It)254 W
6120 53744 MT
(also means that nothing can come before)SH
/Courier SF
22700 XM
(prot)SH
/Times-Roman SF
25350 XM
(and after)SH
/Courier SF
29126 XM
(goal)SH
/Times-Roman SF
(, and nothing can come between each pair.)SH
7920 56223 MT
(The constituents correspond to features of the FD describing the sentence.  That is, this FD must contain)
59 W( pairs)58 W
6120 57600 MT
(with the attributes)SH
/Courier SF
13592 XM
(prot, verb)SH
/Times-Roman SF
19842 XM
(and)SH
/Courier SF
21536 XM
(goal)SH
/Times-Roman SF
(. For)
250 W( example:)SH
9 /Courier AF
8679 59285 MT
(\050\050cat S\051)SH
9219 60233 MT
(\050PROT \050...\051\051)SH
9219 61181 MT
(\050GOAL \050...\051\051)SH
9219 62129 MT
(\050VERB \050...\051\051)SH
9219 63077 MT
(\050PATTERN \050PROT VERB GOAL\051\051\051)SH
42480 5338 50 8280 63662 BX BX1
10 /Times-Roman AF
7920 66141 MT
(If a constituent mentioned in the pattern is not)
1 W( present in the FD, nothing happens:  the linearization of an empty)2 W
6120 67518 MT
(\050or non existent\051 constituent is the empty string.)SH
7920 69997 MT
(The)SH
/Courier SF
9940 XM
(pattern)SH
/Times-Roman SF
14605 XM
(directives are)
215 W( generally added by the grammar, since the input to the unifier should be a)214 W
6120 71374 MT
(semantic representation and therefore does not contain any constraint on word ordering.)SH
ES
%%Page: 21 22
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(21)SH
10080 11486 MT
(NOTE: Patterns can contain full paths to specify constituents. For example, the following is a legal pattern:)SH
9 /Courier AF
10839 13171 MT
(\050PATTERN \050{prot n} {verb v} goal\051\051)SH
42480 1546 50 10440 13756 BX BX1
10 /Times-Roman AF
10080 16235 MT
(A given grammar can generate several constraints, that is it can add 2 or more)7 W
/Courier SF
41622 XM
(pattern)SH
/Times-Roman SF
46079 XM
(pairs to the)
7 W( result. The)8 W
8280 17612 MT
(unifier therefore includes a)113 W
/Courier SF
19784 XM
(pattern)SH
/Times-Roman SF
24347 XM
(unifier. The role of the pattern)
113 W( unifier is to take several constraints on the)112 W
8280 18989 MT
(ordering and to output one ordering that subsumes all of them.)SH
10080 21468 MT
(The following symbols have a special meaning for the)
27 W( pattern unifier:)28 W
/Courier SF
38570 XM
(dots)SH
/Times-Roman SF
41248 XM
(and)SH
/Courier SF
42970 XM
(pound)SH
/Times-Roman SF
46248 XM
(\050standing respectively)28 W
8280 22845 MT
(for the notations `...' and `#'\051.)SH
10080 25324 MT
(A pattern)140 W
/Courier SF
14358 XM
(\050c1 ... c2\051)139 W
/Times-Roman SF
21625 XM
(\050noted in the program)139 W
/Courier SF
31124 XM
(\050c1 dots c2\051)139 W
/Times-Roman SF
(\051 indicates that the constituent)139 W
/Courier SF
51546 XM
(c1)SH
/Times-Roman SF
53135 XM
(must)SH
8280 26701 MT
(precede the constituent)202 W
/Courier SF
18356 XM
(c2)SH
/Times-Roman SF
(, but they need not be adjacent. Zero, one or many other constituents can come in)202 W
8280 28078 MT
(between. The)
414 W( pattern)82 W
/Courier SF
17522 XM
(\050c1 ... c2\051)82 W
/Times-Roman SF
24618 XM
(still requires the sentence to start with constituent)82 W
/Courier SF
45328 XM
(c1)SH
/Times-Roman SF
46860 XM
(and to end)
82 W( with)81 W
/Courier SF
53630 XM
(c2)SH
/Times-Roman SF
(.)SH
8280 29455 MT
(The pattern)SH
/Courier SF
13112 XM
(\050... c1 ... c2 ...\051)SH
/Times-Roman SF
25012 XM
(only forces)SH
/Courier SF
29733 XM
(c1)SH
/Times-Roman SF
31183 XM
(to come before)SH
/Courier SF
37431 XM
(c2)SH
/Times-Roman SF
(.)SH
10080 31934 MT
(The)SH
/Courier SF
11915 XM
(pound)SH
/Times-Roman SF
15195 XM
(\050#\051 symbol is used to represent 0 or 1)
30 W( constituent.  For example, if you want to allow a sentence to)31 W
8280 33311 MT
(start with an optional)
77 W( adverbial, you can specify it with the pattern)76 W
/Courier SF
35997 XM
(\050# prot ... verb ...\051)76 W
/Times-Roman SF
(. This directive)76 W
8280 34688 MT
(will be compatible with both)SH
/Courier SF
20030 XM
(\050prot verb goal\051)SH
/Times-Roman SF
29880 XM
(and)SH
/Courier SF
31574 XM
(\050adverb prot verb goal\051)SH
/Times-Roman SF
45624 XM
(for example.)SH
10080 37167 MT
(As a consequence of the use of the two symbols)125 W
/Courier SF
30771 XM
(pound)SH
/Times-Roman SF
34146 XM
(and)SH
/Courier SF
35965 XM
(dots)SH
/Times-Roman SF
(, the constraints)
125 W( described by)126 W
/Courier SF
50880 XM
(pattern)SH
/Times-Roman SF
8280 38544 MT
(directives are PARTIAL orderings.)SH
10080 41023 MT
(NOTE: because of)
3 W( the presence of dots and pound, the unification of patterns is a non-deterministic operation. It)2 W
8280 42400 MT
(can produce several results for a given input, and there is no way to predict in which order these)
50 W( possible solutions)51 W
8280 43777 MT
(will be tried. Caution should be exercised when specifying patterns: they)
87 W( should be specific enough to allow only)86 W
8280 45154 MT
(acceptable word orderings \050do)
175 W( not use too many)176 W
/Courier SF
29181 XM
(dots)SH
/Times-Roman SF
(\051 but should not be too specific to allow for as yet not)176 W
8280 46531 MT
(supported constituents \050for example, a sentence can start with an Adverbial, not necessarily an NP\051.)SH
10080 49010 MT
(The following example illustrates the fact that pattern unification is non-deterministic in general:)SH
9 SS 
10839 50750 MT
(Pattern Unification:)SH
/Courier SF
10839 51698 MT
(p1: \050pattern \050dots a dots b dots\051\051)SH
10839 52646 MT
(p2: \050pattern \050dots c dots d dots\051\051)SH
/Times-Roman SF
10839 54542 MT
(Compatible Results:)SH
/Courier SF
10839 55490 MT
(\050pattern \050dots a dots b dots c dots d dots\051\051)SH
10839 56438 MT
(\050pattern \050dots a dots c dots b dots d dots\051\051)SH
10839 57386 MT
(\050pattern \050dots a dots c dots d dots b dots\051\051)SH
10839 58334 MT
(\050pattern \050dots c dots a dots b dots d dots\051\051)SH
10839 59282 MT
(\050pattern \050dots c dots a dots d dots b dots\051\051)SH
10839 60230 MT
(\050pattern \050dots c dots d dots a dots b dots\051\051)SH
/Times-Roman SF
10839 62126 MT
(Pattern Unification:)SH
/Courier SF
10839 63074 MT
(p3: \050pattern \050dots a dots b\051\051)SH
10839 64022 MT
(p4: \050pattern \050dots b c\051\051)SH
10839 64970 MT
(Pattern Unification fails.)SH
42480 15821 50 10440 65555 BX BX1
10 /Times-Roman AF
10080 68034 MT
(Patterns are eventually interpreted by the linearization component to produce a string out of an FD.)SH
10080 70513 MT
(Appendix II describes some advanced uses of pattern unification.)SH
ES
%%Page: 22 23
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(22)SH
14 /Times-Bold AF
6120 11760 MT
(5.7. Explicit Specification of Sub-constituents: the)SH
/Times-Roman SF
36139 XM
(CSET)SH
/Times-Bold SF
39911 XM
(Keyword)SH
10 /Times-Roman AF
7920 13137 MT
(The unifier works top-down recursively: it unifies first the top-level FD against a grammar \050generally)
195 W( the)194 W
6120 14514 MT
(top-level FD represents a sentence\051, and then, recursively, it unifies each of its constituents. For example, to unify a)31 W
6120 15891 MT
(sentence, the unifier first takes the whole FD and unifies it with the)
96 W( grammar of the sentences)95 W
/Courier SF
45407 XM
(\050cat S\051)95 W
/Times-Roman SF
(, then it)95 W
6120 17268 MT
(unifies the)81 W
/Courier SF
10726 XM
(prot)SH
/Times-Roman SF
13457 XM
(and)SH
/Courier SF
15233 XM
(goal)SH
/Times-Roman SF
17965 XM
(with the grammar of NPs)82 W
/Courier SF
28735 XM
(\050cat np\051)82 W
/Times-Roman SF
(, then it unifies the)82 W
/Courier SF
41749 XM
(verb)SH
/Times-Roman SF
44481 XM
(with the grammar of)82 W
6120 18645 MT
(VPs)SH
/Courier SF
8037 XM
(\050cat vp\051)SH
/Times-Roman SF
(.)SH
7920 21124 MT
(You can specify explicitly which features of an FD correspond to)
244 W( constituents and therefore need to be)243 W
6120 22501 MT
(recursively unified. To do that, add a pair:)SH
9 /Courier AF
8679 24186 MT
(\050CSET \050c1 ... cn\051\051)SH
8679 26082 MT
(For example:)SH
8679 27030 MT
(\050CSET \050PROT VERB GOAL\051\051)SH
42480 4390 50 8280 27615 BX BX1
10 /Times-Roman AF
7920 30094 MT
(The value of a)32 W
/Courier SF
14046 XM
(cset)SH
/Times-Roman SF
16728 XM
(\050stands for Constituent SET\051)
32 W( is considered as a SET \050unordered\051. Therefore the following)33 W
6120 31471 MT
(2 pairs are correctly unified:)SH
9 /Courier AF
8679 33156 MT
(\050CSET \050PROT VERB GOAL\051\051)SH
8679 34104 MT
(\050CSET \050VERB GOAL PROT\051\051)SH
42480 2494 50 8280 34689 BX BX1
10 /Times-Roman AF
7920 37168 MT
(Actually, two)SH
/Courier SF
13614 XM
(cset)SH
/Times-Roman SF
16264 XM
(pairs are unified if and only if there values are two equal sets.)SH
7920 39647 MT
(NOTE: A)74 W
/Courier SF
12234 XM
(cset)SH
/Times-Roman SF
14958 XM
(values can contain full paths to specify constituents. So for example,)
74 W( the following is a legal)73 W
6120 41024 MT
(feature:)SH
9 /Courier AF
8679 42709 MT
(\050cset \050{prot n} {verb v} goal\051\051)SH
42480 1546 50 8280 43294 BX BX1
10 /Times-Roman AF
7920 45773 MT
(FUF does not rely exclusively on)58 W
/Courier SF
21823 XM
(cset)SH
/Times-Roman SF
(s to find the constituents to)
58 W( be recursively unified. FUF generally tries)59 W
6120 47150 MT
(to infer the value of)65 W
/Courier SF
14581 XM
(cset)SH
/Times-Roman SF
17295 XM
(from the value of)64 W
/Courier SF
24716 XM
(pattern)SH
/Times-Roman SF
29230 XM
(and an observation of the features of the current FD \050with)64 W
6120 48527 MT
(the assumption that features containing a)54 W
/Courier SF
23053 XM
(cat)SH
/Times-Roman SF
25157 XM
(attribute are constituents\051.  The)
54 W( exact procedure followed to identify)55 W
6120 49904 MT
(the implicit constituent set of an fd is:)SH
8120 51243 MT
(1.)SH
9120 XM
(If a feature)SH
/Courier SF
13756 XM
(\050cset \050c1 ... cn\051\051)SH
/Times-Roman SF
24806 XM
(is found in the FD, the constituent set is just)SH
/Courier SF
42668 XM
(\050c1 ... cn\051)SH
/Times-Roman SF
(.)SH
8120 53001 MT
(2.)SH
9120 XM
(If no feature)SH
/Courier SF
14312 XM
(cset)SH
/Times-Roman SF
16962 XM
(is found, the constituent set is the union of the following sub-fds:)SH
11176 54340 MT
(a.)SH
12120 XM
(If a pair contains a feature)SH
/Courier SF
22838 XM
(\050cat xx\051)SH
/Times-Roman SF
(, it is considered a constituent.)SH
11120 56098 MT
(b.)SH
12120 XM
(If a sub-fd is mentioned in the pattern, it is considered a constituent.)SH
7920 58577 MT
(As a consequence, explicit)56 W
/Courier SF
19058 XM
(cset)SH
/Times-Roman SF
(s are rarely necessary.  They are generally used)
56 W( when an fd contains a sub-fd)55 W
6120 59954 MT
(that either is mentioned in the pattern or contains a feature)63 W
/Courier SF
30392 XM
(cat)SH
/Times-Roman SF
(, but that you do NOT want to unify.  In)
63 W( that case,)64 W
6120 61331 MT
(you can explicitly specify the cset without including this unwanted sub-fd.  For larger grammars,)
146 W( however, you)145 W
6120 62708 MT
(should put the emphasis on a clean constituent structure, and therefore you should)
70 W( carefully use the explicit CSET)71 W
6120 64085 MT
(facilities instead)
1 W( of blindly relying on FUF's inferencing.  In this case, the advanced CSET facilities described below)SH
6120 65462 MT
(will prove helpful.)SH
ES
%%Page: 23 24
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(23)SH
12 /Times-Bold AF
8280 11604 MT
(5.7.1. Implicit and Incremental CSET Specification)SH
10 /Times-Roman AF
10080 12981 MT
(CSET specification is)
208 W( the means by which a programmer describes the constituent structure of sentences.)209 W
8280 14358 MT
(Given the importance of this task and its complexity, facilities have)
22 W( been added to FUF to make CSET specification)21 W
8280 15735 MT
(more flexible.)
2 W( It)
255 W( is thus possible to specify)3 W
/Times-Italic SF
25804 XM
(implicit)SH
/Times-Roman SF
29113 XM
(and)SH
/Times-Italic SF
30810 XM
(incremental)SH
/Times-Roman SF
35840 XM
(CSETs. This)
256 W( section describes these features of)3 W
8280 17112 MT
(the CSET specification.  It presents advanced facilities and can be skipped in first lecture.)SH
10080 19591 MT
(The general form of a CSET specification is:)SH
9 /Courier AF
10839 21276 MT
(\050CSET \050= c1 ... cn\051)SH
14079 22224 MT
(\050== b1 ... bm\051)SH
14079 23172 MT
(\050+ a1 ... ap\051)SH
14079 24120 MT
(\050- d1 ... dq\051\051\051)SH
42480 4390 50 10440 24705 BX BX1
10 /Times-Roman AF
10080 27184 MT
(The simple syntax)SH
/Courier SF
17663 XM
(\050CSET \050c1 ... cn\051\051)SH
/Times-Roman SF
28713 XM
(is equivalent to)SH
/Courier SF
35074 XM
(\050CSET \050= c1 ... cn\051\051)SH
/Times-Roman SF
(.)SH
10080 29663 MT
(As usual in FDs, all of the features of the CSET are optional.  Each feature in)
89 W( the CSET feature is named as)88 W
8280 31040 MT
(follows:)SH
/Symbol SF
10070 32493 MT
(\267)SH
/Times-Roman SF
10780 XM
(The = sublist is called the absolute CSET.)SH
/Symbol SF
10070 34251 MT
(\267)SH
/Times-Roman SF
10780 XM
(The == sublist is called the basis CSET.)SH
/Symbol SF
10070 36009 MT
(\267)SH
/Times-Roman SF
10780 XM
(The + and - sublists are the increment CSETs.)SH
10080 38488 MT
(The idea behind the use of incremental CSETs is to gradually refine)
98 W( the CSET description, by adding partial)99 W
8280 39865 MT
(information - thus folding the constituent structure description into the general ``partial)
40 W( information, gradual refine-)39 W
8280 41242 MT
(ment'' methodology of FD specification.  The incremental CSET specifications are added to the basis CSET,)
26 W( which)27 W
8280 42619 MT
(can either be specified)
91 W( explicitly, using the == notation, or be the result of the implicit CSET inference described)90 W
8280 43996 MT
(above.)SH
10080 46475 MT
(The actual CSET of an FD is computed by applying the following procedure:)SH
10280 47814 MT
(1.)SH
11280 XM
(If the absolute CSET \050=\051 is present, it becomes the value of)
121 W( the actual CSET.  The absolute CSET)122 W
11280 48919 MT
(feature is used when you want to disable all incremental computations.)SH
10280 50677 MT
(2.)SH
11280 XM
(Else: If the basis-CSET is present,)SH
13336 52016 MT
(a.)SH
14280 XM
(let BSET = basis-CSET,)
156 W( else let BSET = the implicit CSET, computed as described above)155 W
14280 53121 MT
(\050from pattern and cat inspection\051.)SH
13280 54879 MT
(b.)SH
14280 XM
(If the +increment-CSET is present, let BSET = BSET union +increment.)SH
13336 56637 MT
(c.)SH
14280 XM
(If the -increment-CSET is present, let BSET = BSET - -increment \050set difference\051.)SH
13280 58395 MT
(d.)SH
14280 XM
(Return BSET as the actual CSET.)SH
10080 60874 MT
(The result of this procedure is a list of)
12 W( absolute paths, pointing to the sub-constituents of the current constituent.)13 W
8280 62251 MT
(In all cases, this actual cset is ``cleaned up'' by applying the following procedure:)SH
/Symbol SF
10070 63704 MT
(\267)SH
/Times-Roman SF
10780 XM
(All duplicate paths are removed.  Two paths are duplicate if they)
23 W( point to the same FD.  That is, even if)22 W
10780 64809 MT
(the paths are distincts but they point to conflated FDs, they are considered duplicates in the CSET.)SH
/Symbol SF
10070 66567 MT
(\267)SH
/Times-Roman SF
10780 XM
(All leaf-constituents are)
30 W( removed.  A leaf-constituent is a constituent whose value is not a list of pairs -)31 W
10780 67672 MT
(for example, a symbol or a string.  The idea is that there is no point in recursing on a leaf-constituent.)SH
/Symbol SF
10070 69430 MT
(\267)SH
/Times-Roman SF
10780 XM
(All constituents which are conflated with a -increment constituent are also removed from the actual)145 W
10780 70535 MT
(cset.)SH
ES
%%Page: 24 25
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(24)SH
8 SS 
45803 11349 MT
(6)SH
10 SS 
7920 11694 MT
(The following grammar fragments illustrate briefly the use of incremental CSET specification.)SH
9 /Courier AF
8679 13379 MT
(\050\050cat clause\051)SH
9219 14327 MT
(\050cset \050== prot verb\051\051)SH
9219 15275 MT
(\050alt \050\050\050prot given\051)SH
12999 16223 MT
(\050subject {^ prot}\051)SH
12999 17171 MT
(\050voice active\051\051)SH
12459 18119 MT
(\050\050prot none\051)SH
12999 19067 MT
(\050goal given\051)SH
12999 20015 MT
(\050cset \050- prot\051 \050+ goal\051\051)SH
12999 20963 MT
(\050subject {^ goal}\051\051\051\051\051)SH
42480 9130 50 8280 21548 BX BX1
10 /Times-Roman AF
7920 24027 MT
(The first cset feature specifies that the basis cset for this clause constituent should)164 W
/Times-Italic SF
43155 XM
(not)SH
/Times-Roman SF
44847 XM
(be the)
164 W( implicit cset)163 W
6120 25404 MT
(\050derived from)
64 W( pattern and cat\051, but instead the explicit list \050prot verb\051.  In the second cset feature, this basis cset is)65 W
6120 26781 MT
(incrementally refined by specifying that when prot in none, prot is not part)
60 W( of the cset and instead goal is added to)59 W
6120 28158 MT
(the cset.  If prot is a non-leaf)
6 W( constituent, then the actual cset for this example will be \050prot verb\051, if it is none, then it)7 W
6120 29535 MT
(will be \050verb goal\051.)SH
9 /Courier AF
8679 31220 MT
(\050\050cat clause\051)SH
9219 32168 MT
(\050subject \050\050cat np\051\051\051)SH
9219 33116 MT
(\050prot {^ subject}\051)SH
9219 34064 MT
(\050cset \050- prot\051\051\051)SH
42480 4390 50 8280 34649 BX BX1
10 /Times-Roman AF
7920 37128 MT
(In this second fragment, no absolute cset is specified \050no = feature\051 and no basis cset is present \050no == feature\051.)27 W
6120 38505 MT
(Therefore the)
48 W( implicit cset is computed and is found to be \050subject\051 \050because of the presence of the \050cat np\051 feature)49 W
6120 39882 MT
(under subject\051.  \050subject\051 is thus the)
69 W( initial basis-cset.  The incremental cset \050- prot\051 is then added to the cset.  The)68 W
6120 41259 MT
(basis-cset remains \050subject\051 at this point.  Finally, the cset is ``cleaned'' -)
79 W( and it is found that prot and subject are)80 W
6120 42636 MT
(duplicates of each other because of the conflation \050prot {^ subject}\051.  Since prot is member of the -increment list,)
19 W( its)18 W
6120 44013 MT
(``synonyms'' are deleted from the basis cset, and the actual cset is found to be empty \050\051.)SH
7920 46492 MT
(The computation of implicit and incremental CSETs can interact)
113 W( with the more advanced control features of)114 W
6120 47869 MT
(goal freezing \050with the)SH
/Courier SF
15451 XM
(wait)SH
/Times-Roman SF
18101 XM
(construct\051. These)
250 W( interactions are described in Sect.12.4.1.)SH
12 /Times-Bold AF
6120 51553 MT
(5.7.2. Unification of Incremental CSET Specifications)SH
10 /Times-Roman AF
7920 52930 MT
(When two complete CSET specifications are unified, the following rules)
56 W( are applied:  assume that \050cset \050= a1\051)55 W
6120 54307 MT
(\050== b1\051 \050+ c1\051 \050- d1\051\051 is unified with \050cset \050= a2\051 \050== b2\051 \050+ c2\051 \050- d2\051\051,)SH
8120 55646 MT
(1.)SH
9120 XM
(If both a1 and a2 are instantiated:)SH
11176 56985 MT
(a.)SH
12120 XM
(If \050set-equal a1 a2\051 then:)SH
14342 58324 MT
(i.)SH
15120 XM
(If c1 union c2 is included in a1, return \050cset \050= a1\051\051 Else return :fail.)SH
14064 60082 MT
(ii.)SH
15120 XM
(If d1 union d2 intersect with a1, return :fail Else return \050cset \050= a1\051\051)SH
11120 61840 MT
(b.)SH
12120 XM
(else :fail.)SH
8120 63598 MT
(2.)SH
9120 XM
(If only a1 is instantiated and a2 is null:)SH
11176 64937 MT
(a.)SH
12120 XM
(If a1 intersects d1 union d2, then :fail.)SH
11120 66695 MT
(b.)SH
12120 XM
(Else \050cset \050= a1\051\051 is returned.)SH
10800 50 6120 69428 UL
6 SS 
6920 70767 MT
(6)SH
8 SS 
7220 71076 MT
(Keep in mind that this facility is above all designed for use in large grammars,)
54 W( and the short fragments shown here could easily be handled)55 W
6120 72000 MT
(without incremental CSETs.)SH
ES
%%Page: 25 26
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(25)SH
10280 11486 MT
(3.)SH
11280 XM
(If neither a1 and a2 is instantiated, compute the unions: b=b1 u b2,)
35 W( c=c1 u c2, d = d1 u d2, and return)36 W
11280 12591 MT
(\050cset \050== b\051 \050+ c\051 \050- d\051\051.)SH
14 /Times-Bold AF
8280 16431 MT
(5.8. The Special Value)SH
/Times-Roman SF
21892 XM
(NONE)SH
10 SS 
10080 17808 MT
(There is a way to prevent an FD from ever getting a value for)
51 W( a given attribute. The syntax is:)50 W
/Courier SF
48780 XM
(\050att NONE\051)50 W
/Times-Roman SF
(.)SH
8280 19185 MT
(It means that)
113 W( the FD containing that pair will NEVER have a value for)114 W
/Courier SF
38370 XM
(att)SH
/Times-Roman SF
(. Or)
478 W( in other words, that the object)114 W
8280 20562 MT
(described by the FD has no attribute)SH
/Courier SF
23028 XM
(att)SH
/Times-Roman SF
(.)SH
14 /Times-Bold AF
8280 24380 MT
(5.9. The Special Value ANY - The Determination Stage)SH
10 /Times-Roman AF
10080 25757 MT
(An)SH
/Courier SF
11650 XM
(any)SH
/Times-Roman SF
13798 XM
(value in a pair)
98 W( means that the feature must have a determined value at the end of the unification. A)97 W
8280 27134 MT
(complete unified FD will never contain an)62 W
/Courier SF
25906 XM
(any)SH
/Times-Roman SF
(, since an)62 W
/Courier SF
31891 XM
(any)SH
/Times-Roman SF
34003 XM
(stands for something that must be specified. If)
62 W( after)63 W
8280 28511 MT
(unifying everything, the resulting FD contains an)SH
/Courier SF
28223 XM
(any)SH
/Times-Roman SF
(, then the unification fails.)SH
10080 30990 MT
(An)SH
/Courier SF
11751 XM
(any)SH
/Times-Roman SF
14000 XM
(represents a strong constraint. It means that a feature MUST be)
199 W( instantiated.)198 W
/Courier SF
47047 XM
(any)SH
/Times-Roman SF
49295 XM
(should not be)198 W
8280 32367 MT
(understood as ``the feature has a value in the input'' but as ``the feature WILL have a value in the result.'')SH
10080 34846 MT
(The idea of a ``resulting final FD'' coming)
174 W( out of the unification is important. It actually implies that the)175 W
8280 36223 MT
(process of unification)
197 W( is the composition of 2 sub-processes: the unification per se and what we call here the)196 W
8280 37600 MT
(``determination.'')SH
10080 40079 MT
(The determination process assures that the resulting FD is well formed.)
196 W( It)
643 W( is a necessary stage since the)197 W
8280 41456 MT
(``resulting final'' FD is more constrained than regular FDs. Here is what the determination does:)SH
/Symbol SF
10070 42909 MT
(\267)SH
/Times-Roman SF
10780 XM
(checks that no)SH
/Courier SF
16751 XM
(any)SH
/Times-Roman SF
18801 XM
(is left.)SH
/Symbol SF
10070 44667 MT
(\267)SH
/Times-Roman SF
10780 XM
(tests all the)SH
/Courier SF
15530 XM
(test)SH
/Times-Roman SF
18180 XM
(constraints.)SH
/Symbol SF
10070 46425 MT
(\267)SH
/Times-Roman SF
10780 XM
(tests that no frozen constraint is left.)SH
10080 48904 MT
(It is important to realize that none of this can be done before the unification is finished.  Section 12.4.1 gives)
40 W( a)39 W
8280 50281 MT
(more complete picture of the determination process and explains why)
131 W( there may be a need for several cycles of)132 W
8280 51658 MT
(determination when)SH
/Courier SF
16501 XM
(wait)SH
/Times-Roman SF
19151 XM
(and goal freezing are used.)SH
10080 54137 MT
(Note that in practice, ANY is)
70 W( used rarely.  The next special value GIVEN is used more often, and is easier to)69 W
8280 55514 MT
(manipulate, except in cases where goal freezing is used.)SH
14 /Times-Bold AF
8280 59354 MT
(5.10. The Special Value)SH
/Times-Roman SF
22592 XM
(GIVEN)SH
10 SS 
10080 60731 MT
(A)SH
/Courier SF
11121 XM
(given)SH
/Times-Roman SF
14440 XM
(value in a)
69 W( pair means that the feature must have a real value at the beginning of the unification.  A)70 W
8280 62108 MT
(unified fd will never contain a)73 W
/Courier SF
21049 XM
(given)SH
/Times-Roman SF
24372 XM
(since)SH
/Courier SF
26750 XM
(given)SH
/Times-Roman SF
30073 XM
(will always be unified with a real value.)73 W
/Courier SF
47225 XM
(given)SH
/Times-Roman SF
50547 XM
(is useful to)72 W
8280 63485 MT
(specify what features are necessary in an input.  It is also much)
6 W( more efficient than)7 W
/Courier SF
41733 XM
(any)SH
/Times-Roman SF
(. It)
264 W( is often used in branches)7 W
8280 64862 MT
(of an)SH
/Courier SF
10557 XM
(alt)SH
/Times-Roman SF
(, to ``test'' for the presence of a feature.)SH
10080 67341 MT
(The rule is: when you think of using)45 W
/Courier SF
25217 XM
(any)SH
/Times-Roman SF
(, you often want to use)44 W
/Courier SF
36641 XM
(given)SH
/Times-Roman SF
39935 XM
(and, conversely, when you use)44 W
/Courier SF
52680 XM
(wait)SH
/Times-Roman SF
8280 68718 MT
(\050for goal freezing\051 and something does not work, it is because you should use)SH
/Courier SF
39525 XM
(any)SH
/Times-Roman SF
41575 XM
(instead of)SH
/Courier SF
45741 XM
(given)SH
/Times-Roman SF
(.)SH
/Courier SF
10080 71197 MT
(Given)SH
/Times-Roman SF
13561 XM
(addresses the most obvious limitation)
231 W( of the top-down regime used by FUF when traversing the)232 W
ES
%%Page: 26 27
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(26)SH
6120 11486 MT
(constituent tree \050and computing the cset expansion\051 in cases when the)
162 W( grammar contains the equivalent of left-)161 W
6120 12863 MT
(recursive rules.)70 W
/Courier SF
12939 XM
(Given)SH
/Times-Roman SF
16259 XM
(is in a sense the dual)
70 W( of the)71 W
/Courier SF
27876 XM
(any)SH
/Times-Roman SF
29997 XM
(meta-variable of the original)71 W
8 SS 
41945 XM
(FUG)SH
10 SS 
43867 XM
(formalism: while)71 W
/Courier SF
51120 XM
(any)SH
/Times-Roman SF
6120 14240 MT
(requires a feature to be instantiated at the)31 W
/Times-Italic SF
23086 XM
(end)SH
/Times-Roman SF
24811 XM
(of the unification process,)31 W
/Courier SF
35572 XM
(given)SH
/Times-Roman SF
38853 XM
(requires it to)
31 W( be instantiated)30 W
/Times-Italic SF
50365 XM
(before)SH
/Times-Roman SF
6120 15617 MT
(unification starts.  Thus,)22 W
/Courier SF
16152 XM
(given)SH
/Times-Roman SF
19424 XM
(is used to check that a)
22 W( constraint has been specified in the input.  A)23 W
/Courier SF
46871 XM
(given)SH
/Times-Roman SF
50144 XM
(feature)SH
6120 16994 MT
(can only appear in a grammar, thus,)230 W
/Courier SF
22310 XM
(given)SH
/Times-Roman SF
25790 XM
(gives a different status to the two arguments of the unification)230 W
8 SS 
9703 18026 MT
(7)SH
10 SS 
6120 18371 MT
(function.)SH
9 /Courier AF
12999 20056 MT
(\050\050cat NP\051)SH
13539 21004 MT
(\050semr \050\050possessor GIVEN\051\051\051)SH
13539 21952 MT
(\050cset \050det head\051\051)SH
13539 22900 MT
(\050det \050\050cat NP\051)SH
16779 23848 MT
(\050possessive yes\051)SH
16779 24796 MT
(\050semr {^ ^ possessor}\051\051\051)SH
13539 25744 MT
(...\051)SH
42480 7234 50 8280 26329 BX BX1
10 /Times-Roman AF
7920 28808 MT
(To illustrate how)42 W
/Courier SF
15129 XM
(given)SH
/Times-Roman SF
18422 XM
(solves the problem of the left-recursive rules, consider how the possessive NP rule is)43 W
6120 30185 MT
(implemented in FUF in this example.  This FD implements the FUF equivalent of a rule:)SH
9 /Courier AF
8679 31870 MT
(NP -> NP\050possessive\051 head)SH
42480 1546 50 8280 32455 BX BX1
10 /Times-Roman AF
7920 34934 MT
(This is a left-recursive rule which, if used in a top-down control, could lead to infinite recursion)
20 W( of the form NP)19 W
6120 36311 MT
(-> NP \050NP \050NP ..... \050NP head...\051\051\051  Note how the cset expansion in FUF is the equivalent of the rule application in)64 W
6120 37688 MT
(rule-based grammatical formalisms.)SH
7920 40167 MT
(To avoid using this rule when there is no possessor in the input)
220 W( \050which is the step which leads to non-)219 W
6120 41544 MT
(termination\051, the grammar contains a)
29 W( feature)30 W
/Courier SF
24375 XM
(\050possessor GIVEN\051)30 W
/Times-Roman SF
(, checking that the semantic representation of)30 W
6120 42921 MT
(this constituent does indeed have a possessor specified in the input.  If none is)
44 W( specified, then the rule will fail, and)43 W
6120 44298 MT
(the sub-constituent possessive NP will not get created.)
183 W( Without)
617 W( the use of GIVEN, this FD would always be)184 W
6120 45675 MT
(successfully unified, and)
93 W( the cset expansion would lead to non-termination.  The use of the)92 W
/Courier SF
44080 XM
(given)SH
/Times-Roman SF
47422 XM
(meta-variable)SH
6120 47052 MT
(therefore ensures that the top-down regime of FUF is goal-directed.)SH
7920 49531 MT
(NOTE: The)SH
/Courier SF
12919 XM
(under)SH
/Times-Roman SF
16169 XM
(construct is related to the)SH
/Courier SF
26473 XM
(given)SH
/Times-Roman SF
29723 XM
(value. It)
250 W( is presented in Section 9.2.)SH
14 /Times-Bold AF
6120 53371 MT
(5.11. The Special Attribute)SH
/Times-Roman SF
22530 XM
(CAT)SH
/Times-Bold SF
(: General Outline of a Grammar)SH
10 /Times-Roman AF
7920 54748 MT
(Each constituent of an FD is generally characterized by its ``category''.  In)
247 W( FD terms, this means each)248 W
6120 56125 MT
(constituent includes a feature of the form)96 W
/Courier SF
23483 XM
(\050CAT category-name\051)96 W
/Times-Roman SF
(, where category-name is expected)
96 W( to be an)95 W
6120 57502 MT
(atom.)SH
7920 59981 MT
(A grammar is expected to give directives for each possible category, for example NP, VP, or NOUN.)
159 W( The)160 W
6120 61358 MT
(outline of a grammar must be:)SH
10800 50 6120 70352 UL
6 SS 
6920 71691 MT
(7)SH
8 SS 
7220 72000 MT
(This means that when)SH
/Courier SF
14417 XM
(given)SH
/Times-Roman SF
17017 XM
(is used, unification is no longer symmetric, but it remains order-independent and monotonic.)SH
ES
%%Page: 27 28
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(27)SH
9 /Courier AF
10839 11761 MT
(\050\050alt \050)SH
14619 12709 MT
(\050\050cat s\051)SH
15159 13657 MT
(<rest of grammar for category S>\051)SH
14619 14605 MT
(\050\050cat np\051)SH
15159 15553 MT
(<rest of grammar for category NP>\051)SH
14619 16501 MT
(<other categories>)SH
14079 17449 MT
(\051\051\051)SH
42480 7234 50 10440 18034 BX BX1
10 /Times-Roman AF
10080 20513 MT
(NOTE: The current version of the unifier makes the assumption that the grammar has such a form. The)60 W
/Courier SF
52680 XM
(\050CAT)SH
8280 21890 MT
(xxx\051)SH
/Times-Roman SF
11038 XM
(pairs must appear first.  The function)108 W
/Courier SF
26848 XM
(grammar-p)SH
/Times-Roman SF
32607 XM
(checks that a grammar has the right form.  The list of)109 W
8280 23267 MT
(categories known by)
6 W( the grammar can be found by using the function)5 W
/Courier SF
36337 XM
(list-cats)SH
/Times-Roman SF
(. See appendix IV for a list of the)5 W
8280 24644 MT
(non-standard features of this implementation.)SH
10080 27123 MT
(NOTE: The symbol identifying categories \050)70 W
/Courier SF
('cat)SH
/Times-Roman SF
(\051 can be changed in the program.  It is by default)70 W
/Courier SF
50831 XM
('cat)SH
/Times-Roman SF
(, but)71 W
8280 28500 MT
(this default can be changed by setting a new value to the)17 W
/Courier SF
31313 XM
(*cat-attribute*)SH
/Times-Roman SF
40580 XM
(variable or by providing an optional)17 W
8280 29877 MT
(argument to the unification functions, as explained in the reference manual.)SH
ES
%%Page: 28 29
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(28)SH
ES
%%Page: 29 30
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(29)SH
16 /Times-Bold AF
8280 11872 MT
(6. Modular Organization of Grammars: Def-alt and Def-conj)SH
10 /Times-Roman AF
10080 13249 MT
(A large)104 W
8 SS 
13509 XM
(FUG)SH
10 SS 
(, like many other large computer programs, becomes difficult to read and maintain when its size)104 W
8280 14626 MT
(increases. The)
426 W( size of a)88 W
8 SS 
18610 XM
(FUG)SH
10 SS 
20549 XM
(is best measured by counting the number of disjunctions it contains, as discussed in)88 W
8280 16003 MT
(Chapter 12.1.  The depth of embedding of the disjunctions is also an indication of the complexity.  The number)
61 W( of)62 W
8280 17380 MT
(branches in the disjunctive normal form of the grammar accounts for this embedding)
147 W( but is in general not very)146 W
8 SS 
54030 18412 MT
(29)SH
10 SS 
8280 18757 MT
(informative. For)
284 W( example, the grammar of FUF contains 580 disjunctions and has a disjunctive)
17 W( normal size of 10)18 W
54830 XM
(.)SH
8280 20134 MT
(Another more conventional measure of the complexity of)
44 W( the grammar viewed as a program, is the number of lines)43 W
8280 21511 MT
(of code: 9,500 lines for a total of 290,000 characters.  By all measures, such a grammar is)
47 W( a large program.  So the)48 W
8280 22888 MT
(well-known problems of size management in software engineering become an issue for large)93 W
8 SS 
46897 XM
(FUG)SH
10 SS 
(s: ease of)
93 W( main-)92 W
8280 24265 MT
(tenance, readability, modularity etc.)SH
14 /Times-Bold AF
8280 28083 MT
(6.1. Modular Definition of FDs)SH
10 /Times-Roman AF
10080 29460 MT
(A)SH
8 SS 
11078 XM
(FUG)SH
10 SS 
12955 XM
(is a large FD containing many alternations.  At the top-level, a)26 W
8 SS 
38487 XM
(FUG)SH
10 SS 
40365 XM
(is conventionally made up of a large)27 W
8280 30837 MT
(alternation where each branch describes a different category.  The pattern is:)SH
/Courier SF
15480 32243 MT
(\050\050alt \050\050\050cat clause\051 ...\051)SH
19680 33274 MT
(\050\050cat noun-group\051 ...\051)SH
19680 34305 MT
(\050\050cat verb-group\051 ...\051)SH
19680 35336 MT
(...\051\051\051)SH
/Times-Roman SF
10080 37815 MT
(Each branch is an embedded FD)
192 W( containing in turn many disjunctions.  For example, the top-level clause)191 W
8280 39192 MT
(grammar is made up of the following alternations:)SH
/Courier SF
15480 40598 MT
(\050\050cat clause\051)SH
16080 41629 MT
(\050alt mood ...\051)SH
16080 42660 MT
(\050alt transitivity ...\051)SH
16080 43691 MT
(\050alt voice ...\051)SH
16080 44722 MT
(\050alt circumstantial ...\051)SH
16080 45753 MT
(\050alt displaced-constituent ...\051)SH
16080 46784 MT
(...\051)SH
/Times-Roman SF
8280 48252 MT
(Each one of these alternation in turn is a large FD, with many embedded alternations.)SH
10080 50731 MT
(FUF includes)
171 W( a very simple mechanism to allow the grammar writer to develop such large grammars in a)172 W
8280 52108 MT
(modular way.  The key aspect is to allow the grammar writer to abstract away)
21 W( from the details of an FD by giving it)20 W
8280 53485 MT
(a name.  Named FDs can then be used anywhere a regular FD is allowed.  Actually, it turned out)
101 W( that instead of)102 W
8280 54862 MT
(using named FDs, named features were much more convenient.)
17 W( The)
282 W( new syntax distinguishes between two types of)16 W
8280 56239 MT
(named features: named disjunctions and named conjunctions defined)
120 W( by)121 W
/Courier SF
38441 XM
(def-alt)SH
/Times-Roman SF
43012 XM
(and)SH
/Courier SF
44827 XM
(def-conj)SH
/Times-Roman SF
49998 XM
(respectively.)SH
8280 57616 MT
(Named features can then be used in any FD as regular features; that is, instead of a pair, an FD can contain a named)22 W
8280 58993 MT
(feature. The)
250 W( syntax is illustrated below:)SH
ES
%%Page: 30 31
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(30)SH
9 /Courier AF
8679 11761 MT
(\050def-alt number \050:index number\051)SH
10299 12709 MT
(\050\050\050number singular\051 ...\051)SH
10839 13657 MT
(\050\050number plural\051 ...\051\051\051)SH
8679 15553 MT
(\050def-conj agreement-3-sing-masc)SH
10299 16501 MT
(\050number singular\051)SH
10299 17449 MT
(\050person third\051)SH
10299 18397 MT
(\050gender masculine\051\051)SH
/Times-Roman SF
8679 21241 MT
(Using named feature)
SH( Expanded)
16515 W( form)SH
/Courier SF
8679 23137 MT
(\050\050alt \050\050\050cat noun-group\051)
SH( \050\050alt)
3240 W( \050\050\050cat noun-group\051)SH
12999 24085 MT
(\050:! number\051)
SH( \050alt)
10260 W( \050:index number\051)SH
12999 25033 MT
(...\051\051\051\051 \050\050\050number)
13500 W( singular\051 ...\051)SH
31359 25981 MT
(\050\050number plural\051 ...\051\051\051)SH
31899 26929 MT
(...\051\051\051\051)SH
8679 28825 MT
(\050\050head \050\050lex "man"\051\051\051)
SH( \050\050head)
4860 W( \050\050lex "man"\051\051\051)SH
9219 29773 MT
(\050:& agreement-3-sing-masc\051\051)
SH( \050number)
1620 W( singular\051)SH
25959 30721 MT
(\050person third\051)SH
25959 31669 MT
(\050gender masculine\051\051)SH
42480 21454 50 8280 32254 BX BX1
10 /Times-Roman AF
7920 34733 MT
(A reference to a)
93 W( named disjunction has the form)94 W
/Courier SF
28286 XM
(\050:! name\051)94 W
/Times-Roman SF
(;)SH
/Courier SF
34402 XM
(\050:& name\051)94 W
/Times-Roman SF
40240 XM
(is used for named conjunction.)94 W
6120 36110 MT
(These forms can appear anywhere a pair could appear in an)
148 W( FD.  A named conjunction works like a bundle of)147 W
6120 37487 MT
(features which get spliced in the embedding FD when it is)
225 W( referenced.  A named disjunction accepts all the)226 W
6120 38864 MT
(annotations that an alt)
162 W( can carry \050control and tracing annotations\051.  The)161 W
/Courier SF
36688 XM
(def-alt)SH
/Times-Roman SF
41299 XM
(and)SH
/Courier SF
43154 XM
(def-conj)SH
/Times-Roman SF
48365 XM
(mechanism)SH
6120 40241 MT
(works as a macro mechanism for grammars.)SH
7920 42720 MT
(This simple syntactic tool allows the use of abstraction in the development of)19 W
8 SS 
39359 XM
(FUG)SH
10 SS 
(s: by)
19 W( naming parts and hiding)20 W
6120 44097 MT
(levels of details, the structure of the grammar becomes more apparent.)
61 W( Named)
371 W( features can be re-used in different)60 W
6120 45474 MT
(contexts \050several places in the grammar and/or in several grammars\051.  Practically, it becomes possible to)
172 W( work)173 W
6120 46851 MT
(separately on a module of)
89 W( the grammar without affecting the other parts; several people can work together on the)88 W
6120 48228 MT
(same grammar; single modules can be re-loaded and re-defined)
111 W( without requiring re-loading the whole grammar.)112 W
6120 49605 MT
(The standard benefits of modularity in programming languages apply to the full extent.)SH
14 /Times-Bold AF
6120 53423 MT
(6.2. Drawing the Map of a Grammar)SH
10 /Times-Roman AF
7920 54800 MT
(Interestingly, the new syntax highlights the similarity between)156 W
8 SS 
34361 XM
(FUG)SH
10 SS 
(s and the systems of systemic linguistic.)155 W
6120 56177 MT
(FUF includes a tool that draws a graphical map of the grammar by displaying the tree of the named features)
82 W( with)83 W
6120 57554 MT
(their dependents \050function)104 W
/Courier SF
17180 XM
(draw-grammar)SH
/Times-Roman SF
(\051. A)
458 W( high-level map of the SURGE grammar is shown)
104 W( below.  Note)103 W
6120 58931 MT
(how similar this map is to a system in systemic linguistics.  The)48 W
/Courier SF
32523 XM
(def-alt)SH
/Times-Roman SF
37021 XM
(syntax has made this)
48 W( level of organiza-)49 W
6120 60308 MT
(tion clearly visible in the grammar without requiring any change to the FUF formalism.)SH
7920 62787 MT
(The functions which produce this type of grammar maps)
104 W( in either character mode or in postscript format are)103 W
6120 64164 MT
(described below:)SH
ES
%%Page: 31 32
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(31)SH
9 /Courier AF
10839 11761 MT
(DRAW-GRAMMAR \050&optional \050root *u-grammar*\051\051)SH
15159 12709 MT
(Draw the map of a grammar, starting at level root \050by default the)SH
15159 13657 MT
(root of the whole grammar\051.)SH
10839 15553 MT
(FUF-POSTSCRIPT \050root filename &key \050shrink t\051\051)SH
15159 16501 MT
(Produces a postscript file depicting the map of a grammar.)SH
15159 17449 MT
(If shrink is t, the map is forced to fit on a single page.)SH
10839 19345 MT
(Example of output:)SH
10839 21241 MT
(> \050draw-grammar 'det\051)SH
10839 22189 MT
(|- DET +)SH
14619 23137 MT
(|- PRE-DET)SH
14619 24085 MT
(|- DEICTIC2)SH
14619 25033 MT
(|- ORDINAL)SH
14619 25981 MT
(|- QUANTIFIER)SH
14619 26929 MT
(| +)1620 W
14619 27877 MT
(| |-)
1620 W( QUANT-COUNT-PLURAL)SH
14619 28825 MT
(| | +)1620 W
14619 29773 MT
(| | |-)
1620 W( QUANT-PARTITIVE)SH
14619 30721 MT
(| | |-)
1620 W( QUANT-PARTITIVE)SH
14619 31669 MT
(| |)1620 W
14619 32617 MT
(| |-)
1620 W( QUANT-MASS)SH
14619 33565 MT
(| | +)1620 W
14619 34513 MT
(| |-)
4320 W( QUANT-PARTITIVE)SH
14619 35461 MT
(|)SH
14619 36409 MT
(|)SH
14619 37357 MT
(|- DET-TYPE +)SH
21099 38305 MT
(|- ARTICLE-DET)SH
21099 39253 MT
(|- POSSESSIVE-DET)SH
21099 40201 MT
(|- QUESTION-DET)SH
21099 41149 MT
(|- DEMONSTRATIVE-DET)SH
21099 42097 MT
(|- QUANTIFIER-DET)SH
10839 44941 MT
(>)SH
42480 34726 50 10440 45526 BX BX1
ES
%%Page: 32 33
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(32)SH
766 1000 0 6518 73323 GB 
%%BeginDocument: grammar-map.ps
%!PS-Adobe-1.0
%%%Page: ? ?
/max {2 copy lt {exch} if pop} def
/min {2 copy gt {exch} if pop} def
/inch {72 mul} def
/drawbox
 {/height exch def
  /width exch def
  /y exch def
  /x exch def
  gsave newpath
  x y boxradius add moveto
  x y height add x width add y height add boxradius arcto pop pop pop pop
  x width add y height add x width add y boxradius arcto pop pop pop pop
  x width add y x y boxradius arcto pop pop pop pop
  x y x y height add boxradius arcto pop pop pop pop
  boxgray setgray boxkind grestore
 } def
/printposter
 {/rows exch def
  /columns exch def
  /bigpictureproc exch def
  newpath
    leftmargin botmargin moveto
    0 pageheight rlineto
    pagewidth 0 rlineto
    0 pageheight neg rlineto
  closepath clip
  leftmargin botmargin translate
  0 1 rows 1 sub
   {/rowcount exch def
    0 1 columns 1 sub
     {/colcount exch def
      gsave
       pagewidth colcount mul neg
       pageheight rowcount mul neg
       translate
       bigpictureproc
       gsave showpage grestore
      grestore
     } for
   } for
 } def
/xarray 85 array def
/widtharray 85 array def
/leftmargin 36 def
/botmargin 36 def
/pagewidth 540 def
/pageheight 720 def
/boxradius 5 def 
/boxedge 2 def 
/boxgray 0 def 
/boxkind {stroke} def
/Helvetica findfont 10 scalefont setfont
widtharray 0 (TOP-LEVEL) stringwidth pop put
widtharray 1 (SIMPLE-CLAUSE) stringwidth pop put
widtharray 2 (MOOD) stringwidth pop put
widtharray 3 (TRANSITIVITY) stringwidth pop put
widtharray 4 (SIMPLE-PROCESS) stringwidth pop put
widtharray 5 (MATERIAL-SIMPLE-AGENTIVE) stringwidth pop put
widtharray 6 (RELATIONAL-SIMPLE) stringwidth pop put
widtharray 7 (ASCRIPTIVE-MODE) stringwidth pop put
widtharray 8 (LOCATIVE-MODE) stringwidth pop put
widtharray 9 (POSSESSIVE-MODE) stringwidth pop put
widtharray 10 (COMPOSITE-PROCESS) stringwidth pop put
widtharray 11 (COMPOSITE-AGENTIVE-EFFECT-TYPE) stringwidth pop put
widtharray 12 (AG-DISP-RELATION-TYPE) stringwidth pop put
widtharray 13 (COMPOSITE-AGENTIVE-RELATIONAL) stringwidth pop put
widtharray 14 (COMPOSITE-NON-AGENTIVE-EFFECT-TYPE) stringwidth pop put
widtharray 15 (AF-RELATION-TYPE) stringwidth pop put
widtharray 16 (VOICE) stringwidth pop put
widtharray 17 (EQUATIVE-VOICE) stringwidth pop put
widtharray 18 (VOICE-NORMAL) stringwidth pop put
widtharray 19 (VOICE-12) stringwidth pop put
widtharray 20 (VOICE-123) stringwidth pop put
widtharray 21 (VOICE-124) stringwidth pop put
widtharray 22 (VOICE-13) stringwidth pop put
widtharray 23 (AGENTLESS) stringwidth pop put
widtharray 24 (CIRCUMSTANTIAL) stringwidth pop put
widtharray 25 (AT-LOC) stringwidth pop put
widtharray 26 (TO-LOC) stringwidth pop put
widtharray 27 (FROM-LOC) stringwidth pop put
widtharray 28 (IN-LOC) stringwidth pop put
widtharray 29 (ON-LOC) stringwidth pop put
widtharray 30 (INSTRUMENT) stringwidth pop put
widtharray 31 (ACCOMPANIMENT) stringwidth pop put
widtharray 32 (MANNER) stringwidth pop put
widtharray 33 (AO-ADVERBIAL) stringwidth pop put
widtharray 34 (PURPOSE) stringwidth pop put
widtharray 35 (REASON) stringwidth pop put
widtharray 36 (BEHALF) stringwidth pop put
widtharray 37 (TIME) stringwidth pop put
widtharray 38 (TIME-RELATER) stringwidth pop put
widtharray 39 (COND-RELATER) stringwidth pop put
widtharray 40 (DISPLACED-CONSTITUENT) stringwidth pop put
widtharray 41 (QUESTION-EMBEDDED) stringwidth pop put
widtharray 42 (RELATIVE) stringwidth pop put
widtharray 43 (SUBCAT) stringwidth pop put
widtharray 44 (SUBJECT-MOOD) stringwidth pop put
widtharray 45 (SUBJECT-SUBCAT) stringwidth pop put
widtharray 46 (OBJECT-SUBCAT) stringwidth pop put
widtharray 47 (SUBJ-COMP-CAT) stringwidth pop put
widtharray 48 (OBJ-COMP-CAT) stringwidth pop put
widtharray 49 (BY-OBJ-CAT) stringwidth pop put
widtharray 50 (DATIVE-CAT) stringwidth pop put
widtharray 51 (SIMPLE-VERB-GROUP) stringwidth pop put
widtharray 52 (TENSE-SELECTION) stringwidth pop put
widtharray 53 (ASPECT-CHOICE) stringwidth pop put
widtharray 54 (MODALITY) stringwidth pop put
widtharray 55 (VOICE-VERB-GROUP) stringwidth pop put
widtharray 56 (NOTF-PLACEMENT) stringwidth pop put
widtharray 57 (TRIVIAL-PROPER) stringwidth pop put
widtharray 58 (SIMPLE-NP) stringwidth pop put
widtharray 59 (NP-TYPE) stringwidth pop put
widtharray 60 (PRONOUN-TYPE) stringwidth pop put
widtharray 61 (NP-NUMBER) stringwidth pop put
widtharray 62 (NP-PRE-DET) stringwidth pop put
widtharray 63 (DESCRIBER) stringwidth pop put
widtharray 64 (CLASSIFIER) stringwidth pop put
widtharray 65 (QUALIFIER) stringwidth pop put
widtharray 66 (NP-CASE) stringwidth pop put
widtharray 67 (DET) stringwidth pop put
widtharray 68 (PRE-DET) stringwidth pop put
widtharray 69 (DEICTIC2) stringwidth pop put
widtharray 70 (ORDINAL) stringwidth pop put
widtharray 71 (QUANTIFIER) stringwidth pop put
widtharray 72 (QUANT-COUNT-PLURAL) stringwidth pop put
widtharray 73 (QUANT-PARTITIVE) stringwidth pop put
widtharray 74 (QUANT-MASS) stringwidth pop put
widtharray 75 (DET-TYPE) stringwidth pop put
widtharray 76 (ARTICLE-DET) stringwidth pop put
widtharray 77 (POSSESSIVE-DET) stringwidth pop put
widtharray 78 (QUESTION-DET) stringwidth pop put
widtharray 79 (DEMONSTRATIVE-DET) stringwidth pop put
widtharray 80 (QUANTIFIER-DET) stringwidth pop put
widtharray 81 (FRACTION) stringwidth pop put
widtharray 82 (COMPLEX) stringwidth pop put
widtharray 83 (LIST) stringwidth pop put
widtharray 84 (CONSTITUENT-CAT) stringwidth pop put
/Helvetica-Oblique findfont 8 scalefont setfont
widtharray 0 get
4 add widtharray exch 0 exch put
widtharray 1 get
4 add widtharray exch 1 exch put
widtharray 2 get
4 add widtharray exch 2 exch put
widtharray 3 get
4 add widtharray exch 3 exch put
widtharray 4 get
4 add widtharray exch 4 exch put
widtharray 5 get
4 add widtharray exch 5 exch put
widtharray 6 get
4 add widtharray exch 6 exch put
widtharray 7 get
4 add widtharray exch 7 exch put
widtharray 8 get
4 add widtharray exch 8 exch put
widtharray 9 get
4 add widtharray exch 9 exch put
widtharray 10 get
4 add widtharray exch 10 exch put
widtharray 11 get
4 add widtharray exch 11 exch put
widtharray 12 get
4 add widtharray exch 12 exch put
widtharray 13 get
4 add widtharray exch 13 exch put
widtharray 14 get
4 add widtharray exch 14 exch put
widtharray 15 get
4 add widtharray exch 15 exch put
widtharray 16 get
4 add widtharray exch 16 exch put
widtharray 17 get
4 add widtharray exch 17 exch put
widtharray 18 get
4 add widtharray exch 18 exch put
widtharray 19 get
4 add widtharray exch 19 exch put
widtharray 20 get
4 add widtharray exch 20 exch put
widtharray 21 get
4 add widtharray exch 21 exch put
widtharray 22 get
4 add widtharray exch 22 exch put
widtharray 23 get
4 add widtharray exch 23 exch put
widtharray 24 get
4 add widtharray exch 24 exch put
widtharray 25 get
4 add widtharray exch 25 exch put
widtharray 26 get
4 add widtharray exch 26 exch put
widtharray 27 get
4 add widtharray exch 27 exch put
widtharray 28 get
4 add widtharray exch 28 exch put
widtharray 29 get
4 add widtharray exch 29 exch put
widtharray 30 get
4 add widtharray exch 30 exch put
widtharray 31 get
4 add widtharray exch 31 exch put
widtharray 32 get
4 add widtharray exch 32 exch put
widtharray 33 get
4 add widtharray exch 33 exch put
widtharray 34 get
4 add widtharray exch 34 exch put
widtharray 35 get
4 add widtharray exch 35 exch put
widtharray 36 get
4 add widtharray exch 36 exch put
widtharray 37 get
4 add widtharray exch 37 exch put
widtharray 38 get
4 add widtharray exch 38 exch put
widtharray 39 get
4 add widtharray exch 39 exch put
widtharray 40 get
4 add widtharray exch 40 exch put
widtharray 41 get
4 add widtharray exch 41 exch put
widtharray 42 get
4 add widtharray exch 42 exch put
widtharray 43 get
4 add widtharray exch 43 exch put
widtharray 44 get
4 add widtharray exch 44 exch put
widtharray 45 get
4 add widtharray exch 45 exch put
widtharray 46 get
4 add widtharray exch 46 exch put
widtharray 47 get
4 add widtharray exch 47 exch put
widtharray 48 get
4 add widtharray exch 48 exch put
widtharray 49 get
4 add widtharray exch 49 exch put
widtharray 50 get
4 add widtharray exch 50 exch put
widtharray 51 get
4 add widtharray exch 51 exch put
widtharray 52 get
4 add widtharray exch 52 exch put
widtharray 53 get
4 add widtharray exch 53 exch put
widtharray 54 get
4 add widtharray exch 54 exch put
widtharray 55 get
4 add widtharray exch 55 exch put
widtharray 56 get
4 add widtharray exch 56 exch put
widtharray 57 get
4 add widtharray exch 57 exch put
widtharray 58 get
4 add widtharray exch 58 exch put
widtharray 59 get
4 add widtharray exch 59 exch put
widtharray 60 get
4 add widtharray exch 60 exch put
widtharray 61 get
4 add widtharray exch 61 exch put
widtharray 62 get
4 add widtharray exch 62 exch put
widtharray 63 get
4 add widtharray exch 63 exch put
widtharray 64 get
4 add widtharray exch 64 exch put
widtharray 65 get
4 add widtharray exch 65 exch put
widtharray 66 get
4 add widtharray exch 66 exch put
widtharray 67 get
4 add widtharray exch 67 exch put
widtharray 68 get
4 add widtharray exch 68 exch put
widtharray 69 get
4 add widtharray exch 69 exch put
widtharray 70 get
4 add widtharray exch 70 exch put
widtharray 71 get
4 add widtharray exch 71 exch put
widtharray 72 get
4 add widtharray exch 72 exch put
widtharray 73 get
4 add widtharray exch 73 exch put
widtharray 74 get
4 add widtharray exch 74 exch put
widtharray 75 get
4 add widtharray exch 75 exch put
widtharray 76 get
4 add widtharray exch 76 exch put
widtharray 77 get
4 add widtharray exch 77 exch put
widtharray 78 get
4 add widtharray exch 78 exch put
widtharray 79 get
4 add widtharray exch 79 exch put
widtharray 80 get
4 add widtharray exch 80 exch put
widtharray 81 get
4 add widtharray exch 81 exch put
widtharray 82 get
4 add widtharray exch 82 exch put
widtharray 83 get
4 add widtharray exch 83 exch put
widtharray 84 get
4 add widtharray exch 84 exch put
xarray 0 0 put
xarray 0 get widtharray 0 get add
20 add xarray exch 1 exch put
xarray 1 get widtharray 1 get add
20 add xarray exch 2 exch put
xarray 1 get widtharray 1 get add
20 add xarray exch 3 exch put
xarray 3 get widtharray 3 get add
20 add xarray exch 4 exch put
xarray 4 get widtharray 4 get add
20 add xarray exch 5 exch put
xarray 4 get widtharray 4 get add
20 add xarray exch 6 exch put
xarray 6 get widtharray 6 get add
20 add xarray exch 7 exch put
xarray 6 get widtharray 6 get add
20 add xarray exch 8 exch put
xarray 6 get widtharray 6 get add
20 add xarray exch 9 exch put
xarray 3 get widtharray 3 get add
20 add xarray exch 10 exch put
xarray 10 get widtharray 10 get add
20 add xarray exch 11 exch put
xarray 11 get widtharray 11 get add
20 add xarray exch 12 exch put
xarray 10 get widtharray 10 get add
20 add xarray exch 13 exch put
xarray 10 get widtharray 10 get add
20 add xarray exch 14 exch put
xarray 14 get widtharray 14 get add
20 add xarray exch 15 exch put
xarray 1 get widtharray 1 get add
20 add xarray exch 16 exch put
xarray 16 get widtharray 16 get add
20 add xarray exch 17 exch put
xarray 16 get widtharray 16 get add
20 add xarray exch 18 exch put
xarray 18 get widtharray 18 get add
20 add xarray exch 19 exch put
xarray 18 get widtharray 18 get add
20 add xarray exch 20 exch put
xarray 18 get widtharray 18 get add
20 add xarray exch 21 exch put
xarray 18 get widtharray 18 get add
20 add xarray exch 22 exch put
xarray 1 get widtharray 1 get add
20 add xarray exch 23 exch put
xarray 1 get widtharray 1 get add
20 add xarray exch 24 exch put
xarray 24 get widtharray 24 get add
20 add xarray exch 25 exch put
xarray 24 get widtharray 24 get add
20 add xarray exch 26 exch put
xarray 24 get widtharray 24 get add
20 add xarray exch 27 exch put
xarray 24 get widtharray 24 get add
20 add xarray exch 28 exch put
xarray 24 get widtharray 24 get add
20 add xarray exch 29 exch put
xarray 24 get widtharray 24 get add
20 add xarray exch 30 exch put
xarray 24 get widtharray 24 get add
20 add xarray exch 31 exch put
xarray 24 get widtharray 24 get add
20 add xarray exch 32 exch put
xarray 24 get widtharray 24 get add
20 add xarray exch 33 exch put
xarray 24 get widtharray 24 get add
20 add xarray exch 34 exch put
xarray 24 get widtharray 24 get add
20 add xarray exch 35 exch put
xarray 24 get widtharray 24 get add
20 add xarray exch 36 exch put
xarray 24 get widtharray 24 get add
20 add xarray exch 37 exch put
xarray 24 get widtharray 24 get add
20 add xarray exch 38 exch put
xarray 24 get widtharray 24 get add
20 add xarray exch 39 exch put
xarray 1 get widtharray 1 get add
20 add xarray exch 40 exch put
xarray 40 get widtharray 40 get add
20 add xarray exch 41 exch put
xarray 40 get widtharray 40 get add
20 add xarray exch 42 exch put
xarray 1 get widtharray 1 get add
20 add xarray exch 43 exch put
xarray 43 get widtharray 43 get add
20 add xarray exch 44 exch put
xarray 43 get widtharray 43 get add
20 add xarray exch 45 exch put
xarray 43 get widtharray 43 get add
20 add xarray exch 46 exch put
xarray 43 get widtharray 43 get add
20 add xarray exch 47 exch put
xarray 43 get widtharray 43 get add
20 add xarray exch 48 exch put
xarray 43 get widtharray 43 get add
20 add xarray exch 49 exch put
xarray 43 get widtharray 43 get add
20 add xarray exch 50 exch put
xarray 0 get widtharray 0 get add
20 add xarray exch 51 exch put
xarray 51 get widtharray 51 get add
20 add xarray exch 52 exch put
xarray 52 get widtharray 52 get add
xarray 52 get widtharray 52 get add max
xarray 52 get widtharray 52 get add max
xarray 52 get widtharray 52 get add max
xarray 52 get widtharray 52 get add max
xarray 52 get widtharray 52 get add max
xarray 52 get widtharray 52 get add max
xarray 52 get widtharray 52 get add max
xarray 52 get widtharray 52 get add max
xarray 52 get widtharray 52 get add max
xarray 52 get widtharray 52 get add max
xarray 52 get widtharray 52 get add max
xarray 52 get widtharray 52 get add max
xarray 52 get widtharray 52 get add max
xarray 52 get widtharray 52 get add max
20 add xarray exch 53 exch put
xarray 51 get widtharray 51 get add
20 add xarray exch 54 exch put
xarray 51 get widtharray 51 get add
20 add xarray exch 55 exch put
xarray 51 get widtharray 51 get add
20 add xarray exch 56 exch put
xarray 0 get widtharray 0 get add
20 add xarray exch 57 exch put
xarray 0 get widtharray 0 get add
20 add xarray exch 58 exch put
xarray 58 get widtharray 58 get add
20 add xarray exch 59 exch put
xarray 59 get widtharray 59 get add
20 add xarray exch 60 exch put
xarray 58 get widtharray 58 get add
20 add xarray exch 61 exch put
xarray 58 get widtharray 58 get add
20 add xarray exch 62 exch put
xarray 58 get widtharray 58 get add
20 add xarray exch 63 exch put
xarray 58 get widtharray 58 get add
20 add xarray exch 64 exch put
xarray 58 get widtharray 58 get add
20 add xarray exch 65 exch put
xarray 58 get widtharray 58 get add
20 add xarray exch 66 exch put
xarray 0 get widtharray 0 get add
20 add xarray exch 67 exch put
xarray 67 get widtharray 67 get add
20 add xarray exch 68 exch put
xarray 67 get widtharray 67 get add
20 add xarray exch 69 exch put
xarray 67 get widtharray 67 get add
20 add xarray exch 70 exch put
xarray 67 get widtharray 67 get add
20 add xarray exch 71 exch put
xarray 71 get widtharray 71 get add
20 add xarray exch 72 exch put
xarray 71 get widtharray 71 get add
20 add xarray exch 74 exch put
xarray 72 get widtharray 72 get add
xarray 72 get widtharray 72 get add max
xarray 74 get widtharray 74 get add max
20 add xarray exch 73 exch put
xarray 67 get widtharray 67 get add
20 add xarray exch 75 exch put
xarray 75 get widtharray 75 get add
20 add xarray exch 76 exch put
xarray 75 get widtharray 75 get add
20 add xarray exch 77 exch put
xarray 75 get widtharray 75 get add
20 add xarray exch 78 exch put
xarray 75 get widtharray 75 get add
20 add xarray exch 79 exch put
xarray 75 get widtharray 75 get add
20 add xarray exch 80 exch put
xarray 0 get widtharray 0 get add
20 add xarray exch 81 exch put
xarray 0 get widtharray 0 get add
20 add xarray exch 82 exch put
xarray 82 get widtharray 82 get add
20 add xarray exch 83 exch put
xarray 83 get widtharray 83 get add
xarray 83 get widtharray 83 get add max
xarray 83 get widtharray 83 get add max
xarray 83 get widtharray 83 get add max
20 add xarray exch 84 exch put
/maximum-x 0
xarray 0 get widtharray 0 get add max
xarray 1 get widtharray 1 get add max
xarray 2 get widtharray 2 get add max
xarray 3 get widtharray 3 get add max
xarray 4 get widtharray 4 get add max
xarray 5 get widtharray 5 get add max
xarray 6 get widtharray 6 get add max
xarray 7 get widtharray 7 get add max
xarray 8 get widtharray 8 get add max
xarray 9 get widtharray 9 get add max
xarray 10 get widtharray 10 get add max
xarray 11 get widtharray 11 get add max
xarray 12 get widtharray 12 get add max
xarray 13 get widtharray 13 get add max
xarray 14 get widtharray 14 get add max
xarray 15 get widtharray 15 get add max
xarray 16 get widtharray 16 get add max
xarray 17 get widtharray 17 get add max
xarray 18 get widtharray 18 get add max
xarray 19 get widtharray 19 get add max
xarray 20 get widtharray 20 get add max
xarray 21 get widtharray 21 get add max
xarray 22 get widtharray 22 get add max
xarray 23 get widtharray 23 get add max
xarray 24 get widtharray 24 get add max
xarray 25 get widtharray 25 get add max
xarray 26 get widtharray 26 get add max
xarray 27 get widtharray 27 get add max
xarray 28 get widtharray 28 get add max
xarray 29 get widtharray 29 get add max
xarray 30 get widtharray 30 get add max
xarray 31 get widtharray 31 get add max
xarray 32 get widtharray 32 get add max
xarray 33 get widtharray 33 get add max
xarray 34 get widtharray 34 get add max
xarray 35 get widtharray 35 get add max
xarray 36 get widtharray 36 get add max
xarray 37 get widtharray 37 get add max
xarray 38 get widtharray 38 get add max
xarray 39 get widtharray 39 get add max
xarray 40 get widtharray 40 get add max
xarray 41 get widtharray 41 get add max
xarray 42 get widtharray 42 get add max
xarray 43 get widtharray 43 get add max
xarray 44 get widtharray 44 get add max
xarray 45 get widtharray 45 get add max
xarray 46 get widtharray 46 get add max
xarray 47 get widtharray 47 get add max
xarray 48 get widtharray 48 get add max
xarray 49 get widtharray 49 get add max
xarray 50 get widtharray 50 get add max
xarray 51 get widtharray 51 get add max
xarray 52 get widtharray 52 get add max
xarray 53 get widtharray 53 get add max
xarray 54 get widtharray 54 get add max
xarray 55 get widtharray 55 get add max
xarray 56 get widtharray 56 get add max
xarray 57 get widtharray 57 get add max
xarray 58 get widtharray 58 get add max
xarray 59 get widtharray 59 get add max
xarray 60 get widtharray 60 get add max
xarray 61 get widtharray 61 get add max
xarray 62 get widtharray 62 get add max
xarray 63 get widtharray 63 get add max
xarray 64 get widtharray 64 get add max
xarray 65 get widtharray 65 get add max
xarray 66 get widtharray 66 get add max
xarray 67 get widtharray 67 get add max
xarray 68 get widtharray 68 get add max
xarray 69 get widtharray 69 get add max
xarray 70 get widtharray 70 get add max
xarray 71 get widtharray 71 get add max
xarray 72 get widtharray 72 get add max
xarray 73 get widtharray 73 get add max
xarray 74 get widtharray 74 get add max
xarray 75 get widtharray 75 get add max
xarray 76 get widtharray 76 get add max
xarray 77 get widtharray 77 get add max
xarray 78 get widtharray 78 get add max
xarray 79 get widtharray 79 get add max
xarray 80 get widtharray 80 get add max
xarray 81 get widtharray 81 get add max
xarray 82 get widtharray 82 get add max
xarray 83 get widtharray 83 get add max
xarray 84 get widtharray 84 get add max
def
394 dict begin
/box0 {
xarray 0 get 317 widtharray 0 get 14 drawbox
} def
/box1 {
xarray 1 get 906 widtharray 1 get 14 drawbox
} def
/box2 {
xarray 2 get 1223 widtharray 2 get 14 drawbox
} def
/box3 {
xarray 3 get 1143 widtharray 3 get 14 drawbox
} def
/box4 {
xarray 4 get 1183 widtharray 4 get 14 drawbox
} def
/box5 {
xarray 5 get 1203 widtharray 5 get 14 drawbox
} def
/box6 {
xarray 6 get 1163 widtharray 6 get 14 drawbox
} def
/box7 {
xarray 7 get 1183 widtharray 7 get 14 drawbox
} def
/box8 {
xarray 8 get 1163 widtharray 8 get 14 drawbox
} def
/box9 {
xarray 9 get 1143 widtharray 9 get 14 drawbox
} def
/box10 {
xarray 10 get 1103 widtharray 10 get 14 drawbox
} def
/box11 {
xarray 11 get 1123 widtharray 11 get 14 drawbox
} def
/box12 {
xarray 12 get 1123 widtharray 12 get 14 drawbox
} def
/box13 {
xarray 13 get 1103 widtharray 13 get 14 drawbox
} def
/box14 {
xarray 14 get 1083 widtharray 14 get 14 drawbox
} def
/box15 {
xarray 15 get 1083 widtharray 15 get 14 drawbox
} def
/box16 {
xarray 16 get 1038 widtharray 16 get 14 drawbox
} def
/box17 {
xarray 17 get 1063 widtharray 17 get 14 drawbox
} def
/box18 {
xarray 18 get 1013 widtharray 18 get 14 drawbox
} def
/box19 {
xarray 19 get 1043 widtharray 19 get 14 drawbox
} def
/box20 {
xarray 20 get 1023 widtharray 20 get 14 drawbox
} def
/box21 {
xarray 21 get 1003 widtharray 21 get 14 drawbox
} def
/box22 {
xarray 22 get 983 widtharray 22 get 14 drawbox
} def
/box23 {
xarray 23 get 963 widtharray 23 get 14 drawbox
} def
/box24 {
xarray 24 get 803 widtharray 24 get 14 drawbox
} def
/box25 {
xarray 25 get 943 widtharray 25 get 14 drawbox
} def
/box26 {
xarray 26 get 923 widtharray 26 get 14 drawbox
} def
/box27 {
xarray 27 get 903 widtharray 27 get 14 drawbox
} def
/box28 {
xarray 28 get 883 widtharray 28 get 14 drawbox
} def
/box29 {
xarray 29 get 863 widtharray 29 get 14 drawbox
} def
/box30 {
xarray 30 get 843 widtharray 30 get 14 drawbox
} def
/box31 {
xarray 31 get 823 widtharray 31 get 14 drawbox
} def
/box32 {
xarray 32 get 803 widtharray 32 get 14 drawbox
} def
/box33 {
xarray 33 get 783 widtharray 33 get 14 drawbox
} def
/box34 {
xarray 34 get 763 widtharray 34 get 14 drawbox
} def
/box35 {
xarray 35 get 743 widtharray 35 get 14 drawbox
} def
/box36 {
xarray 36 get 723 widtharray 36 get 14 drawbox
} def
/box37 {
xarray 37 get 703 widtharray 37 get 14 drawbox
} def
/box38 {
xarray 38 get 683 widtharray 38 get 14 drawbox
} def
/box39 {
xarray 39 get 663 widtharray 39 get 14 drawbox
} def
/box40 {
xarray 40 get 633 widtharray 40 get 14 drawbox
} def
/box41 {
xarray 41 get 643 widtharray 41 get 14 drawbox
} def
/box42 {
xarray 42 get 623 widtharray 42 get 14 drawbox
} def
/box43 {
xarray 43 get 543 widtharray 43 get 14 drawbox
} def
/box44 {
xarray 44 get 603 widtharray 44 get 14 drawbox
} def
/box45 {
xarray 45 get 583 widtharray 45 get 14 drawbox
} def
/box46 {
xarray 46 get 563 widtharray 46 get 14 drawbox
} def
/box47 {
xarray 47 get 543 widtharray 47 get 14 drawbox
} def
/box48 {
xarray 48 get 523 widtharray 48 get 14 drawbox
} def
/box49 {
xarray 49 get 503 widtharray 49 get 14 drawbox
} def
/box50 {
xarray 50 get 483 widtharray 50 get 14 drawbox
} def
/box51 {
xarray 51 get 433 widtharray 51 get 14 drawbox
} def
/box52 {
xarray 52 get 463 widtharray 52 get 14 drawbox
} def
/box53 {
xarray 53 get 463 widtharray 53 get 14 drawbox
} def
/box54 {
xarray 54 get 443 widtharray 54 get 14 drawbox
} def
/box55 {
xarray 55 get 423 widtharray 55 get 14 drawbox
} def
/box56 {
xarray 56 get 403 widtharray 56 get 14 drawbox
} def
/box57 {
xarray 57 get 383 widtharray 57 get 14 drawbox
} def
/box58 {
xarray 58 get 303 widtharray 58 get 14 drawbox
} def
/box59 {
xarray 59 get 363 widtharray 59 get 14 drawbox
} def
/box60 {
xarray 60 get 363 widtharray 60 get 14 drawbox
} def
/box61 {
xarray 61 get 343 widtharray 61 get 14 drawbox
} def
/box62 {
xarray 62 get 323 widtharray 62 get 14 drawbox
} def
/box63 {
xarray 63 get 303 widtharray 63 get 14 drawbox
} def
/box64 {
xarray 64 get 283 widtharray 64 get 14 drawbox
} def
/box65 {
xarray 65 get 263 widtharray 65 get 14 drawbox
} def
/box66 {
xarray 66 get 243 widtharray 66 get 14 drawbox
} def
/box67 {
xarray 67 get 169 widtharray 67 get 14 drawbox
} def
/box68 {
xarray 68 get 223 widtharray 68 get 14 drawbox
} def
/box69 {
xarray 69 get 203 widtharray 69 get 14 drawbox
} def
/box70 {
xarray 70 get 183 widtharray 70 get 14 drawbox
} def
/box71 {
xarray 71 get 153 widtharray 71 get 14 drawbox
} def
/box72 {
xarray 72 get 163 widtharray 72 get 14 drawbox
} def
/box73 {
xarray 73 get 143 widtharray 73 get 14 drawbox
} def
/box74 {
xarray 74 get 143 widtharray 74 get 14 drawbox
} def
/box75 {
xarray 75 get 83 widtharray 75 get 14 drawbox
} def
/box76 {
xarray 76 get 123 widtharray 76 get 14 drawbox
} def
/box77 {
xarray 77 get 103 widtharray 77 get 14 drawbox
} def
/box78 {
xarray 78 get 83 widtharray 78 get 14 drawbox
} def
/box79 {
xarray 79 get 63 widtharray 79 get 14 drawbox
} def
/box80 {
xarray 80 get 43 widtharray 80 get 14 drawbox
} def
/box81 {
xarray 81 get 23 widtharray 81 get 14 drawbox
} def
/box82 {
xarray 82 get 3 widtharray 82 get 14 drawbox
} def
/box83 {
xarray 83 get 3 widtharray 83 get 14 drawbox
} def
/box84 {
xarray 84 get 3 widtharray 84 get 14 drawbox
} def
/text0 {xarray 0 get boxedge add 321 moveto (TOP-LEVEL) show} def
/text1 {xarray 1 get boxedge add 910 moveto (SIMPLE-CLAUSE) show} def
/text2 {xarray 2 get boxedge add 1227 moveto (MOOD) show} def
/text3 {xarray 3 get boxedge add 1147 moveto (TRANSITIVITY) show} def
/text4 {xarray 4 get boxedge add 1187 moveto (SIMPLE-PROCESS) show} def
/text5 {xarray 5 get boxedge add 1207 moveto (MATERIAL-SIMPLE-AGENTIVE) show} def
/text6 {xarray 6 get boxedge add 1167 moveto (RELATIONAL-SIMPLE) show} def
/text7 {xarray 7 get boxedge add 1187 moveto (ASCRIPTIVE-MODE) show} def
/text8 {xarray 8 get boxedge add 1167 moveto (LOCATIVE-MODE) show} def
/text9 {xarray 9 get boxedge add 1147 moveto (POSSESSIVE-MODE) show} def
/text10 {xarray 10 get boxedge add 1107 moveto (COMPOSITE-PROCESS) show} def
/text11 {xarray 11 get boxedge add 1127 moveto (COMPOSITE-AGENTIVE-EFFECT-TYPE) show} def
/text12 {xarray 12 get boxedge add 1127 moveto (AG-DISP-RELATION-TYPE) show} def
/text13 {xarray 13 get boxedge add 1107 moveto (COMPOSITE-AGENTIVE-RELATIONAL) show} def
/text14 {xarray 14 get boxedge add 1087 moveto (COMPOSITE-NON-AGENTIVE-EFFECT-TYPE) show} def
/text15 {xarray 15 get boxedge add 1087 moveto (AF-RELATION-TYPE) show} def
/text16 {xarray 16 get boxedge add 1042 moveto (VOICE) show} def
/text17 {xarray 17 get boxedge add 1067 moveto (EQUATIVE-VOICE) show} def
/text18 {xarray 18 get boxedge add 1017 moveto (VOICE-NORMAL) show} def
/text19 {xarray 19 get boxedge add 1047 moveto (VOICE-12) show} def
/text20 {xarray 20 get boxedge add 1027 moveto (VOICE-123) show} def
/text21 {xarray 21 get boxedge add 1007 moveto (VOICE-124) show} def
/text22 {xarray 22 get boxedge add 987 moveto (VOICE-13) show} def
/text23 {xarray 23 get boxedge add 967 moveto (AGENTLESS) show} def
/text24 {xarray 24 get boxedge add 807 moveto (CIRCUMSTANTIAL) show} def
/text25 {xarray 25 get boxedge add 947 moveto (AT-LOC) show} def
/text26 {xarray 26 get boxedge add 927 moveto (TO-LOC) show} def
/text27 {xarray 27 get boxedge add 907 moveto (FROM-LOC) show} def
/text28 {xarray 28 get boxedge add 887 moveto (IN-LOC) show} def
/text29 {xarray 29 get boxedge add 867 moveto (ON-LOC) show} def
/text30 {xarray 30 get boxedge add 847 moveto (INSTRUMENT) show} def
/text31 {xarray 31 get boxedge add 827 moveto (ACCOMPANIMENT) show} def
/text32 {xarray 32 get boxedge add 807 moveto (MANNER) show} def
/text33 {xarray 33 get boxedge add 787 moveto (AO-ADVERBIAL) show} def
/text34 {xarray 34 get boxedge add 767 moveto (PURPOSE) show} def
/text35 {xarray 35 get boxedge add 747 moveto (REASON) show} def
/text36 {xarray 36 get boxedge add 727 moveto (BEHALF) show} def
/text37 {xarray 37 get boxedge add 707 moveto (TIME) show} def
/text38 {xarray 38 get boxedge add 687 moveto (TIME-RELATER) show} def
/text39 {xarray 39 get boxedge add 667 moveto (COND-RELATER) show} def
/text40 {xarray 40 get boxedge add 637 moveto (DISPLACED-CONSTITUENT) show} def
/text41 {xarray 41 get boxedge add 647 moveto (QUESTION-EMBEDDED) show} def
/text42 {xarray 42 get boxedge add 627 moveto (RELATIVE) show} def
/text43 {xarray 43 get boxedge add 547 moveto (SUBCAT) show} def
/text44 {xarray 44 get boxedge add 607 moveto (SUBJECT-MOOD) show} def
/text45 {xarray 45 get boxedge add 587 moveto (SUBJECT-SUBCAT) show} def
/text46 {xarray 46 get boxedge add 567 moveto (OBJECT-SUBCAT) show} def
/text47 {xarray 47 get boxedge add 547 moveto (SUBJ-COMP-CAT) show} def
/text48 {xarray 48 get boxedge add 527 moveto (OBJ-COMP-CAT) show} def
/text49 {xarray 49 get boxedge add 507 moveto (BY-OBJ-CAT) show} def
/text50 {xarray 50 get boxedge add 487 moveto (DATIVE-CAT) show} def
/text51 {xarray 51 get boxedge add 437 moveto (SIMPLE-VERB-GROUP) show} def
/text52 {xarray 52 get boxedge add 467 moveto (TENSE-SELECTION) show} def
/text53 {xarray 53 get boxedge add 467 moveto (ASPECT-CHOICE) show} def
/text54 {xarray 54 get boxedge add 447 moveto (MODALITY) show} def
/text55 {xarray 55 get boxedge add 427 moveto (VOICE-VERB-GROUP) show} def
/text56 {xarray 56 get boxedge add 407 moveto (NOTF-PLACEMENT) show} def
/text57 {xarray 57 get boxedge add 387 moveto (TRIVIAL-PROPER) show} def
/text58 {xarray 58 get boxedge add 307 moveto (SIMPLE-NP) show} def
/text59 {xarray 59 get boxedge add 367 moveto (NP-TYPE) show} def
/text60 {xarray 60 get boxedge add 367 moveto (PRONOUN-TYPE) show} def
/text61 {xarray 61 get boxedge add 347 moveto (NP-NUMBER) show} def
/text62 {xarray 62 get boxedge add 327 moveto (NP-PRE-DET) show} def
/text63 {xarray 63 get boxedge add 307 moveto (DESCRIBER) show} def
/text64 {xarray 64 get boxedge add 287 moveto (CLASSIFIER) show} def
/text65 {xarray 65 get boxedge add 267 moveto (QUALIFIER) show} def
/text66 {xarray 66 get boxedge add 247 moveto (NP-CASE) show} def
/text67 {xarray 67 get boxedge add 173 moveto (DET) show} def
/text68 {xarray 68 get boxedge add 227 moveto (PRE-DET) show} def
/text69 {xarray 69 get boxedge add 207 moveto (DEICTIC2) show} def
/text70 {xarray 70 get boxedge add 187 moveto (ORDINAL) show} def
/text71 {xarray 71 get boxedge add 157 moveto (QUANTIFIER) show} def
/text72 {xarray 72 get boxedge add 167 moveto (QUANT-COUNT-PLURAL) show} def
/text73 {xarray 73 get boxedge add 147 moveto (QUANT-PARTITIVE) show} def
/text74 {xarray 74 get boxedge add 147 moveto (QUANT-MASS) show} def
/text75 {xarray 75 get boxedge add 87 moveto (DET-TYPE) show} def
/text76 {xarray 76 get boxedge add 127 moveto (ARTICLE-DET) show} def
/text77 {xarray 77 get boxedge add 107 moveto (POSSESSIVE-DET) show} def
/text78 {xarray 78 get boxedge add 87 moveto (QUESTION-DET) show} def
/text79 {xarray 79 get boxedge add 67 moveto (DEMONSTRATIVE-DET) show} def
/text80 {xarray 80 get boxedge add 47 moveto (QUANTIFIER-DET) show} def
/text81 {xarray 81 get boxedge add 27 moveto (FRACTION) show} def
/text82 {xarray 82 get boxedge add 7 moveto (COMPLEX) show} def
/text83 {xarray 83 get boxedge add 7 moveto (LIST) show} def
/text84 {xarray 84 get boxedge add 7 moveto (CONSTITUENT-CAT) show} def
/edge0 {newpath
stroke } def
/edge1 {newpath
xarray 0 get widtharray 0 get add 324 moveto
xarray 1 get 913 lineto
stroke } def
/edge2 {newpath
xarray 1 get widtharray 1 get add 913 moveto
xarray 2 get 1230 lineto
stroke } def
/edge3 {newpath
xarray 1 get widtharray 1 get add 913 moveto
xarray 3 get 1150 lineto
stroke } def
/edge4 {newpath
xarray 3 get widtharray 3 get add 1150 moveto
xarray 4 get 1190 lineto
stroke } def
/edge5 {newpath
xarray 4 get widtharray 4 get add 1190 moveto
xarray 5 get 1210 lineto
stroke } def
/edge6 {newpath
xarray 4 get widtharray 4 get add 1190 moveto
xarray 6 get 1170 lineto
stroke } def
/edge7 {newpath
xarray 6 get widtharray 6 get add 1170 moveto
xarray 7 get 1190 lineto
stroke } def
/edge8 {newpath
xarray 6 get widtharray 6 get add 1170 moveto
xarray 8 get 1170 lineto
stroke } def
/edge9 {newpath
xarray 6 get widtharray 6 get add 1170 moveto
xarray 9 get 1150 lineto
stroke } def
/edge10 {newpath
xarray 3 get widtharray 3 get add 1150 moveto
xarray 10 get 1110 lineto
stroke } def
/edge11 {newpath
xarray 10 get widtharray 10 get add 1110 moveto
xarray 11 get 1130 lineto
stroke } def
/edge12 {newpath
xarray 11 get widtharray 11 get add 1130 moveto
xarray 12 get 1130 lineto
stroke } def
/edge13 {newpath
xarray 10 get widtharray 10 get add 1110 moveto
xarray 13 get 1110 lineto
stroke } def
/edge14 {newpath
xarray 10 get widtharray 10 get add 1110 moveto
xarray 14 get 1090 lineto
stroke } def
/edge15 {newpath
xarray 14 get widtharray 14 get add 1090 moveto
xarray 15 get 1090 lineto
stroke } def
/edge16 {newpath
xarray 1 get widtharray 1 get add 913 moveto
xarray 16 get 1045 lineto
stroke } def
/edge17 {newpath
xarray 16 get widtharray 16 get add 1045 moveto
xarray 17 get 1070 lineto
stroke } def
/edge18 {newpath
xarray 16 get widtharray 16 get add 1045 moveto
xarray 18 get 1020 lineto
stroke } def
/edge19 {newpath
xarray 18 get widtharray 18 get add 1020 moveto
xarray 19 get 1050 lineto
stroke } def
/edge20 {newpath
xarray 18 get widtharray 18 get add 1020 moveto
xarray 20 get 1030 lineto
stroke } def
/edge21 {newpath
xarray 18 get widtharray 18 get add 1020 moveto
xarray 21 get 1010 lineto
stroke } def
/edge22 {newpath
xarray 18 get widtharray 18 get add 1020 moveto
xarray 22 get 990 lineto
stroke } def
/edge23 {newpath
xarray 1 get widtharray 1 get add 913 moveto
xarray 23 get 970 lineto
stroke } def
/edge24 {newpath
xarray 1 get widtharray 1 get add 913 moveto
xarray 24 get 810 lineto
stroke } def
/edge25 {newpath
xarray 24 get widtharray 24 get add 810 moveto
xarray 25 get 950 lineto
stroke } def
/edge26 {newpath
xarray 24 get widtharray 24 get add 810 moveto
xarray 26 get 930 lineto
stroke } def
/edge27 {newpath
xarray 24 get widtharray 24 get add 810 moveto
xarray 27 get 910 lineto
stroke } def
/edge28 {newpath
xarray 24 get widtharray 24 get add 810 moveto
xarray 28 get 890 lineto
stroke } def
/edge29 {newpath
xarray 24 get widtharray 24 get add 810 moveto
xarray 29 get 870 lineto
stroke } def
/edge30 {newpath
xarray 24 get widtharray 24 get add 810 moveto
xarray 30 get 850 lineto
stroke } def
/edge31 {newpath
xarray 24 get widtharray 24 get add 810 moveto
xarray 31 get 830 lineto
stroke } def
/edge32 {newpath
xarray 24 get widtharray 24 get add 810 moveto
xarray 32 get 810 lineto
stroke } def
/edge33 {newpath
xarray 24 get widtharray 24 get add 810 moveto
xarray 33 get 790 lineto
stroke } def
/edge34 {newpath
xarray 24 get widtharray 24 get add 810 moveto
xarray 34 get 770 lineto
stroke } def
/edge35 {newpath
xarray 24 get widtharray 24 get add 810 moveto
xarray 35 get 750 lineto
stroke } def
/edge36 {newpath
xarray 24 get widtharray 24 get add 810 moveto
xarray 36 get 730 lineto
stroke } def
/edge37 {newpath
xarray 24 get widtharray 24 get add 810 moveto
xarray 37 get 710 lineto
stroke } def
/edge38 {newpath
xarray 24 get widtharray 24 get add 810 moveto
xarray 38 get 690 lineto
stroke } def
/edge39 {newpath
xarray 24 get widtharray 24 get add 810 moveto
xarray 39 get 670 lineto
stroke } def
/edge40 {newpath
xarray 1 get widtharray 1 get add 913 moveto
xarray 40 get 640 lineto
stroke } def
/edge41 {newpath
xarray 40 get widtharray 40 get add 640 moveto
xarray 41 get 650 lineto
stroke } def
/edge42 {newpath
xarray 40 get widtharray 40 get add 640 moveto
xarray 42 get 630 lineto
stroke } def
/edge43 {newpath
xarray 1 get widtharray 1 get add 913 moveto
xarray 43 get 550 lineto
stroke } def
/edge44 {newpath
xarray 43 get widtharray 43 get add 550 moveto
xarray 44 get 610 lineto
stroke } def
/edge45 {newpath
xarray 43 get widtharray 43 get add 550 moveto
xarray 45 get 590 lineto
stroke } def
/edge46 {newpath
xarray 43 get widtharray 43 get add 550 moveto
xarray 46 get 570 lineto
stroke } def
/edge47 {newpath
xarray 43 get widtharray 43 get add 550 moveto
xarray 47 get 550 lineto
stroke } def
/edge48 {newpath
xarray 43 get widtharray 43 get add 550 moveto
xarray 48 get 530 lineto
stroke } def
/edge49 {newpath
xarray 43 get widtharray 43 get add 550 moveto
xarray 49 get 510 lineto
stroke } def
/edge50 {newpath
xarray 43 get widtharray 43 get add 550 moveto
xarray 50 get 490 lineto
stroke } def
/edge51 {newpath
xarray 0 get widtharray 0 get add 324 moveto
xarray 51 get 440 lineto
stroke } def
/edge52 {newpath
xarray 51 get widtharray 51 get add 440 moveto
xarray 52 get 470 lineto
stroke } def
/edge53 {newpath
xarray 52 get widtharray 52 get add 470 moveto
xarray 53 get 470 lineto
xarray 52 get widtharray 52 get add 470 moveto
xarray 53 get 470 lineto
xarray 52 get widtharray 52 get add 470 moveto
xarray 53 get 470 lineto
xarray 52 get widtharray 52 get add 470 moveto
xarray 53 get 470 lineto
xarray 52 get widtharray 52 get add 470 moveto
xarray 53 get 470 lineto
xarray 52 get widtharray 52 get add 470 moveto
xarray 53 get 470 lineto
xarray 52 get widtharray 52 get add 470 moveto
xarray 53 get 470 lineto
xarray 52 get widtharray 52 get add 470 moveto
xarray 53 get 470 lineto
xarray 52 get widtharray 52 get add 470 moveto
xarray 53 get 470 lineto
xarray 52 get widtharray 52 get add 470 moveto
xarray 53 get 470 lineto
xarray 52 get widtharray 52 get add 470 moveto
xarray 53 get 470 lineto
xarray 52 get widtharray 52 get add 470 moveto
xarray 53 get 470 lineto
xarray 52 get widtharray 52 get add 470 moveto
xarray 53 get 470 lineto
xarray 52 get widtharray 52 get add 470 moveto
xarray 53 get 470 lineto
xarray 52 get widtharray 52 get add 470 moveto
xarray 53 get 470 lineto
stroke } def
/edge54 {newpath
xarray 51 get widtharray 51 get add 440 moveto
xarray 54 get 450 lineto
stroke } def
/edge55 {newpath
xarray 51 get widtharray 51 get add 440 moveto
xarray 55 get 430 lineto
stroke } def
/edge56 {newpath
xarray 51 get widtharray 51 get add 440 moveto
xarray 56 get 410 lineto
stroke } def
/edge57 {newpath
xarray 0 get widtharray 0 get add 324 moveto
xarray 57 get 390 lineto
stroke } def
/edge58 {newpath
xarray 0 get widtharray 0 get add 324 moveto
xarray 58 get 310 lineto
stroke } def
/edge59 {newpath
xarray 58 get widtharray 58 get add 310 moveto
xarray 59 get 370 lineto
stroke } def
/edge60 {newpath
xarray 59 get widtharray 59 get add 370 moveto
xarray 60 get 370 lineto
stroke } def
/edge61 {newpath
xarray 58 get widtharray 58 get add 310 moveto
xarray 61 get 350 lineto
stroke } def
/edge62 {newpath
xarray 58 get widtharray 58 get add 310 moveto
xarray 62 get 330 lineto
stroke } def
/edge63 {newpath
xarray 58 get widtharray 58 get add 310 moveto
xarray 63 get 310 lineto
stroke } def
/edge64 {newpath
xarray 58 get widtharray 58 get add 310 moveto
xarray 64 get 290 lineto
stroke } def
/edge65 {newpath
xarray 58 get widtharray 58 get add 310 moveto
xarray 65 get 270 lineto
stroke } def
/edge66 {newpath
xarray 58 get widtharray 58 get add 310 moveto
xarray 66 get 250 lineto
stroke } def
/edge67 {newpath
xarray 0 get widtharray 0 get add 324 moveto
xarray 67 get 176 lineto
stroke } def
/edge68 {newpath
xarray 67 get widtharray 67 get add 176 moveto
xarray 68 get 230 lineto
stroke } def
/edge69 {newpath
xarray 67 get widtharray 67 get add 176 moveto
xarray 69 get 210 lineto
stroke } def
/edge70 {newpath
xarray 67 get widtharray 67 get add 176 moveto
xarray 70 get 190 lineto
stroke } def
/edge71 {newpath
xarray 67 get widtharray 67 get add 176 moveto
xarray 71 get 160 lineto
stroke } def
/edge72 {newpath
xarray 71 get widtharray 71 get add 160 moveto
xarray 72 get 170 lineto
stroke } def
/edge73 {newpath
xarray 72 get widtharray 72 get add 170 moveto
xarray 73 get 150 lineto
xarray 72 get widtharray 72 get add 170 moveto
xarray 73 get 150 lineto
xarray 74 get widtharray 74 get add 150 moveto
xarray 73 get 150 lineto
stroke } def
/edge74 {newpath
xarray 71 get widtharray 71 get add 160 moveto
xarray 74 get 150 lineto
stroke } def
/edge75 {newpath
xarray 67 get widtharray 67 get add 176 moveto
xarray 75 get 90 lineto
stroke } def
/edge76 {newpath
xarray 75 get widtharray 75 get add 90 moveto
xarray 76 get 130 lineto
stroke } def
/edge77 {newpath
xarray 75 get widtharray 75 get add 90 moveto
xarray 77 get 110 lineto
stroke } def
/edge78 {newpath
xarray 75 get widtharray 75 get add 90 moveto
xarray 78 get 90 lineto
stroke } def
/edge79 {newpath
xarray 75 get widtharray 75 get add 90 moveto
xarray 79 get 70 lineto
stroke } def
/edge80 {newpath
xarray 75 get widtharray 75 get add 90 moveto
xarray 80 get 50 lineto
stroke } def
/edge81 {newpath
xarray 0 get widtharray 0 get add 324 moveto
xarray 81 get 30 lineto
stroke } def
/edge82 {newpath
xarray 0 get widtharray 0 get add 324 moveto
xarray 82 get 10 lineto
stroke } def
/edge83 {newpath
xarray 82 get widtharray 82 get add 10 moveto
xarray 83 get 10 lineto
stroke } def
/edge84 {newpath
xarray 83 get widtharray 83 get add 10 moveto
xarray 84 get 10 lineto
xarray 83 get widtharray 83 get add 10 moveto
xarray 84 get 10 lineto
xarray 83 get widtharray 83 get add 10 moveto
xarray 84 get 10 lineto
xarray 83 get widtharray 83 get add 10 moveto
xarray 84 get 10 lineto
stroke } def
/boxchunk0 {
box0
box1
box2
box3
box4
box5
box6
box7
box8
box9
box10
box11
box12
box13
box14
box15
box16
box17
box18
box19
box20
box21
box22
box23
box24
box25
box26
box27
box28
box29
box30
box31
box32
box33
box34
box35
box36
box37
box38
box39
box40
box41
box42
box43
box44
box45
box46
box47
box48
box49
box50
box51
box52
box53
box54
box55
box56
box57
box58
box59
box60
box61
box62
box63
box64
box65
box66
box67
box68
box69
box70
box71
box72
box73
box74
box75
box76
box77
box78
box79
box80
box81
box82
box83
box84
} def
/textchunk0 {
text0
text1
text2
text3
text4
text5
text6
text7
text8
text9
text10
text11
text12
text13
text14
text15
text16
text17
text18
text19
text20
text21
text22
text23
text24
text25
text26
text27
text28
text29
text30
text31
text32
text33
text34
text35
text36
text37
text38
text39
text40
text41
text42
text43
text44
text45
text46
text47
text48
text49
text50
text51
text52
text53
text54
text55
text56
text57
text58
text59
text60
text61
text62
text63
text64
text65
text66
text67
text68
text69
text70
text71
text72
text73
text74
text75
text76
text77
text78
text79
text80
text81
text82
text83
text84
} def
/secondtextchunk0 {
} def
/edgechunk0 {
edge0
edge1
edge2
edge3
edge4
edge5
edge6
edge7
edge8
edge9
edge10
edge11
edge12
edge13
edge14
edge15
edge16
edge17
edge18
edge19
edge20
edge21
edge22
edge23
edge24
edge25
edge26
edge27
edge28
edge29
edge30
edge31
edge32
edge33
edge34
edge35
edge36
edge37
edge38
edge39
edge40
edge41
edge42
edge43
edge44
edge45
edge46
edge47
edge48
edge49
edge50
edge51
edge52
edge53
edge54
edge55
edge56
edge57
edge58
edge59
edge60
edge61
edge62
edge63
edge64
edge65
edge66
edge67
edge68
edge69
edge70
edge71
edge72
edge73
edge74
edge75
edge76
edge77
edge78
edge79
edge80
edge81
edge82
edge83
edge84
} def
/drawgraph { gsave
boxchunk0
1 setlinewidth
1 setlinecap
0 setgray
edgechunk0
0 setgray
/Helvetica findfont 10 scalefont setfont
textchunk0
/Helvetica-Oblique findfont 8 scalefont setfont
secondtextchunk0
grestore } def
leftmargin botmargin translate
pagewidth dup maximum-x max div pageheight dup 1240 max div min dup scale
drawgraph showpage end

%%EndDocument
 GE /Times-Bold SF
16402 74933 MT
(Figure 6-1:)SH
/Times-Roman SF
21651 XM
(Map of the SURGE grammar using the def-alt syntax)SH
46800 65456 50 6120 76256 BX BX1
ES
%%Page: 33 34
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(33)SH
16 /Times-Bold AF
8280 11872 MT
(7. Defining Input for Regression Testing: The Test Facility)SH
10 /Times-Roman AF
10080 13249 MT
(When developing)
172 W( a grammar, it is important to check that existing input configurations remain compatible)173 W
8280 14626 MT
(whenever the grammar is changed.  To this end, FUF includes a regression testing mechanism an a)
3 W( test system.  This)2 W
8280 16003 MT
(system allows the grammar developer to define a set of test cases, which are pairs of input FDs together with the)89 W
8280 17380 MT
(sentence they)
21 W( are expected to produce.  The test system allows to run a series of tests and checks whether the output)20 W
8280 18757 MT
(is equal to the expected output, it can)
38 W( in addition measure the time spent on each test.  A final advantage of the test)39 W
8280 20134 MT
(facility is that test definitions can use the :& notation and therefore big FD specifications can be written modularly.)SH
10080 22613 MT
(The following functions are defined to take advantage of this facility:)SH
9 /Courier AF
10839 24298 MT
(\050def-test name result input\051)SH
10839 25246 MT
(;; Define a named test: test on input should produce result.)SH
10839 26194 MT
(;; If result is a list, testing result can produce any one of the elements)SH
10839 27142 MT
(;; of result.)SH
10839 29038 MT
(\050get-test name\051)SH
10839 29986 MT
(;; Return the input for named test.)SH
10839 31882 MT
(\050clear-tests\051)SH
10839 32830 MT
(;; Remove all test definitions.)SH
10839 34726 MT
(\050test &key from to item timed\051)SH
10839 35674 MT
(;; Evaluate a sequence of tests.)SH
10839 36622 MT
(;; A test calls uni-string on input and compares the result with the test's)SH
10839 37570 MT
(;; result.)SH
10839 38518 MT
(;; If timed is non-nil, time all tests.)SH
10839 39466 MT
(;; from and to identify first and last tests in order in which they have)SH
10839 40414 MT
(;; been defined.)SH
10839 41362 MT
(;; item: identify tests explicitly - either one name or a list of names.)SH
10839 43258 MT
(Examples:)SH
10839 44206 MT
(\050def-test :from 't1 :to 't212\051)SH
10839 45154 MT
(\050def-test :item '\050t6 t9 t45\051 :timed t\051)SH
10839 46102 MT
(\050def-test :item 't6\051)SH
42480 23350 50 10440 46687 BX BX1
10 /Times-Roman AF
10080 49166 MT
(When running the tests, the following output is produced:)SH
ES
%%Page: 34 35
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(34)SH
9 /Courier AF
8679 11761 MT
(FUG5 12> \050test :item '\050t1 t14 t212\051\051)SH
8679 13657 MT
(====================)SH
8679 14605 MT
(T1 --> "This car is expensive.")SH
8679 16501 MT
([Used 117 backtracking points - 26 wrong branches - 15 undos])SH
8679 18397 MT
([Used 119 backtracking points - 26 wrong branches - 15 undos])SH
8679 19345 MT
(OK)SH
8679 20293 MT
(====================)SH
8679 22189 MT
(T14 --> "For her to do it.")SH
8679 24085 MT
([Used 152 backtracking points - 36 wrong branches - 13 undos])SH
8679 25981 MT
([Used 158 backtracking points - 36 wrong branches - 13 undos])SH
8679 26929 MT
(OK)SH
8679 27877 MT
(====================)SH
8679 29773 MT
(T212 --> "What.")SH
8679 31669 MT
([Used 39 backtracking points - 12 wrong branches - 4 undos])SH
8679 33565 MT
([Used 40 backtracking points - 12 wrong branches - 4 undos])SH
8679 34513 MT
(OK)SH
8679 35461 MT
(====================)SH
8679 37357 MT
(3 tests run - 3 correct.)SH
42480 27142 50 8280 37942 BX BX1
10 /Times-Roman AF
7920 40421 MT
(If a test does not succeed, the following output is produced:)SH
9 /Courier AF
8679 42106 MT
(FUG5 14> \050test :item 't1bis\051)SH
8679 44002 MT
(====================)SH
8679 44950 MT
(T1BIS --> "This car is not expensive.")SH
8679 46846 MT
([Used 117 backtracking points - 26 wrong branches - 15 undos])SH
8679 48742 MT
([Used 119 backtracking points - 26 wrong branches - 15 undos])SH
8679 49690 MT
(Expected "This car is not expensive.")SH
8679 50638 MT
(Instead "This)
540 W( car is expensive.")SH
8679 51586 MT
(====================)SH
8679 53482 MT
(1 test run - 0 correct.)SH
8679 54430 MT
(The following tests are incorrect: \050T1BIS\051)SH
42480 13870 50 8280 55015 BX BX1
ES
%%Page: 35 36
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(35)SH
16 /Times-Bold AF
8280 11872 MT
(8. Using Lists in FDs)SH
10 /Times-Roman AF
10080 13249 MT
(Lists of objects are not a primitive type in FUF.  The)
84 W( reason is that a list of FDs is not a legal FD.  Lists are)83 W
8280 14626 MT
(however very useful in grammatical description, when dealing with)
89 W( subcategorization or conjunction.  FUF there-)90 W
8280 16003 MT
(fore contains some built-in support for the expression)
93 W( and manipulation of lists.  The issue of list manipulation is)92 W
8280 17380 MT
(further developed in Appendix III, where list processing is used as an example showing)
116 W( the expressive power of)117 W
8280 18757 MT
(FUF as a programming language.)SH
10080 21236 MT
(This chapter explains how and when to use lists in FUF and describes the FUF facilities easing the use of lists.)SH
14 /Times-Bold AF
8280 25054 MT
(8.1. Encoding Lists as FDs)SH
10 /Times-Roman AF
10080 26431 MT
(A list of FD l = \050fd1, fd2 ... fdn\051 is not a legal FD according to the definition of FDs.  The main reason)
1 W( why such)SH
8280 27808 MT
(a form is not accepted)
16 W( in the syntax of FUF is that defining what should be the unification of two lists \050fd11, fd12 ...)17 W
8280 29185 MT
(fd1n\051 and \050fd21, fd22, ... fd2p\051 is not clear \050should it be the union of)
47 W( the 2 lists, its intersection using unification as)46 W
8280 30562 MT
(an equality test, the pairwise unification of the elements one by one, or the)
10 W( product of the unifications, what happens)11 W
8280 31939 MT
(when one unification of the)
108 W( elements fails...\051 and it is not clear how to extend the notion of path to allow access)107 W
8280 33316 MT
(within a list.)SH
10080 35795 MT
(Instead of)
138 W( adding lists as a primitive type of FDs, it is possible to encode lists as regular FDs.  This is the)139 W
8 SS 
23278 36827 MT
(8)SH
10 SS 
8280 37172 MT
(approach used and supported in FUF.)SH
10080 39651 MT
(Quite simply, lists are represented as FDs with two features, CAR and CDR \050with names ala Lisp\051.)SH
9 /Courier AF
10839 41336 MT
(The list \050a b c\051 is represented by the FD:)SH
10839 43232 MT
(\050\050car a\051)SH
11379 44180 MT
(\050cdr \050\050car b\051)SH
14619 45128 MT
(\050cdr \050\050car c\051)SH
17859 46076 MT
(\050cdr none\051\051\051\051\051\051)SH
10839 47972 MT
(The list \050a \050b c\051\051 is represented by the FD:)SH
10839 49868 MT
(\050\050car a\051)SH
11379 50816 MT
(\050cdr \050\050car \050\050car b\051)SH
17859 51764 MT
(\050cdr \050\050car c\051)SH
21099 52712 MT
(\050cdr none\051\051\051\051\051)SH
14619 53660 MT
(\050cdr none\051\051\051\051)SH
42480 13870 50 10440 54245 BX BX1
10 /Times-Roman AF
10080 56724 MT
(When using this encoding for lists,)
137 W( the path notation can be used to access any element of the list \050using a)138 W
8280 58101 MT
(sequence of car and)
61 W( cdr\051, and the unification method to use when dealing with lists can be defined declaratively in)60 W
8280 59478 MT
(the grammar.  FUF includes tools)
233 W( to make the reference to list elements and the development of list-related)234 W
8280 60855 MT
(grammars easier.)SH
10800 50 8280 69428 UL
6 SS 
9080 70767 MT
(8)SH
8 SS 
9380 71076 MT
(Note that it is also possible to define lists as procedural types, with any desired specialized)
53 W( unification procedure.  But in that case, lists are)52 W
8280 72000 MT
(used as black boxes into which path expressions cannot enter.)SH
ES
%%Page: 36 37
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(36)SH
14 /Times-Bold AF
6120 11738 MT
(8.2. When to Use Lists: an Example)SH
10 /Times-Roman AF
7920 13115 MT
(Lists should be used whenever you are thinking of using feature names of the)
87 W( form att1, att2 -)86 W
/Times-Italic SF
47225 XM
(i.e.)SH
/Times-Roman SF
(, whenever)86 W
6120 14492 MT
(you want to go around the limitation of FDs that only one attribute with a given name exist by)
42 W( adding subscripts to)43 W
6120 15869 MT
(the attribute names.  Natural candidates for the use of lists are conjunction and the semantic encoding)
170 W( of non-)169 W
6120 17246 MT
(singular objects.)SH
7920 19725 MT
(In the following example, lists are used to encode the logical form of a)
SH( sentence.  This encoding encodes in FUF)1 W
6120 21102 MT
(a KL-ONE type of knowledge representation based on entities and binary relations between these entities.)SH
9 /Courier AF
8679 22787 MT
(;; An FD used in Jacques Robin's Basketball Report Writing System)SH
8679 23735 MT
(;; This is a list of entities and a list of relations in which they)SH
8679 24683 MT
(;; participate.)SH
/Times-Roman SF
8679 26579 MT
(Semantic content of the sentence:)SH
/Courier-Oblique SF
8679 27527 MT
(Malone scored 28 points and John Stockton added 27 points and 24 assists.)SH
/Courier SF
8679 29423 MT
(statistics\050malone, 28points\051)SH
8679 30371 MT
(statistics\050stockton, 27points\051)SH
8679 31319 MT
(statistics\050stockton, 24assists\051)SH
/Times-Roman SF
8679 33215 MT
(FD notation:)SH
/Courier SF
9219 35111 MT
(\050setf input)SH
12459 36059 MT
('\050\050cat semantic\051)SH
13539 37955 MT
(;; note the use of the ~ notation to encode a list of FDs.)SH
13539 38903 MT
(\050ents ~\050\050\050concept player\051 \050name malone\051\051)SH
17859 39851 MT
(\050\050concept stat\051 \050value 28pts\051\051)SH
17859 40799 MT
(\050\050concept player\051 \050name stockton\051\051)SH
17859 41747 MT
(\050\050concept stat\051 \050value 27pts\051\051)SH
17859 42695 MT
(\050\050concept stat\051 \050value 24asts\051\051\051\051)SH
13539 44591 MT
(;; Note the usage of ^n~ to escape to the beginning of the)SH
13539 45539 MT
(;; containing list and ~n to go down nth elt of a list.)SH
13539 46487 MT
(;; ^2~ means "go up 2 levels and then to the beginning of the list")SH
13539 47435 MT
(\050rels ~\050\050\050concept stat-rel\051)SH
18399 48383 MT
(\050args \050\050carrier {^2~ ents ~1}\051)SH
22179 49331 MT
(\050stat {^2~ ents ~2}\051\051\051\051)SH
17859 50279 MT
(\050\050concept stat-rel\051)SH
18399 51227 MT
(\050args \050\050carrier {^2~ ents ~3}\051)SH
22179 52175 MT
(\050stat {^2~ ents ~4}\051\051\051\051)SH
17859 53123 MT
(\050\050concept stat-rel\051)SH
18399 54071 MT
(\050args \050\050carrier {^2~ ents ~3}\051)SH
22179 55019 MT
(\050stat {^2~ ents ~4}\051\051\051\051\051\051\051\051\051)SH
42480 34540 50 8280 56366 BX BX1
10 /Times-Roman AF
7920 58845 MT
(The notation ~ and ^n~ are detailed below.  They are used to ease the writing of lists)
8 W( as FDs and to traverse lists)7 W
6120 60222 MT
(with path expressions.  In this example, note how the lists ents \050for)
65 W( entities\051 and rels \050for relations\051 are encoded as)66 W
6120 61599 MT
(regular FDs, and how parts of the ents list are used in the rels FD \050for example, the first element of the rels list)116 W
6120 62976 MT
(contains two paths to the first and second element of the ents list\051.  This form of structure sharing between parts of)49 W
6120 64353 MT
(lists would not be possible using a ``black box primitive'' list encoding.)SH
ES
%%Page: 37 38
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(37)SH
14 /Times-Bold AF
8280 11738 MT
(8.3. Typical List Traversal in FUF)SH
10 /Times-Roman AF
10080 13115 MT
(Once lists are encoded as FDs, grammars need to be defined to traverse)
5 W( the lists and unify them according to the)4 W
8280 14492 MT
(specific semantic of each list.)
29 W( Lists)
310 W( are traversed by recursive grammars, using the constituent traversal mechanism)30 W
8280 15869 MT
(implemented by cset.  The following)
47 W( example shows how to use the input shown above to build a clause out of the)46 W
8280 17246 MT
(semantic input, by composing elements of the appropriate type.  The grammar contains the categories)56 W
/Courier SF
50030 XM
(semantic)SH
/Times-Roman SF
(,)SH
/Courier SF
8280 18623 MT
(find1)SH
/Times-Roman SF
11567 XM
(and)SH
/Courier SF
13298 XM
(find2)SH
/Times-Roman SF
(. The)
324 W( easiest way to explain how this function)
37 W( works is by taking a procedural interpretation of)36 W
8280 20000 MT
(the FUF flow of control.  This procedural interpretation is explained in detail in Appendix III.)
29 W( A)
309 W( constituent can be)30 W
8280 21377 MT
(viewed as a)
70 W( procedure, that receives a certain set of parameters and computes new return values.  In this example,)69 W
8280 22754 MT
(the constituent)16 W
/Courier SF
14423 XM
(semantic)SH
/Times-Roman SF
19489 XM
(receives as input the features)16 W
/Courier SF
31371 XM
(ents)SH
/Times-Roman SF
34037 XM
(and)SH
/Courier SF
35747 XM
(rels)SH
/Times-Roman SF
38413 XM
(which as shown in the FD)16 W
/Courier SF
49175 XM
(input)SH
/Times-Roman SF
52442 XM
(above.)SH
8280 24131 MT
(It computes a new feature)71 W
/Courier SF
19215 XM
(clause)SH
/Times-Roman SF
23136 XM
(as output, which is a linguistic)
71 W( constituent.  To this end, it also uses two local)70 W
8280 25508 MT
(variables stored in the features)18 W
/Courier SF
20839 XM
(ent1)SH
/Times-Roman SF
23507 XM
(and)SH
/Courier SF
25219 XM
(rel1)SH
/Times-Roman SF
(. All)
286 W( in all, the function of)
18 W( this category is to map a description of a)19 W
8280 26885 MT
(semantic content into a linguistic clause description.)SH
10080 29364 MT
(The grammar also)
161 W( implements two other categories,)160 W
/Courier SF
32254 XM
(find1)SH
/Times-Roman SF
35664 XM
(and)SH
/Courier SF
37518 XM
(find2)SH
/Times-Roman SF
(, which are the ones related to list)160 W
8280 30741 MT
(processing. These)
320 W( categories can be interpreted as procedures searching a list)
35 W( for one or two matches.  The simpler)36 W
8280 32118 MT
(one is)92 W
/Courier SF
11075 XM
(find1)SH
/Times-Roman SF
(.)SH
/Courier SF
15009 XM
(Find1)SH
/Times-Roman SF
18351 XM
(receives two input parameters)92 W
/Courier SF
30937 XM
(in1)SH
/Times-Roman SF
33078 XM
(and)SH
/Courier SF
34863 XM
(1st-match)SH
/Times-Roman SF
40604 XM
(which are a list of FDs and an FD.)91 W
8280 33495 MT
(The category searches the list for the first-match in the list which can)
135 W( be unified with the feature)136 W
/Courier SF
49430 XM
(1st-match)SH
/Times-Roman SF
(.)SH
8280 34872 MT
(When it is found, the feature)38 W
/Courier SF
20200 XM
(1st-match)SH
/Times-Roman SF
25888 XM
(and the element in the)
38 W( list are unified \050conflated\051.  The category)37 W
/Courier SF
52080 XM
(find2)SH
/Times-Roman SF
8280 36249 MT
(operates the same way but for two features)SH
/Courier SF
25664 XM
(1st-matchA)SH
/Times-Roman SF
31914 XM
(and)SH
/Courier SF
33608 XM
(1st-matchB)SH
/Times-Roman SF
(.)SH
ES
%%Page: 38 39
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(38)SH
9 /Courier AF
8679 11761 MT
(;; A grammar to find matching elements in the list of semantic binary)SH
8679 12709 MT
(;; relations and compose the matched elements into a linguistic clause)SH
8679 13657 MT
(;; structure.)SH
8679 14605 MT
(\050def-grammar rules \050\051)SH
9219 15553 MT
(\050clear-bk-class\051)SH
9219 16501 MT
('\050\050ALT)SH
10839 17449 MT
(\050\050\050cat semantic\051)SH
11919 18397 MT
(\050ent1 \050\050cat find2\051)SH
15699 19345 MT
(\050in2 {^2 ents}\051)SH
15699 20293 MT
(\0501st-matchA \050\050concept player\051 \050name stockton\051\051\051)SH
15699 21241 MT
(\0501st-matchB \050\050concept stat\051\051\051\051\051)SH
11919 22189 MT
(\050rel1 \050\050cat find1\051)SH
15699 23137 MT
(\050in1 {^2 rels}\051)SH
15699 24085 MT
(\0501st-match \050\050concept stat-rel\051)SH
22179 25033 MT
(\050args \050\050carrier {^4 ent1 1st-matchA}\051)SH
25959 25981 MT
(\050stat {^4 ent1 1st-matchB}\051\051\051\051\051\051\051)SH
11919 26929 MT
(\050cset \050\050= ent1 rel1\051\051\051)SH
11919 27877 MT
(\050clause \050\050cat clause\051)SH
16779 28825 MT
(\050process stat\051)SH
16779 29773 MT
(\050args {^2 rel1 1st-match args}\051\051\051\051)SH
11379 31669 MT
(;; LIST PROCESSING CONSTITUENTS:)SH
11379 32617 MT
(;; Find one element in a list in1 that matches 1st-match and unifies)SH
11379 33565 MT
(;; it with 1st-match.)SH
11379 34513 MT
(;; If no element in list in1, fail)SH
11379 35461 MT
(;; If first element matches 1st-match, unify and stop recursion)SH
11379 36409 MT
(;; Else recurse on rest of in1.)SH
11379 37357 MT
(;; 1st-match is always linked to the top-level 1st-match feature in)SH
11379 38305 MT
(;; the embedded structure of recursive calls.)SH
11379 39253 MT
(\050\050cat find1\051)SH
11919 40201 MT
(\050fset \050in1 1st-match rest cat cset\051\051)SH
11919 41149 MT
(\050ALT find1 \050\050\0501st-match {^ in1 car}\051)SH
18939 42097 MT
(\050cset \050\051\051\051)SH
18399 43045 MT
(\050\050rest \050\050cat find1\051)SH
22719 43993 MT
(\0501st-match {^2 1st-match}\051)SH
22719 44941 MT
(\050in1 {^2 in1 cdr}\051\051\051)SH
18939 45889 MT
(\050cset \050\050= rest\051\051\051\051\051\051\051)SH
11379 47785 MT
(;; Find 2 elements in a list in2 that match 1st-matchA and 1st-matchB)SH
11379 48733 MT
(;; and unify them.)SH
11379 49681 MT
(\050\050cat find2\051)SH
11919 50629 MT
(\050fset \050in2 1st-matchA 1st-matchB restA restB cat cset\051\051)SH
11919 51577 MT
(\050cset \050\050= restA restB\051\051\051)SH
11919 52525 MT
(\050restA \050\050cat find1\051)SH
16239 53473 MT
(\0501st-match {^2 1st-matchA}\051)SH
16239 54421 MT
(\050in1 {^2 in2}\051\051\051)SH
11919 55369 MT
(\050restB \050\050cat find1\051)SH
16239 56317 MT
(\0501st-match {^2 1st-matchB}\051)SH
16239 57265 MT
(\050in1 {^2 in2}\051\051\051\051\051\051\051\051)SH
8679 59161 MT
(;; To test:)SH
8679 60109 MT
(;; \050setq output \050uni-fd \050input\051 \050rules\051\051\051)SH
8679 61057 MT
(;; \050top-gdp output {clause args carrier}\051)SH
8679 62005 MT
(;; \050top-gdp output {clause args stat}\051)SH
42480 51790 50 8280 62590 BX BX1
10 /Times-Roman AF
7920 65069 MT
(The list traversal is implemented in the category)170 W
/Courier SF
28833 XM
(find1)SH
/Times-Roman SF
(. The)
590 W( grammar for)170 W
/Courier SF
40514 XM
(find1)SH
/Times-Roman SF
43935 XM
(contains a typical list)171 W
6120 66446 MT
(recursion, similar to the following Lisp function:)SH
9 /Courier AF
8679 68131 MT
(\050defun find1 \050in1 match1\051)SH
9759 69079 MT
(\050if \050equal match1 \050car in1\051\051)SH
11919 70027 MT
(match1)SH
11919 70975 MT
(\050find1 \050cdr in1\051 match1\051\051\051)SH
42480 4390 50 8280 71560 BX BX1
ES
%%Page: 39 40
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(39)SH
10080 11486 MT
(Naturally, since the grammar is written in FUF it)
40 W( performs differently, but the structure is similar.  The)39 W
/Courier SF
52202 XM
(if)SH
/Times-Roman SF
53691 XM
(test)SH
8280 12863 MT
(is implemented as an)114 W
/Courier SF
17402 XM
(alt)SH
/Times-Roman SF
(, and the recursive call is)
114 W( implemented by a cset expansion to the sub-constituent rest.)115 W
8280 14240 MT
(This structure is typical of the FUF list traversal categories and can be found in)
160 W( a similar form in the SURGE)159 W
8280 15617 MT
(segment dealing with conjunctions.)SH
14 /Times-Bold AF
8280 19435 MT
(8.4. Path Notations for Lists: ~ ^~ and ~n)SH
10 /Times-Roman AF
10080 20812 MT
(To make the use of lists more convenient,)
27 W( three special notations have been defined in FUF: ~, ^~ and ~n.  The)28 W
8280 22189 MT
(macro-character ~ is used to define lists of FDs as an FD with features car and)
148 W( cdr.  It performs the following)147 W
8280 23566 MT
(transformation:)SH
9 /Courier AF
10839 25251 MT
(~\050fd1 fd2 ... fdn\051  <==> \050\050car fd1\051)SH
24879 26199 MT
(\050cdr \050\050car fd2\051)SH
28119 27147 MT
(\050cdr ...)SH
33519 28095 MT
(\050\050car fdn\051)SH
34059 29043 MT
(\050cdr none\051\051\051\051\051\051)SH
42480 5338 50 10440 29628 BX BX1
10 /Times-Roman AF
10080 32107 MT
(The two other notations are used within path expressions \050within curly braces\051.)
106 W( ~n)
463 W( is used to access the nth)107 W
8280 33484 MT
(element within)
18 W( a list.  It is expanded to the appropriate sequence of cdrs and car.  The notation ^~ is used to go back)17 W
8280 34861 MT
(up to the beginning of a list from within an element of a list.)
50 W( This)
352 W( is expanded at unification-time since it depends)51 W
8280 36238 MT
(on the level of embedding of the element.  Therefore ^~)
11 W( actually increases the expressive power of path expressions.)10 W
8280 37615 MT
(If ^~ is used within a feature which is not a list element \050which means that it does not occur)
54 W( under)55 W
/Courier SF
48837 XM
(car)SH
/Times-Roman SF
(\051, then it is)55 W
8280 38992 MT
(equivalent to the simple ^)
56 W( \050which means that it does go up one level anyway\051.  The shorthand notation ^n~ is used)55 W
8280 40369 MT
(for ^n ^~ that is, go up first n levels and then to the beginning of the embedding list.  These notations)
25 W( are shown for)26 W
8280 41746 MT
(example in the input example above.)SH
ES
%%Page: 40 41
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(40)SH
ES
%%Page: 41 42
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(41)SH
16 /Times-Bold AF
8280 11872 MT
(9. Types in Unification)SH
10 /Times-Roman AF
10080 13249 MT
(FUF implements three notions of types:)SH
/Symbol SF
10070 14702 MT
(\267)SH
/Times-Roman SF
10780 XM
(Typed features)SH
/Symbol SF
10070 16460 MT
(\267)SH
/Times-Roman SF
10780 XM
(Procedural types with user-defined unification methods)SH
/Symbol SF
10070 18218 MT
(\267)SH
/Times-Roman SF
10780 XM
(Constituent types with the)SH
8 SS 
21503 XM
(FSET)SH
10 SS 
23621 XM
(special feature)SH
10080 20697 MT
(The idea of using types in unification is relatively recent.  So we first motivate the use)
51 W( of types in FUGs.  The)50 W
8280 22074 MT
(following sections describe each one of the three methods of typing available.)SH
14 /Times-Bold AF
8280 25892 MT
(9.1. Why Types?)SH
12 SS 
8280 29576 MT
(9.1.1. Typed features)SH
8280 32540 MT
(9.1.1.1. A Limitation of FUGs: No Structure over the Set of Values)SH
10 /Times-Roman AF
10080 33917 MT
(To formally define a grammar, we define)54 W
/Times-Italic SF
27232 XM
(L)SH
/Times-Roman SF
28093 XM
(as a set of labels or attribute names and)55 W
/Times-Italic SF
44557 XM
(C)SH
/Times-Roman SF
45529 XM
(as a set of constants, or)55 W
8 SS 
33645 34949 MT
(*)SH
10 SS 
8280 35294 MT
(simple atomic values. A string of labels)
1 W( \050that is an element of)SH
/Times-Italic SF
33089 XM
(L)SH
/Times-Roman SF
34045 XM
(\051 is a path, and is noted {l)SH
44702 XM
(...l)SH
46130 XM
(}. A)
250 W( grammar defines)SH
8 SS 
44302 35639 MT
(1)SH
45730 XM
(n)SH
23127 36363 MT
(*)SH
10 SS 
8280 36708 MT
(a domain of admissible paths,)SH
/Symbol SF
20446 XM
(D \314)150 W
/Times-Italic SF
22571 XM
(L)SH
/Times-Roman SF
23527 XM
(.)SH
/Symbol SF
24027 XM
(D)SH
/Times-Roman SF
24889 XM
(defines the skeleton of well-formed FDs.)SH
10080 39187 MT
(In functional unification, the set of constants)147 W
/Times-Italic SF
29218 XM
(C)SH
/Times-Roman SF
30282 XM
(has no structure.  It)
147 W( is a flat collection of symbols with no)148 W
8280 40564 MT
(relations between each other.  All constraints among symbols must)
123 W( be expressed in the grammar.  In linguistics,)122 W
8280 41941 MT
(however, grammars assume a rich structure between)
109 W( properties:  some groups of features are mutually exclusive;)110 W
8280 43318 MT
(some features are only defined in the context of other features.)SH
9 /Courier AF
20019 45003 MT
(| Question)SH
20019 45951 MT
(| Personal)SH
13539 46899 MT
(| Pronoun --|)SH
13539 47847 MT
(| |)
5400 W( Demonstrative)SH
13539 48795 MT
(| |)
5400 W( Quantified)SH
10839 49743 MT
(Noun |)SH
13539 50691 MT
(| Proper)SH
13539 51639 MT
(| |)
5400 W( Count)SH
13539 52587 MT
(| Common ---|)SH
20019 53535 MT
(| Mass)SH
42480 10078 50 10440 54120 BX BX1
10 /Times-Roman AF
10080 56599 MT
(Let's consider a fragment of)
29 W( grammar describing noun-phrases \050NPs\051 using the systemic notation given in)
28 W( [31].)SH
8280 57976 MT
(Systemic networks, such as this one, encode the choices that need to be made to)
10 W( produce a complex linguistic entity.)11 W
8280 59353 MT
(They indicate how features can be combined or whether features are inconsistent)
136 W( with other combinations.  The)135 W
8280 60730 MT
(configuration illustrated by this fragment is typical, and occurs very often in grammars.  The schema indicates that a)14 W
8280 62107 MT
(noun can be either)
183 W( a pronoun, a proper noun or a common noun.  Note that these three features are mutually)182 W
8280 63484 MT
(exclusive. Note also that the choice between the features)265 W
/Courier SF
33548 XM
({question, personal, demonstrative,)266 W
8280 64861 MT
(quantified})SH
/Times-Roman SF
15181 XM
(is relevant only when the feature pronoun is selected.  This system)
51 W( therefore forbids combinations)50 W
8280 66238 MT
(of the type)SH
/Courier SF
12807 XM
({pronoun, proper})SH
/Times-Roman SF
23257 XM
(and)SH
/Courier SF
24951 XM
({common, personal})SH
/Times-Roman SF
(.)SH
10080 68717 MT
(The traditional technique for expressing these constraints in a FUG is to define a label for each)
96 W( non terminal)97 W
8280 70094 MT
(symbol in the system.  The resulting grammar is as follows:)SH
ES
%%Page: 42 43
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(42)SH
9 /Courier AF
8679 11761 MT
(\050\050cat noun\051)SH
9219 12709 MT
(\050alt \050\050\050noun pronoun\051)SH
12999 13657 MT
(\050pronoun)SH
13539 14605 MT
(\050\050alt \050question personal demonstrative quantified\051\051\051\051\051)SH
12459 15553 MT
(\050\050noun proper\051\051)SH
12459 16501 MT
(\050\050noun common\051)SH
12999 17449 MT
(\050common \050\050alt \050count mass\051\051\051\051\051\051\051\051)SH
42480 7234 50 8280 18034 BX BX1
10 /Times-Roman AF
7920 20513 MT
(This grammar is, however, incorrect, as it allows combinations of the type)88 W
/Courier SF
38944 XM
(\050\050noun proper\051 \050pronoun)88 W
6120 21890 MT
(question\051\051)SH
/Times-Roman SF
12512 XM
(or even worse)142 W
/Courier SF
18797 XM
(\050\050noun proper\051 \050pronoun)
142 W( zouzou\051\051)143 W
/Times-Roman SF
(. Because)
536 W( unification is similar to)143 W
6120 23267 MT
(union of features sets, a feature)91 W
/Courier SF
19412 XM
(\050pronoun question\051)91 W
/Times-Roman SF
30644 XM
(in the input would simply get added to the)
91 W( output.  In)90 W
6120 24644 MT
(order to enforce the correct constraints, it is therefore necessary to use the)
145 W( meta-FD)146 W
8 SS 
41726 XM
(NONE)SH
10 SS 
44741 XM
(\050which prevents the)146 W
6120 26021 MT
(addition of unwanted features\051 as shown below:)SH
9 /Courier AF
8679 27706 MT
(\050\050alt \050\050\050noun pronoun\051)SH
12999 28654 MT
(\050common)SH
7 SS 
17319 XM
(NONE)SH
9 SS 
(\051)SH
12999 29602 MT
(\050pronoun)SH
13539 30550 MT
(\050\050alt \050question personal demonstrative quantified\051\051\051\051\051)SH
12459 31498 MT
(\050\050noun proper\051 \050pronoun)SH
7 SS 
25419 XM
(NONE)SH
9 SS 
(\051 \050common)SH
7 SS 
32499 XM
(NONE)SH
9 SS 
(\051\051)SH
12459 32446 MT
(\050\050noun common\051)SH
12999 33394 MT
(\050pronoun)SH
7 SS 
17859 XM
(NONE)SH
9 SS 
(\051)SH
12999 34342 MT
(\050common \050\050alt \050count mass\051\051\051\051\051\051\051\051)SH
/Times-Roman SF
8679 36238 MT
(The input FD describing a personal pronoun is then:)SH
/Courier SF
8679 37186 MT
(\050\050cat noun\051)SH
9219 38134 MT
(\050noun pronoun\051)SH
9219 39082 MT
(\050pronoun personal\051\051)SH
42480 12922 50 8280 39667 BX BX1
10 /Times-Roman AF
7920 42146 MT
(There are two problems with this corrected FUG implementation. First,)
25 W( both the input FD describing a pronoun)24 W
6120 43523 MT
(and the grammar are redundant and longer than needed.  Second, the branches of the alternations in the grammar)
12 W( are)13 W
6120 44900 MT
(interdependent: you need to know in the branch for)
53 W( pronouns that common nouns can be sub-categorized and what)52 W
6120 46277 MT
(the other classes of nouns are.)
20 W( This)
291 W( interdependence prevents any modularity: if a branch is added to an alternation,)21 W
6120 47654 MT
(all other)
40 W( branches need to be modified.  It is also an inefficient mechanism as the number of pairs processed during)39 W
8 /Times-Italic AF
13325 48686 MT
(d)SH
10 /Times-Roman AF
6120 49031 MT
(unification is O)
150 0 WX(\050)SH
/Times-Italic SF
(n)SH
/Times-Roman SF
13725 XM
(\051 for a taxonomy of depth)SH
/Times-Italic SF
24223 XM
(d)SH
/Times-Roman SF
24973 XM
(with an average of)SH
/Times-Italic SF
32637 XM
(n)SH
/Times-Roman SF
33387 XM
(branches at each level.)SH
12 /Times-Bold AF
6120 51995 MT
(9.1.1.2. Introducing Typed Features)SH
10 /Times-Roman AF
7920 53372 MT
(The problem thus is that FUGs do not gracefully implement)
78 W( mutual exclusion and hierarchical relations.  The)79 W
6120 54749 MT
(system of nouns is a typical taxonomic relation.  The deeper the taxonomy, the more problems we have)
6 W( expressing it)5 W
6120 56126 MT
(using traditional FUGs.)SH
7920 58605 MT
(We propose extracting hierarchical information from the FUG and)
SH( expressing it as a constraint over the symbols)1 W
6120 59982 MT
(used. The)
267 W( solution is to define a subsumption relation over the set of constants)8 W
/Times-Italic SF
38072 XM
(C)SH
/Times-Roman SF
(. One)
266 W( way to define this order is to)8 W
8 SS 
24202 61014 MT
(9)SH
10 SS 
6120 61359 MT
(define types of symbols, as illustrated below:)SH
10800 50 6120 70352 UL
6 SS 
6920 71691 MT
(9)SH
8 SS 
7220 72000 MT
(This notion of typing is similar to the)SH
/Symbol SF
19348 XM
(Y)SH
/Times-Roman SF
(-terms defined in [1].)SH
ES
%%Page: 43 44
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(43)SH
9 /Courier AF
10839 11761 MT
(\050define-feature-type noun \050pronoun proper common\051\051)SH
10839 12709 MT
(\050define-feature-type pronoun \050personal-pronoun question-pronoun)SH
27039 13657 MT
(demonstrative-pronoun quantified-pronoun\051\051)SH
10839 14605 MT
(\050define-feature-type common \050count-noun mass-noun\051\051)SH
/Times-Roman SF
10839 16501 MT
(The grammar becomes:)SH
/Courier SF
10839 17449 MT
(\050\050cat noun\051)SH
11379 18397 MT
(\050alt \050\050\050cat pronoun\051)SH
15159 19345 MT
(\050cat \050\050alt \050question-pronoun personal-pronoun)SH
21639 20293 MT
(demonstrative-pronoun quantified-pronoun\051\051\051\051\051)SH
14619 21241 MT
(\050\050cat proper\051\051)SH
14619 22189 MT
(\050\050cat common\051)SH
15159 23137 MT
(\050cat \050\050alt \050count-noun mass-noun\051\051\051\051\051\051\051\051)SH
/Times-Roman SF
10839 25033 MT
(And the input)SH
/Courier SF
(: \050\050cat personal-pronoun\051\051)SH
42480 14829 50 10440 25629 BX BX1
10 /Times-Roman AF
10080 28108 MT
(The syntax of the new function)34 W
/Courier SF
23004 XM
(define-feature-type)SH
/Times-Roman SF
34688 XM
(will be presented in section 9.2.  Once types and a)34 W
8280 29485 MT
(subsumption relation are defined, the unification algorithm must be modified.  The atoms)47 W
/Times-Italic SF
44916 XM
(X)SH
/Times-Roman SF
45824 XM
(and)SH
/Times-Italic SF
47564 XM
(Y)SH
/Times-Roman SF
48416 XM
(can be unified if)46 W
8280 30862 MT
(they are equal OR if one subsumes the other.  The result is the most specific of)SH
/Times-Italic SF
40053 XM
(X)SH
/Times-Roman SF
40914 XM
(and)SH
/Times-Italic SF
42608 XM
(Y)SH
/Times-Roman SF
(.)SH
10080 33341 MT
(With this new definition)
76 W( of unification, taking advantage of the structure over constants, the grammar and the)77 W
8280 34718 MT
(input become much smaller and more readable.  There is no need to)
173 W( introduce artificial labels.  The input FD)172 W
8280 36095 MT
(describing a pronoun is a simple)209 W
/Courier SF
22755 XM
(\050\050cat personal-pronoun\051\051)209 W
/Times-Roman SF
37823 XM
(instead of the redundant chain down the)210 W
8280 37472 MT
(hierarchy)SH
/Courier SF
12371 XM
(\050\050cat noun\051 \050noun pronoun\051 \050pronoun personal\051\051)65 W
/Times-Roman SF
(. Because)
380 W( values can now share the)65 W
8 SS 
41487 38504 MT
(10)SH
10 SS 
8280 38849 MT
(same label)44 W
8 SS 
12867 XM
(CAT)SH
10 SS 
(, mutual exclusion is enforced without adding any pair)44 W
/Courier SF
36917 XM
([l:)SH
8 SS 
(NONE)SH
10 SS 
(])SH
/Times-Roman SF
(.)SH
42875 XM
(Note that it)
44 W( is now possible to)43 W
8280 40226 MT
(have several pairs)21 W
/Courier SF
15757 XM
([a:v)SH
18637 XM
(])SH
/Times-Roman SF
19508 XM
(in an FD F, but that the phrase ``the)22 W
/Courier SF
34260 XM
(a)SH
/Times-Roman SF
35132 XM
(of F'' is still non-ambiguous: it refers to the most)22 W
8 /Courier AF
18157 40559 MT
(i)SH
10 /Times-Roman AF
8280 41603 MT
(specific of the)7 W
/Courier SF
14216 XM
(v)SH
/Times-Roman SF
15296 XM
(. Finally,)
264 W( the fact that there is a taxonomy is explicitly stated in)
7 W( the type definition section whereas)6 W
8 /Courier AF
14816 41936 MT
(i)SH
10 /Times-Roman AF
8280 42980 MT
(it used to be buried in the code of the FUG.  This taxonomy is used to)
112 W( document the grammar and to check the)113 W
8280 44357 MT
(validity of input FDs.)SH
12 /Times-Bold AF
8280 48060 MT
(9.1.2. Typed Constituents: The)SH
/Times-Roman SF
24315 XM
(FSET)SH
/Times-Bold SF
27415 XM
(Construct)SH
10 /Times-Roman AF
10080 49437 MT
(A natural extension of the notion of typed features is to type constituents: typing)
53 W( a feature restricts its possible)52 W
8280 50814 MT
(values; typing a constituent restricts the possible features it can have.)SH
9 /Courier-Bold AF
10839 52544 MT
(Type declarations \050in the grammar\051:)SH
/Courier SF
10839 53492 MT
(\050determiner \050\050fset \050definite distance demonstrative possessive\051\051\051\051)SH
/Courier-Bold SF
10839 55388 MT
(Input FD describing a determiner:)SH
/Courier SF
10839 56336 MT
(\050determiner \050\050definite yes\051)SH
17859 57284 MT
(\050distance far\051)SH
17859 58232 MT
(\050demonstrative no\051)SH
17859 59180 MT
(\050possessive no\051\051\051)SH
42480 8227 50 10440 59765 BX BX1
10 /Times-Roman AF
10080 62244 MT
(The)SH
/Courier SF
11973 XM
(fset)SH
/Times-Roman SF
14711 XM
(feature specifies that)
88 W( only the four features listed can appear under the constituent)89 W
/Courier SF
48830 XM
(determiner)SH
/Times-Roman SF
(.)SH
8280 63621 MT
(This statement declares what the grammar knows about)
50 W( determiners.)49 W
/Courier SF
36744 XM
(Fset)SH
/Times-Roman SF
39443 XM
(expresses a completeness constraint as)49 W
8280 64998 MT
(defined in LFGs)
149 W( [8];)
SH( it says what the)
149 W( grammar needs in order to consider a constituent complete.  Without this)150 W
8280 66375 MT
(construct, FDs can only express partial information.  The exact syntax of)SH
/Courier SF
37664 XM
(fset)SH
/Times-Roman SF
40314 XM
(is given in Section 9.3.)SH
10800 50 8280 69428 UL
6 SS 
9080 70767 MT
(10)SH
8 SS 
9680 71076 MT
(In this example, the grammar could be a simple flat alternation \050\050cat \050\050alt \050noun pronoun)
193 W( personal-pronoun ...  common mass-noun)194 W
8280 72000 MT
(count-noun\051\051\051\051\051, but this expression would hide the structure of the grammar.)SH
ES
%%Page: 44 45
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(44)SH
7920 11486 MT
(Note that expressing such a constraint \050a limit on the arity of a constituent\051 is impossible in the traditional FU)63 W
6120 12863 MT
(formalism. It)
250 W( would be the equivalent of putting a)SH
8 SS 
26535 XM
(NONE)SH
10 SS 
29008 XM
(in the attribute field of a pair as in)SH
8 SS 
42867 XM
(NONE:NONE)SH
10 SS 
(.)SH
9 /Courier-Bold AF
8679 15496 MT
(Without)SH
7 SS 
12999 XM
(FSET)SH
9 SS 
(:)SH
/Courier SF
8679 16444 MT
(\050\050cat clause\051)SH
9219 17392 MT
(\050alt \050\050\050process-type action\051)SH
12999 18340 MT
(\050inherent-roles \050\050carrier)SH
7 SS 
27039 XM
(NONE)SH
9 SS 
(\051)SH
22179 19288 MT
(\050attribute)SH
7 SS 
28119 XM
(NONE)SH
9 SS 
(\051)SH
22179 20236 MT
(\050processor)SH
7 SS 
28119 XM
(NONE)SH
9 SS 
(\051)SH
22179 21184 MT
(\050phenomenon)SH
7 SS 
28659 XM
(NONE)SH
9 SS 
(\051\051\051\051)SH
12459 22132 MT
(\050\050process-type attributive\051)SH
12999 23080 MT
(\050inherent-roles \050\050agent)SH
7 SS 
25959 XM
(NONE)SH
9 SS 
(\051)SH
22179 24028 MT
(\050medium)SH
7 SS 
26499 XM
(NONE)SH
9 SS 
(\051)SH
22179 24976 MT
(\050benef)SH
7 SS 
25959 XM
(NONE)SH
9 SS 
(\051)SH
22179 25924 MT
(\050processor)SH
7 SS 
28119 XM
(NONE)SH
9 SS 
(\051)SH
22179 26872 MT
(\050phenomenon)SH
7 SS 
28659 XM
(NONE)SH
9 SS 
(\051\051\051\051)SH
12459 27820 MT
(\050\050process-type mental\051)SH
12999 28768 MT
(\050inherent-roles \050\050agent)SH
7 SS 
25959 XM
(NONE)SH
9 SS 
(\051)SH
22179 29716 MT
(\050medium)SH
7 SS 
26499 XM
(NONE)SH
9 SS 
(\051)SH
22179 30664 MT
(\050benef)SH
7 SS 
25959 XM
(NONE)SH
9 SS 
(\051)SH
22179 31612 MT
(\050carrier)SH
7 SS 
27039 XM
(NONE)SH
9 SS 
(\051)SH
22179 32560 MT
(\050attribute)SH
7 SS 
28119 XM
(NONE)SH
9 SS 
(\051\051\051\051\051\051\051)SH
/Courier-Bold SF
8679 34456 MT
(With)SH
7 SS 
11379 XM
(FSET)SH
9 SS 
(:)SH
/Courier SF
8679 35404 MT
(\050\050cat clause\051)SH
9219 36352 MT
(\050alt \050\050\050process-type action\051)SH
12999 37300 MT
(\050inherent-roles \050\050)SH
7 SS 
(FSET)SH
9 SS 
24939 XM
(\050agent medium benef\051\051\051\051\051)SH
12459 38248 MT
(\050\050process-type attributive\051)SH
12999 39196 MT
(\050inherent-roles \050\050)SH
7 SS 
(FSET)SH
9 SS 
24939 XM
(\050carrier attribute\051\051\051\051\051)SH
12459 40144 MT
(\050\050process-type mental\051)SH
12999 41092 MT
(\050inherent-roles \050\050)SH
7 SS 
(FSET)SH
9 SS 
24939 XM
(\050processor phenomenon\051\051\051\051\051\051\051\051)SH
42480 28852 50 8280 42439 BX BX1
10 /Times-Roman AF
7920 44918 MT
(In general, the set of features that)
162 W( are allowed under a certain constituent depends on the value of another)163 W
6120 46295 MT
(feature. Figure)
276 W( 9.3 illustrates the problem.  The fragment of grammar)
13 W( shown defines what inherent roles are defined)12 W
6120 47672 MT
(for different types of processes \050it follows the classification provided in)
17 W( [6]\051.)
SH( We)
284 W( also want)
17 W( to enforce the constraint)18 W
6120 49049 MT
(that the set of inherent roles is ``closed'': for an action, the inherent roles are agent, medium and benef)35 W
/Times-Italic SF
48080 XM
(and nothing)34 W
6120 50426 MT
(else)SH
/Times-Roman SF
(. This)
250 W( constraint cannot be expressed by the standard FUG formalism.)SH
/Courier SF
36421 XM
(fset)SH
/Times-Roman SF
39071 XM
(makes it possible.)SH
7920 52905 MT
(Note also that the set of possible features)
4 W( under the constituent)5 W
/Courier SF
33270 XM
(inherent-roles)SH
/Times-Roman SF
41925 XM
(depends on the value of the)5 W
6120 54282 MT
(feature)SH
/Courier SF
9179 XM
(process-type)SH
/Times-Roman SF
(. The)
316 W( first part of the)
33 W( Figure above shows how the constraint can be implemented without)32 W
8 SS 
38892 55314 MT
(11)SH
10 /Courier AF
6120 55659 MT
(fset)SH
/Times-Roman SF
(: we need)
56 W( to exclude all the roles that are not defined for the process-type.)57 W
39999 XM
(Note that the problems are very)57 W
6120 57036 MT
(similar to those encountered on)
121 W( the pronoun system: explosion of)120 W
/Courier SF
33711 XM
(none)SH
/Times-Roman SF
36481 XM
(branches, interdependent branches, long)120 W
6120 58413 MT
(and inefficient grammar.)SH
7920 60892 MT
(The)SH
/Courier SF
9863 XM
(fset)SH
/Times-Roman SF
12651 XM
(\050feature set\051 attribute solves this problem:)138 W
/Courier SF
30421 XM
(fset)SH
/Times-Roman SF
33209 XM
(specifies the complete set of legal features at)
138 W( a)139 W
6120 62269 MT
(given level of an FD.)66 W
/Courier SF
15487 XM
(fset)SH
/Times-Roman SF
18203 XM
(adds constraints on the definition)
66 W( of the domain of admissible paths)65 W
/Symbol SF
46226 XM
(D)SH
/Times-Roman SF
47153 XM
(of a grammar.)65 W
6120 63646 MT
(The syntax is the same as)9 W
/Courier SF
16617 XM
(cset)SH
/Times-Roman SF
(. Note)
268 W( that all the features specified in)9 W
/Courier SF
34817 XM
(fset)SH
/Times-Roman SF
37476 XM
(do not need to appear in)
9 W( an FD: only a)10 W
6120 65023 MT
(subset of those can appear.  For)
34 W( example, to define the class of middle verbs \050)33 W
/Times-Italic SF
(e.g.)SH
/Times-Roman SF
(, ``to shine'' which accepts only a)33 W
6120 66400 MT
(medium as inherent role and no)
21 W( agent\051, the following statement can be unified with the fragment of grammar shown)22 W
6120 67777 MT
(in the previous figure:)SH
10800 50 6120 70352 UL
6 SS 
6920 71691 MT
(11)SH
8 SS 
7520 72000 MT
(Note that this is not even correct, since any other attribute \050besides the names of roles\051 could still be accepted by the grammar.)SH
ES
%%Page: 45 46
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(45)SH
9 /Courier AF
10839 11761 MT
(\050\050verb \050\050lex "shine"\051\051\051)SH
11379 12709 MT
(\050process-type action\051)SH
11379 13657 MT
(\050voice-class middle\051)SH
11379 14605 MT
(\050inherent-roles \050\050)SH
7 SS 
(FSET)SH
9 SS 
23319 XM
(\050medium\051\051\051\051\051)SH
42480 4390 50 10440 15190 BX BX1
10 /Times-Roman AF
10080 17669 MT
(The feature)79 W
/Courier SF
15069 XM
(\050)SH
8 SS 
(FSET)SH
10 SS 
18268 XM
(\050medium\051\051)SH
/Times-Roman SF
23997 XM
(can be unified with)79 W
/Courier SF
32256 XM
(\050)SH
8 SS 
(FSET)SH
10 SS 
35455 XM
(\050agent medium benef\051\051)79 W
/Times-Roman SF
48541 XM
(and the result is)78 W
/Courier SF
8280 19046 MT
(\050)SH
8 SS 
(FSET)SH
10 SS 
11400 XM
(\050medium\051\051)SH
/Times-Roman SF
(.)SH
10080 21525 MT
(Typing constituents is necessary to implement the theoretical claim of LFG that the number of)
228 W( syntactic)229 W
8280 22902 MT
(functions is limited.)
210 W( It)
668 W( also has practical advantages.  An important advantage is good documentation of the)209 W
8280 24279 MT
(grammar. Typing)
250 W( also allows checking the validity of inputs as defined by the type declarations.)SH
12 /Times-Bold AF
8280 27963 MT
(9.1.3. Procedural Types)SH
10 /Times-Roman AF
10080 29340 MT
(FUF also implements a third notion of type in unification: procedural)
113 W( types correspond to user-defined data-)114 W
8280 30717 MT
(structures that are unified by special-purpose unification methods.  The unification)
52 W( method describes how elements)51 W
8280 32094 MT
(of the type fit)
140 W( in a partial order structure.  Typed features are explicitly described \050extensionally\051 partial orders.)141 W
8280 33471 MT
(With procedural types, the partial order is intensionally described by a Lisp procedure.)SH
10080 35950 MT
(Procedural types therefore allow the grammar to integrate)
103 W( complex objects that could hardly be described by)102 W
8280 37327 MT
(standard FDs alone.  Examples of procedural)
114 W( types are)115 W
/Courier SF
31415 XM
(pattern)SH
/Times-Roman SF
35980 XM
(\050with the pattern unification method enforcing)115 W
8280 38704 MT
(ordering constraints\051,)45 W
/Courier SF
17174 XM
(cset)SH
/Times-Roman SF
19868 XM
(\050with the cset unification method checking for set equality\051 and)44 W
/Courier SF
45915 XM
(tpattern)SH
/Times-Roman SF
51009 XM
(defined in)44 W
/Courier SF
8280 40081 MT
(gr7.l)SH
/Times-Roman SF
11530 XM
(in the example directory which implements the semantics of tense selection.)SH
10080 42560 MT
(There are limitations to the use of procedural types:)SH
10280 43899 MT
(1.)SH
11280 XM
(Procedurally typed objects are always considered as leaves in an FD: that is, no)
8 W( matter how complex is)9 W
11280 45004 MT
(the object, the unifier does not know how to traverse it from the outside.  It is viewed as a black)
49 W( box.)48 W
11280 46109 MT
(There is no notion of ``path'' within the object.)SH
10280 47867 MT
(2.)SH
11280 XM
(Typed objects can only be unified with objects declared of the same type.)SH
10280 49625 MT
(3.)SH
11280 XM
(It is the responsibility of the user to make sure)
55 W( that the unification method actually implements a real)56 W
11280 50730 MT
(partial-order.)SH
10080 53209 MT
(The following is a trivial \050read: useless\051 example of how procedural types can)
240 W( be used.  The syntax of)239 W
/Courier SF
8280 54586 MT
(define-procedural-type)SH
/Times-Roman SF
21730 XM
(is described in Section 9.4.)SH
ES
%%Page: 46 47
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(46)SH
9 /Courier AF
8679 12709 MT
(;; Unification of 2 numbers is the max: order is the total order of)SH
8679 13657 MT
(;; arithmetic  \050which is also a partial order!\051)SH
8679 15553 MT
(\050defun unify-numbers \050n1 n2 &optional path\051)SH
9759 16501 MT
(\050max n1 n2\051\051)SH
8679 18397 MT
(\050define-procedural-type 'num 'unify-numbers :syntax 'numberp\051)SH
8679 20293 MT
(> \050u '\050\050num 1\051\051 '\050\050num 2\051\051\051)SH
8679 21241 MT
(\050\050num 2\051\051)SH
8679 23137 MT
(> \050u '\050\050num 1\051\051 '\050\050num 0\051\051\051)SH
8679 24085 MT
(\050\050num 1\051\051)SH
8679 25981 MT
(;; Unification of 2 lists is the list with the more elements.)SH
8679 26929 MT
(;; That defines a \050probably not very useful\051 total order on lists.)SH
8679 27877 MT
(\050defun unify-lists \050l1 l2 &optional path\051)SH
9759 28825 MT
(\050if \050> \050length l1\051 \050length l2\051\051)SH
11919 29773 MT
(l1)SH
10839 30721 MT
(l2\051\051)SH
8679 32617 MT
(\050define-procedural-type 'list 'unify-lists :syntax 'sequencep\051)SH
8679 34513 MT
(> \050u '\050\050list \0501 2 3\051\051\051 '\050\050list \0501 2 3 4\051\051\051\051)SH
8679 35461 MT
(\050\050list \0501 2 3 4\051\051\051)SH
8679 37357 MT
(> \050u '\050\050list \0501 2\051\051\051 '\050\050list \050a b c d\051\051\051\051)SH
8679 38305 MT
(\050\050list \050a b c d\051\051\051)SH
42480 28090 50 8280 38890 BX BX1
14 /Times-Bold AF
6120 42730 MT
(9.2. Typed Features:)SH
/Times-Roman SF
18758 XM
(define-feature-type)SH
12 /Times-Bold AF
6120 46414 MT
(9.2.1. Type Definition)SH
10 /Times-Roman AF
7920 47791 MT
(Typed features are hierarchies of symbols which are interpreted by the unifier.  They are defined by using the)67 W
6120 49168 MT
(function)SH
/Courier SF
9703 XM
(define-feature-type)SH
/Times-Roman SF
(.)SH
9 /Courier AF
8679 51801 MT
(\050DEFINE-FEATURE-TYPE <name> <children>\051)SH
8679 52749 MT
(-> Asserts that <children> are the immediate specializations of <name> in a)SH
10299 53697 MT
(type hierarchy.)SH
8679 55593 MT
(Example:)SH
8679 57489 MT
(\050define-feature-type mood \050finite non-finite\051\051)SH
8679 58437 MT
(;; finite and non-finite are specializations of the mood symbol.)SH
8679 60333 MT
(\050define-feature-type epistemic-modality \050fact inference possible\051\051)SH
8679 61281 MT
(;; The symbols fact, inference and possible are specializations of the)SH
8679 62229 MT
(;; epistemic-modality symbol)SH
42480 12922 50 8280 62814 BX BX1
10 /Times-Roman AF
7920 65293 MT
(The function)SH
/Courier SF
13308 XM
(subsume)SH
/Times-Roman SF
17758 XM
(tests if a symbol \050or an object in general\051 is a specialization of another symbol.)SH
ES
%%Page: 47 48
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(47)SH
9 /Courier AF
10839 12709 MT
(\050SUBSUME <symbol> <specialization>\051)SH
10839 13657 MT
(-> T is <specialization> is a specialization of <symbol>)SH
12459 14605 MT
(NIL otherwise.)SH
10839 16501 MT
(Example: \050subsume)
540 W( 'mood 'finite\051)SH
16239 17449 MT
(-> T)SH
16239 19345 MT
(\050subsume 'epistemic-modality "must"\051)SH
16239 20293 MT
(-> T)SH
16239 22189 MT
(\050subsume 'finite 'mood\051)SH
16239 23137 MT
(-> NIL)SH
42480 12922 50 10440 23722 BX BX1
10 /Times-Roman AF
10080 26201 MT
(The function)172 W
/Courier SF
15812 XM
(reset-typed-features)SH
/Times-Roman SF
28234 XM
(resets the working space and deletes all feature)
172 W( type definitions)171 W
8280 27578 MT
(from memory.  It is recommended to call it before loading a new grammar to avoid any side effect from)
39 W( previously)40 W
8280 28955 MT
(defined types.)SH
9 /Courier AF
10839 31588 MT
(> \050reset-typed-features\051)SH
42480 3256 50 10440 32935 BX BX1
12 /Times-Bold AF
8280 36638 MT
(9.2.2. The)SH
/Times-Roman SF
13580 XM
(under)SH
/Times-Bold SF
16613 XM
(Family of Constructs)SH
10 /Times-Roman AF
10080 38015 MT
(When a type hierarchy is defined, it is possible to check if an)
41 W( input value is more or less ``instantiated'' within)40 W
8280 39392 MT
(the hierarchy.  Using the)135 W
/Courier SF
19064 XM
(under)SH
/Times-Roman SF
22449 XM
(and)SH
/Courier SF
24278 XM
(sunder)SH
/Times-Roman SF
28263 XM
(constructs, one can check if a value)
135 W( is more \050resp strictly more\051)136 W
8280 40769 MT
(specific than a symbol within a hierarchy.  The syntax is the following:)SH
9 /Courier AF
10839 43402 MT
(\050\050a #\050under <v>\051\051\051  will unify with \050\050a w\051\051 only if w is a specialization)SH
10839 44350 MT
(of v or v itself.)SH
10839 46246 MT
(\050\050a #\050sunder <v>\051\051\051 will unify with \050\050a w\051\051 only if w is a specialization)SH
10839 47194 MT
(of v but not v itself.)SH
10839 49090 MT
(The following notations are equivalent:)SH
10839 50038 MT
(\050\050a #\050under v\051\051\051  \050\050a #\050<= v\051\051\051  \050\050a #\050=< v\051\051\051)SH
10839 51934 MT
(\050\050a #\050sunder v\051\051\051 \050\050a #\050< v\051\051\051)SH
10839 53830 MT
(Example:)SH
10839 55726 MT
(> \050define-feature-type a \050aa ab ac\051\051)SH
10839 56674 MT
(> \050define-feature-type aa \050aaa aab\051\051)SH
10839 58570 MT
(> \050u '\050\050x #\050under aa\051\051\051 '\050\050x a\051\051\051)
SH( ;;)
2160 W( a is not a specialization of aa)SH
10839 59518 MT
(:fail)SH
10839 61414 MT
(> \050u '\050\050x #\050under aa\051\051\051 '\050\050x nil\051\051\051)
SH( ;;)
1080 W( nil is the least specific of all)SH
10839 62362 MT
(:fail ;;)
17280 W( it is not a specialization of aa)SH
10839 64258 MT
(> \050u '\050\050x #\050<= aa\051\051\051 '\050\050x aab\051\051\051)
SH( ;;)
2700 W( Ok, aab is a specialization of aa)SH
10839 65206 MT
(\050\050x aab\051\051)SH
10839 67102 MT
(> \050u '\050\050x #\050under z\051\051\051 '\050\050x z\051\051\051)
SH( ;;)
2700 W( Even if z is not in a hierarchy)SH
10839 68050 MT
(\050\050x z\051\051)
SH( ;;)
16200 W( can check for its presence)SH
10839 69946 MT
(> \050u '\050\050x #\050< z\051\051\051 '\050\050x z\051\051\051)
SH( ;;)
4860 W( z is not strictly under z.)SH
10839 70894 MT
(:fail)SH
42480 29986 50 10440 71479 BX BX1
ES
%%Page: 48 49
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(48)SH
7920 11486 MT
(NOTE: when)21 W
/Courier SF
13572 XM
(under)SH
/Times-Roman SF
16843 XM
(is used)
21 W( with a symbol)20 W
/Courier SF
25861 XM
(z)SH
/Times-Roman SF
26731 XM
(which is not part of a type hierarchy,)20 W
/Courier SF
41860 XM
(#\050under z\051)20 W
/Times-Roman SF
48150 XM
(unifies with)20 W
/Courier SF
6120 12863 MT
(z)SH
/Times-Roman SF
7037 XM
(only. In)
384 W( particular, it will NOT unify with)67 W
/Courier SF
24889 XM
(NIL)SH
/Times-Roman SF
(. So)
384 W( the expression)67 W
/Courier SF
35079 XM
(\050\050a #\050under z\051\051\051)68 W
/Times-Roman SF
45133 XM
(is equivalent to the)68 W
6120 14240 MT
(expression)SH
/Courier SF
10653 XM
(\050\050a given\051 \050a z\051\051)6 W
/Times-Roman SF
(. In)
260 W( fact,)5 W
/Courier SF
24723 XM
(under)SH
/Times-Roman SF
27978 XM
(is the typed extension of the notion of)5 W
/Courier SF
43406 XM
(given)SH
/Times-Roman SF
(. Note)
260 W( that)5 W
/Courier SF
51120 XM
(\050\050a)SH
6120 15617 MT
(#\050under z\051\051\051)SH
/Times-Roman SF
13570 XM
(is the equivalent of LFG's notation)SH
/Courier SF
27847 XM
(a =)SH
30727 XM
(z)SH
/Times-Roman SF
(.)SH
8 /Courier AF
29647 15950 MT
(c)SH
12 /Times-Bold AF
6120 19301 MT
(9.2.3. Drawing Type Hierarchies)SH
10 /Times-Roman AF
7920 20678 MT
(A pictorial representation of the type hierarchy often helps tremendously to document a grammar.)
89 W( The)
429 W( func-)90 W
6120 22055 MT
(tions draw-types and types-postscript create such pictures given the FUF type declarations.)SH
9 /Courier AF
8679 24688 MT
(DRAW-TYPES \050&optional root\051)SH
12999 25636 MT
(Produces a character mode picture of the type hierarchy defined in)SH
12999 26584 MT
(FUF.)SH
8679 28480 MT
(TYPES-POSTSCRIPT \050root filename &key \050shrink t\051\051)SH
12999 29428 MT
(Produces a postscript file depicting the type hierarchy defined in)SH
12999 30376 MT
(FUF. Use)
540 W( root = nil to draw all the types currently defined.)SH
12999 31324 MT
(Root can also be a list of type names, or a single type name.)SH
8679 33220 MT
(Example of output:)SH
8679 35116 MT
(> \050draw-types 'relation\051)SH
8679 36064 MT
(|- RELATION +)SH
15159 37012 MT
(|- ASCRIPTIVE)SH
15159 37960 MT
(|- POSSESSIVE)SH
15159 38908 MT
(|- LOCATIVE +)SH
21639 39856 MT
(|- SPATIAL)SH
21639 40804 MT
(|- TEMPORAL)SH
21639 41752 MT
(|- ACCOMPANIMENT)SH
21639 42700 MT
(|- EXISTENTIAL)SH
21639 43648 MT
(|- NATURAL-PHENOM)SH
8679 46492 MT
(>)SH
42480 24298 50 8280 47077 BX BX1
14 /Times-Bold AF
6120 50917 MT
(9.3. Typed Constituents: the)SH
/Times-Roman SF
23308 XM
(FSET)SH
/Times-Bold SF
26924 XM
(Construct)SH
10 /Times-Roman AF
7920 52294 MT
(The)SH
/Courier SF
9725 XM
(fset)SH
/Times-Roman SF
12375 XM
(special attribute expresses a completeness constraint in an FD.)SH
9 /Courier AF
8679 54927 MT
(;; Value of FSET is a list of symbols.)SH
8679 55875 MT
(\050\050a \050\050fset)
540 W( \050x y z\051\051)SH
11919 56823 MT
(\050x 1\051\051\051\051)SH
42480 5152 50 8280 58170 BX BX1
10 SS 
7920 60649 MT
(FSET)SH
/Times-Roman SF
10653 XM
(specifies that all symbols which are NOT listed is its value)
83 W( have a value of)82 W
/Courier SF
41972 XM
(NONE)SH
/Times-Roman SF
(, that is, they are not)82 W
6120 62026 MT
(defined at this level of the fd.)SH
9 /Courier AF
8679 64659 MT
(;; b is not in the fset of a)SH
8679 65607 MT
(> \050u '\050\050a \050\050fset \050x y z\051\051\051\051\051 '\050\050a \050\050b 1\051\051\051\051\051)SH
8679 66555 MT
(:fail)SH
42480 5152 50 8280 67902 BX BX1
10 /Times-Roman AF
7920 70381 MT
(Two)SH
/Courier SF
10003 XM
(FSET)SH
/Times-Roman SF
12653 XM
(descriptions can be unified.  The result is an)SH
/Courier SF
30539 XM
(FSET)SH
/Times-Roman SF
33189 XM
(whose value is the intersection of the two values.)SH
ES
%%Page: 49 50
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(49)SH
9 /Courier AF
10839 12709 MT
(> \050u '\050\050fset \050x y z\051\051\051 '\050\050fset \050v w x z\051\051\051\051)SH
10839 13657 MT
(\050\050fset \050x z\051\051\051)SH
10839 15553 MT
(;; \050\050fset nil\051\051 is equivalent to NONE \050no feature accepted\051)SH
10839 16501 MT
(> \050u '\050\050a \050\050fset \050x y\051\051\051\051\051 '\050\050a \050\050fset \050a b\051\051\051\051\051\051)SH
10839 17449 MT
(\050\050a none\051\051)SH
42480 7996 50 10440 18796 BX BX1
14 /Times-Bold AF
8280 22614 MT
(9.4. Procedural Types)SH
10 /Times-Roman AF
10080 23991 MT
(Procedural types are)
57 W( defined by a name and a special unification method, optionally a syntax checker function)58 W
8280 25368 MT
(can be declared.  The unification method actually defines a partial order over the elements of the type.)SH
9 /Courier AF
10839 28001 MT
(\050DEFINE-PROCEDURAL-TYPE <name> <function> :syntax <checker> :copier <copier>\051)SH
10839 29897 MT
(Declares <name> to be a special attribute, whose value can only be)SH
10839 30845 MT
(interpreted by <function>.)SH
10839 32741 MT
(The special types are considered "atomic" types \050unifier cannot access to)SH
10839 33689 MT
(components from outside\051.)SH
10839 35585 MT
(The unification procedure must be deterministic \050no backtracking)SH
7020 50 29199 35785 UL
10839 36533 MT
(allowed\051 and must be a real "unification" procedure: that is, the type must)SH
10839 37481 MT
(be a lattice \050or partial order\051.)SH
10839 39377 MT
(<FUNCTION> must be a function of 3 args: the vals to unify and the path)SH
10839 40325 MT
(where the result is to be located in the total fd.)SH
10839 41273 MT
(It must return :fail if unification fails, otherwise, it must return a)SH
10839 42221 MT
(valid object of type <type>.)SH
10839 44117 MT
(NOTE: <FUNCTION> must be such that NIL is always acceptable as an)SH
10839 45065 MT
(argument and is always neutral, ie, \050<FUNCTION> x nil\051 = x.)SH
10839 46013 MT
(NOTE: <FUNCTION> must be such that \050<FUNCTION> x x\051 = x)SH
10839 47909 MT
(<CHECKER> must be a function of 1 arg:)SH
10839 48857 MT
(It must return either True if the object is a syntactically correct)SH
10839 49805 MT
(element of <TYPE>, otherwise, it must return 2 values:)SH
10839 50753 MT
(NIL and a string describing the correct syntax of <TYPE>.)SH
10839 52649 MT
(<COPIER> must be a function of 1 arg:)SH
10839 53597 MT
(it must copy an object of <TYPE> that has no cons in common with its)SH
10839 54545 MT
(argument. By)
540 W( default, COPY-TREE is used.)SH
10839 56441 MT
(NOTE: \050<COPIER> x\051 = \050<FUNCTION> x nil\051)SH
42480 31696 50 10440 57788 BX BX1
10 /Times-Roman AF
10080 60267 MT
(The following example shows one use of procedural types:)SH
ES
%%Page: 50 51
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(50)SH
9 /Courier AF
8679 12709 MT
(;; Unification of 2 numbers is the max: order is the total order of)SH
8679 13657 MT
(;; arithmetic  \050which is also a partial order!\051)SH
8679 15553 MT
(\050defun unify-numbers \050n1 n2 &optional path\051)SH
9759 16501 MT
(\050max n1 n2\051\051)SH
8679 18397 MT
(\050define-procedural-type 'num 'unify-numbers :syntax 'numberp\051)SH
8679 20293 MT
(> \050u '\050\050num 1\051\051 '\050\050num 2\051\051\051)SH
8679 21241 MT
(\050\050num 2\051\051)SH
8679 23137 MT
(> \050u '\050\050num 1\051\051 '\050\050num 0\051\051\051)SH
8679 24085 MT
(\050\050num 1\051\051)SH
8679 25981 MT
(;; Only values of the attribute num can be unified together...)SH
8679 26929 MT
(;; a and num are not compatible!)SH
8679 27877 MT
(> \050u '\050\050num {a}\051\051 nil\051)SH
8679 28825 MT
(:fail)SH
42480 19372 50 8280 30172 BX BX1
ES
%%Page: 51 52
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(51)SH
16 /Times-Bold AF
8280 11898 MT
(10.)SH
/Times-Roman SF
10680 XM
(EXTERNAL)SH
/Times-Bold SF
19524 XM
(and Unification Macros)SH
10 /Times-Roman AF
10080 13275 MT
(The)SH
/Courier SF
11951 XM
(External)SH
/Times-Roman SF
17067 XM
(specification allows)
66 W( the grammar writer to produce the constraints of a grammar in a ``lazy'')65 W
8280 14652 MT
(way, specifying pieces of the grammar only)
80 W( when needed.)81 W
/Courier SF
32856 XM
(External)SH
/Times-Roman SF
37987 XM
(also provides a way of developing ``mac-)81 W
8280 16029 MT
(ros'' in a grammar.)SH
10080 18508 MT
(The mechanism is the)
226 W( following:)225 W
/Courier SF
24624 XM
(\050u x <external>\051)225 W
/Times-Roman SF
35149 XM
(stops the unification, call the external function)225 W
8280 19885 MT
(specified in the)
160 W( external construct, and uses the value returned to continue as in)161 W
/Courier SF
42498 XM
(\050u x <value>\051)161 W
/Times-Roman SF
(. External)572 W
8280 21262 MT
(functions expect one argument: the path where the value they return will be used.)SH
10080 23741 MT
(The syntax is the following:)SH
9 /Courier AF
10839 26374 MT
(\050\050a EXTERNAL\051\051)SH
10839 28270 MT
(or)SH
10839 30166 MT
(\050\050a #\050EXTERNAL <function>\051\051\051)SH
42480 7048 50 10440 31513 BX BX1
10 /Times-Roman AF
10080 33992 MT
(In the short form \050)588 W
/Courier SF
(external)SH
/Times-Roman SF
25402 XM
(only\051, the external function used is the value)
588 W( of the variable)587 W
/Courier SF
8280 35369 MT
(*default-external-value*)SH
/Times-Roman SF
(. Otherwise, the name of the function is explicitly specified.)SH
10080 37848 MT
(There are two reasons to use an)SH
/Courier SF
22937 XM
(external)SH
/Times-Roman SF
27987 XM
(construct:)SH
10280 39187 MT
(1.)SH
11280 XM
(The same portion of the grammar is)
47 W( repeated over and over in different places.  Extract this repeating)48 W
11280 40292 MT
(portion, give it a name as a portion,)
48 W( and use the function as a ``macro'' in the grammar.  An example)47 W
11280 41397 MT
(of this sort can be found in file gr6.l in the example directory.  The macro is called)SH
/Courier SF
44552 XM
(role-exists)SH
/Times-Roman SF
(.)SH
10280 43155 MT
(2.)SH
11280 XM
(There are constraints that)
7 W( are better expressed at run-time, when some other parameters, external to the)8 W
11280 44260 MT
(unification process, have been calculated.  The)66 W
/Courier SF
30708 XM
(external)SH
/Times-Roman SF
35823 XM
(construct actually allows a coroutine-like)65 W
11280 45365 MT
(interaction between two processes.  This can be)
57 W( used for example to implement a cooperation similar)58 W
11280 46470 MT
(to the one described in the)226 W
8 SS 
23412 XM
(TELEGRAM)SH
10 SS 
28245 XM
(system [2])
SH( between a planner and the unifier.  A similar)226 W
11280 47575 MT
(mechanism can be used in the following setting:  a)
7 W( unification-based lexical chooser must interact with)8 W
11280 48680 MT
(a knowledge base to decide what lexical items to use.)
127 W( The)
503 W( input given to the lexical chooser only)126 W
11280 49785 MT
(contains pointers to concepts in the knowledge base.  When the lexical chooser must make a)
33 W( decision,)34 W
11280 50890 MT
(it needs more information)
150 W( from the knowledge base.  The)149 W
/Courier SF
36019 XM
(external)SH
/Times-Roman SF
41218 XM
(construct allows the lexical)149 W
11280 51995 MT
(chooser to pull information from)
45 W( the knowledge base)46 W
/Times-Italic SF
33141 XM
(only when it needs it)46 W
/Times-Roman SF
(. Therefore,)
342 W( the input does)46 W
11280 53100 MT
(not need to contain all the information that)
7 W( might be needed but only the entry-points to the knowledge)6 W
11280 54205 MT
(base necessary to identify the additional information that may turn)
133 W( out to be relevant under certain)134 W
11280 55310 MT
(conditions.)SH
ES
%%Page: 52 53
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(52)SH
ES
%%Page: 53 54
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(53)SH
16 /Times-Bold AF
8280 11872 MT
(11. Morphology and Linearization)SH
10 /Times-Roman AF
10080 13249 MT
(The morphology module \050partially written by Jay Meyers)
82 W( USC/ISI\051)
332 W( makes many assumptions)
82 W( on the form of)81 W
8280 14626 MT
(the incoming functional description.  If you want to use it, you must be aware of the following conventions.)SH
14 /Times-Bold AF
8280 18444 MT
(11.1. Lexical Categories are not Unified)SH
10 /Times-Roman AF
10080 19821 MT
(The categories that are handled by)
134 W( the morphology module can be declared to be ``lexical categories''. If a)135 W
8280 21198 MT
(category is a lexical category, it is not unified by the unifier,)
31 W( and it is passed unchanged to the morphology module.)30 W
8280 22575 MT
(The assumption here is that the morphology module will do all the reasoning necessary for these categories.)SH
10080 25054 MT
(To declare that a category is lexical, you must call)
23 W( the function)24 W
/Courier SF
35771 XM
(register-category-not-unified)SH
/Times-Roman SF
(. To)298 W
8280 26431 MT
(find out the list of non-unified categories, call the function)SH
/Courier SF
31916 XM
(categories-not-unified)SH
/Times-Roman SF
(.)SH
9 /Courier AF
10839 28116 MT
(CATEGORIES-NOT-UNIFIED \050&optional \050cat-attribute *cat-attribute*\051\051)SH
10839 30012 MT
(REGISTER-CATEGORY-NOT-UNIFIED \050cat &optional \050cat-attribute *cat-attribute*\051\051)SH
42480 3442 50 10440 30597 BX BX1
10 /Times-Roman AF
10080 33076 MT
(Note that this information depends on the cat-attribute, which by default is)SH
/Courier SF
40160 XM
(cat)SH
/Times-Roman SF
42210 XM
(\050cf. page 27\051.)SH
14 /Times-Bold AF
8280 36894 MT
(11.2. CATegories Accepted by the Morphology Module)SH
10 /Times-Roman AF
10080 38271 MT
(The following categories only are known by the morphology module.  If a category of another)
2 W( type is sent to the)1 W
8280 39648 MT
(morphology, no agreement can be performed.  The output in that case is:)SH
9 /Courier AF
10839 41333 MT
(<Unknown cat CC: LEX>)SH
42480 1546 50 10440 41918 BX BX1
10839 43603 MT
(MORPH accepts the following values as the value of the attribute CAT:)SH
16779 44551 MT
(ADJ, ADV, CONJ, MODAL, PREP, RELPRO, PUNCTUATION, PHRASE:)SH
13539 45499 MT
(words are sent unmodified.)SH
10839 46447 MT
(NOUN:)SH
13539 47395 MT
(agreement in number is done.)SH
13539 48343 MT
(irregular plural must be put in the list *IRREG-PLURALS*)SH
13539 49291 MT
(in file LEXICON.L)SH
10839 50239 MT
(PRONOUN:)SH
13539 51187 MT
(agreement done on pronoun-type, case, gender, number,)SH
13539 52135 MT
(distance, person.)SH
13539 53083 MT
(irregular pronouns are defined in file LEXICON.L)SH
10839 54031 MT
(VERB:)SH
13539 54979 MT
(agreement is done on number, person, tense and ending.)SH
13539 55927 MT
(irregular verbs must be put in the list *IRREG-VERBS*)SH
13539 56875 MT
(in file LEXICON.L)SH
10839 57823 MT
(DET :)SH
13539 58771 MT
(agreement is done on number, definite and first letter of)SH
13539 59719 MT
(following word for "a"/"an" or feature a-an of following word.)SH
10839 60667 MT
(ORDINAL, CARDINAL:)SH
13539 61615 MT
(string is determined using value and digit to determine whether)SH
13539 62563 MT
(to use digits or letters.)SH
42480 20506 50 10440 63148 BX BX1
10 /Times-Roman AF
10080 65627 MT
(The function)SH
/Courier SF
15468 XM
(morphology-help)SH
/Times-Roman SF
24718 XM
(will give you this information on-line if you need it.)SH
ES
%%Page: 54 55
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(54)SH
14 /Times-Bold AF
6120 11760 MT
(11.3. Accepted Features for)SH
/Times-Roman SF
22839 XM
(VERB, NOUN, PRONOUN, DET, ORDINAL,)SH
9270 13137 MT
(CARDINAL)SH
/Times-Bold SF
16853 XM
(and)SH
/Times-Roman SF
19459 XM
(PUNCTUATION)SH
9 /Courier AF
8679 14822 MT
(VERB:)SH
11379 15770 MT
(ENDING: {ROOT, INFINITIVE, PAST-PARTICIPLE, PRESENT-PARTICIPLE})SH
11379 16718 MT
(NUMBER: {SINGULAR, PLURAL})SH
11379 17666 MT
(PERSON: {FIRST, SECOND, THIRD})SH
11379 18614 MT
(TENSE : {PRESENT, PAST})SH
8679 20510 MT
(NOUN:)SH
11379 21458 MT
(NUMBER: {SINGULAR, PLURAL})SH
11379 22406 MT
(FEATURE:{POSSESSIVE})SH
11379 23354 MT
(A-AN: {AN,)
1080 W( CONSONANT})SH
8679 25250 MT
(PRONOUN:)SH
11379 26198 MT
(PRONOUN-TYPE: {PERSONAL, DEMONSTRATIVE, QUESTION, QUANTIFIED})SH
11379 27146 MT
(CASE: {SUBJECTIVE,)
4320 W( POSSESSIVE, OBJECTIVE, REFLEXIVE})SH
11379 28094 MT
(GENDER: {MASCULINE,)
3240 W( FEMININE, NEUTER})SH
11379 29042 MT
(PERSON: {FIRST,)
3240 W( SECOND, THIRD})SH
11379 29990 MT
(NUMBER: {SINGULAR,)
3240 W( PLURAL})SH
11379 30938 MT
(DISTANCE: {NEAR,)
2160 W( FAR})SH
8679 32834 MT
(DET :)SH
11379 33782 MT
(NUMBER: {SINGULAR, PLURAL})SH
8679 35678 MT
(PUNCTUATION:)SH
11379 36626 MT
(BEFORE: {";", ",", ":", "\050", "\051", ...})SH
11379 37574 MT
(AFTER : {";", ",", ":", "\050", "\051", ...})SH
8679 39470 MT
(ORDINAL, CARDINAL:)SH
11379 40418 MT
(VALUE: a)
540 W( number \050integer or float, positive or negative\051)SH
11379 41366 MT
(DIGIT: {YES,)
540 W( NO})SH
42480 28090 50 8280 41951 BX BX1
10 /Times-Roman AF
7920 44430 MT
(The feature A-AN is used to indicate exceptions to the rule: normally, a noun)
159 W( starting with a consonant is)160 W
6120 45807 MT
(preceded by the)
15 W( indefinite article ``a'' and if the noun starts with a vowel, it is preceded by ``an.''  Some nouns start)14 W
6120 47184 MT
(with a consonant but must still be preceded by ``an'' \050for)
22 W( example, ``honor'' or acronyms ``an RST''\051.  In that case,)23 W
6120 48561 MT
(the feature)SH
/Courier SF
10618 XM
(\050a-an an\051)SH
/Times-Roman SF
16268 XM
(must be added to the corresponding noun.)SH
14 /Times-Bold AF
6120 52401 MT
(11.4. Possible Values for Features)SH
/Times-Roman SF
26536 XM
(NUMBER, PERSON, TENSE, ENDING,)SH
9270 53778 MT
(BEFORE, AFTER, CASE, GENDER, PERSON, DISTANCE,)SH
9270 55155 MT
(PRONOUN-TYPE, A-AN, DIGIT)SH
/Times-Bold SF
29060 XM
(and)SH
/Times-Roman SF
31666 XM
(VALUE)SH
ES
%%Page: 55 56
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(55)SH
9 /Courier AF
10839 11761 MT
(NUMBER: {SINGULAR, PLURAL})SH
15159 12709 MT
(Default is SINGULAR.)SH
10839 14605 MT
(ENDING: {ROOT, INFINITIVE, PAST-PARTICIPLE, PRESENT-PARTICIPLE})SH
15159 15553 MT
(Default is none.)SH
10839 17449 MT
(PERSON: {FIRST, SECOND, THIRD})SH
15159 18397 MT
(Default is THIRD.)SH
10839 20293 MT
(TENSE : {PRESENT, PAST})SH
15159 21241 MT
(Default is PRESENT.)SH
10839 23137 MT
(BEFORE: {";", ",", ":", "\050", "\051", ...} \050any punctuation sign\051)SH
15159 24085 MT
(Default is none.)SH
10839 25981 MT
(AFTER : {";", ",", ":", "\050", "\051", ...})SH
15159 26929 MT
(Default is none.)SH
10839 28825 MT
(CASE: {SUBJECTIVE,)
1080 W( OBJECTIVE, POSSESSIVE, REFLEXIVE})SH
15159 29773 MT
(Default is SUBJECTIVE.)SH
10839 31669 MT
(GENDER: {MASCULINE, FEMININE, NEUTER})SH
15159 32617 MT
(Default is MASCULINE.)SH
10839 34513 MT
(PERSON: {FIRST, SECOND, THIRD})SH
15159 35461 MT
(Default is THIRD.)SH
10839 37357 MT
(DISTANCE: {FAR, NEAR})SH
15159 38305 MT
(Default is NEAR.)SH
10839 40201 MT
(PRONOUN-TYPE: {PERSONAL, DEMONSTRATIVE, QUESTION, QUANTIFIED})SH
15159 41149 MT
(Default is none.)SH
10839 43045 MT
(A-AN: {AN,)
1080 W( CONSONANT})SH
15159 43993 MT
(Default is CONSONANT.)SH
10839 45889 MT
(DIGIT: {YES,)
540 W( NO})SH
15159 46837 MT
(Default is YES.)SH
10839 48733 MT
(VALUE: a)
540 W( number.)SH
42480 38518 50 10440 49318 BX BX1
14 /Times-Bold AF
8280 53136 MT
(11.5. The Dictionary)SH
10 /Times-Roman AF
10080 54513 MT
(The package includes a)
36 W( dictionary to handle the irregularities of the morphology only: verbs with irregular past)35 W
8280 55890 MT
(forms and nouns with irregular plural only need to be added to the dictionary.)SH
10080 58369 MT
(There is)
107 W( no semantic information within this dictionary. In fact, a more sophisticated form of lexicon should)108 W
8280 59746 MT
(have the form of an FD. This dictionary is a part of the morphological module only.)SH
10080 62225 MT
(The way to add information to the lexicon is to edit the values of the)
158 W( special variables *irreg-plurals* and)157 W
8280 63602 MT
(*irreg-verbs*. These variables are defined in the file LEXICON.L. After the modification, you need to)
61 W( execute the)62 W
8280 64979 MT
(function \050initialize-lexicon\051.)
57 W( The)
671 W( best way to do that is to edit a copy of the file LEXICON.L)
57 W( and to load it back.)56 W
8280 66356 MT
(After loading it, the new lexicon will be ready to use.)SH
10080 68835 MT
(The variable *irreg-plurals* is a list of pairs of the form \050key plural\051.  The default list starts like this:)SH
ES
%%Page: 56 57
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(56)SH
9 /Courier AF
11919 11761 MT
('\050\050"calf" "calves"\051)SH
12999 12709 MT
(\050"child" "children"\051)SH
12999 13657 MT
(\050"clothes" "clothes"\051)SH
12999 14605 MT
(\050"data" "data"\051)SH
12999 15553 MT
(...\051)SH
42480 5338 50 8280 16138 BX BX1
10 /Times-Roman AF
7920 18617 MT
(The variable *irreg-verbs* is a list of 5-tuples of the form:  \050root present-third-person-singular past)
132 W( present-)133 W
6120 19994 MT
(participle past-participle\051)SH
7920 22473 MT
(The default value starts as follows:)SH
9 /Courier AF
11919 24158 MT
('\050\050"become" "becomes" "became" "becoming" "become"\051)SH
12999 25106 MT
(\050"buy" "buys" "bought" "buying" "bought"\051)SH
12999 26054 MT
(\050"come" "comes" "came" "coming" "come"\051)SH
12999 27002 MT
(\050"do" "does" "did" "doing" "done"\051)SH
12999 27950 MT
(...\051)SH
42480 5338 50 8280 28535 BX BX1
14 /Times-Bold AF
6120 32353 MT
(11.6. Linearization and Punctuation)SH
10 /Times-Roman AF
7920 33730 MT
(The linearizer interprets the)156 W
/Courier SF
19874 XM
(pattern)SH
/Times-Roman SF
24480 XM
(ordering constraints and assembles the words of)
156 W( the sentence into a)155 W
6120 35107 MT
(linear string.  In addition, the linearizer deals with punctuation and capitalization.  The general algorithm)
66 W( followed)67 W
6120 36484 MT
(by the linearizer is:)SH
8120 37823 MT
(1.)SH
9120 XM
(If a feature gap is found, the linearization of the FD is the empty string.)SH
8120 39581 MT
(2.)SH
9120 XM
(Else: Identify the)SH
/Courier SF
16258 XM
(pattern)SH
/Times-Roman SF
20708 XM
(feature in the current FD.  If a pattern is found:)SH
11176 40920 MT
(a.)SH
12120 XM
(For each constituent of the pattern, recursively linearize the constituent.)SH
11120 42678 MT
(b.)SH
12120 XM
(The linearization of the fd is the concatenation of the)
93 W( linearizations of the constituents in the)92 W
12120 43783 MT
(order prescribed by the pattern feature. \050Note)
145 W( that during linearization, dots and pounds are)146 W
12120 44888 MT
(ignored in the pattern.\051)SH
8120 46646 MT
(3.)SH
9120 XM
(If no feature pattern and a feature lex is found:)SH
11176 47985 MT
(a.)SH
12120 XM
(Find the)150 W
/Courier SF
15976 XM
(lex)SH
/Times-Roman SF
18176 XM
(feature of the fd, and depending on the category)
150 W( of the constituent, the mor-)149 W
12120 49090 MT
(phological features needed.)
92 W( For)
435 W( example, if fd is of)93 W
/Courier SF
33987 XM
(\050cat verb\051)93 W
/Times-Roman SF
(, the features needed are:)93 W
/Courier SF
12120 50195 MT
(person, number, tense)SH
/Times-Roman SF
(.)SH
11120 51953 MT
(b.)SH
12120 XM
(Send the lexical item and the appropriate morphological features to the morphology module .)SH
11176 53711 MT
(c.)SH
12120 XM
(Identify the feature punctuation. Punctuation)
97 W( can contain three sub-features: before, after and)96 W
12120 54816 MT
(capitalize. According)
586 W( to the value of these features, append or prepend punctuation to the)169 W
12120 55921 MT
(string computed by the morphology module, and capitalize the string if requested.)
265 W( The)778 W
12120 57026 MT
(linearization of the fd is the resulting string.)SH
11120 58784 MT
(d.)SH
12120 XM
(If the current cat is not known by the morphology system, the linearization)
17 W( of the constituent is)18 W
12120 59889 MT
(a string of the form <unknown cat X: S>.)SH
8120 61647 MT
(4.)SH
9120 XM
(If no feature pattern and no feature lex is found, the linearization of the current fd is the empty string.)SH
7920 64126 MT
(The linearizer also deals with inserting sequences of punctuation signs, insertion of spaces)
60 W( between words and)59 W
6120 65503 MT
(the ``liaison'' article ``an'' as in ``an interesting case'' or ``an RPS''.  The following rules are implemented:)SH
8120 66842 MT
(1.)SH
9120 XM
(A space is inserted between each pair of words except when:)SH
11176 68181 MT
(a.)SH
12120 XM
(Do not put space after an opening bracket "\050[`')SH
11120 69939 MT
(b.)SH
12120 XM
(Do not put space before a closing bracket "\051]'`)SH
11176 71697 MT
(c.)SH
12120 XM
(Do not put space before punctuations.)SH
ES
%%Page: 57 58
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(57)SH
10280 11486 MT
(2.)SH
11280 XM
(When the indefinite singular article \050``a''\051 is followed)
20 W( either by a word that starts with a vowel or by a)21 W
11280 12591 MT
(word whose FD contains the feature \050a-an yes\051, the form ``an'' is used instead)
5 W( of ``a''.  For example, if)4 W
11280 13696 MT
(a word is produced from the FD \050\050lex "RPS"\051 \050a-an yes\051\051, the string ``an RPS'' will be produced.)SH
10280 15454 MT
(3.)SH
11280 XM
(The first word of the string produced by the linearizer is capitalized.)SH
10280 17212 MT
(4.)SH
11280 XM
(If an FD contains the feature \050punctuation \050\050capitalize yes\051\051\051, the string)
87 W( produced by the linearizer is)88 W
11280 18317 MT
(capitalized. If)
250 W( the value of capitalize is no, the string is not capitalize, even if it starts the sentence.)SH
10280 20075 MT
(5.)SH
11280 XM
(If an FD contains the feature \050punctuation \050\050before ","\051 \050after ","\051\051\051, the string produced by)
249 W( the)248 W
11280 21180 MT
(linearizer starts and ends with a comma.  Any string can be specified in this feature.)SH
10280 22938 MT
(6.)SH
11280 XM
(Leading punctuations are removed from the final string. \050There are 6 punctuation signs ,.;:!?\051)SH
10280 24696 MT
(7.)SH
11280 XM
(A final period \050.\051 is added to sentence if it does not already end with a punctuation.  If the mood of the)19 W
11280 25801 MT
(sentence is a specialization of interrogative, then a final question mark \050?\051 is added.)SH
10280 27559 MT
(8.)SH
11280 XM
(Sequences of punctuations are filtered according to the following rules:)SH
13336 28898 MT
(a.)SH
/Courier SF
14280 XM
(,, -> ,)600 W
/Times-Roman SF
33930 XM
(d.)SH
/Courier SF
34930 XM
(:, :)3000 W
16680 29929 MT
(,. .)3000 W
37330 XM
(:. :)3000 W
16680 30960 MT
(,; ;)3000 W
37330 XM
(:; :)3000 W
16680 31991 MT
(,: :)3000 W
37330 XM
(:: :)3000 W
16680 33022 MT
(,! !)3000 W
37330 XM
(:! !)3000 W
16680 34053 MT
(,? ?)3000 W
37330 XM
(:? ?)3000 W
/Times-Roman SF
13280 35811 MT
(b.)SH
/Courier SF
14280 XM
(., .,)3000 W
/Times-Roman SF
33986 XM
(e.)SH
/Courier SF
34930 XM
(!, !,)3000 W
16680 36842 MT
(.. .)3000 W
37330 XM
(!. !,)3000 W
16680 37873 MT
(.; .;)3000 W
37330 XM
(!; !;)3000 W
16680 38904 MT
(.: .:)3000 W
37330 XM
(!: !:)3000 W
16680 39935 MT
(.! .!)3000 W
37330 XM
(!! !)3000 W
16680 40966 MT
(.? .?)3000 W
37330 XM
(!? !?)3000 W
/Times-Roman SF
13336 42724 MT
(c.)SH
/Courier SF
14280 XM
(;, ;)3000 W
/Times-Roman SF
34097 XM
(f.)SH
/Courier SF
34930 XM
(?, ?,)3000 W
16680 43755 MT
(;. .)3000 W
37330 XM
(?. ?)3000 W
16680 44786 MT
(;; ;)3000 W
37330 XM
(?; ?)3000 W
16680 45817 MT
(;: :)3000 W
37330 XM
(?: ?)3000 W
16680 46848 MT
(;! !)3000 W
37330 XM
(?! ?)3000 W
16680 47879 MT
(;? ?)3000 W
37330 XM
(?? ?)3000 W
ES
%%Page: 58 59
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(58)SH
ES
%%Page: 59 60
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(59)SH
16 /Times-Bold AF
8280 11872 MT
(12. Control in FUF)SH
10 /Times-Roman AF
10080 13249 MT
(Pure functional unification can be too slow for practical tasks.  FUF offers several)
67 W( control tools that allow the)66 W
8280 14626 MT
(grammar writer to make a grammar more efficient.  This section summarizes how control is specified in FUF.)SH
10080 17105 MT
(The approach has)
80 W( been to add annotations to the grammars that can be used by the unifier to improve perfor-)81 W
8280 18482 MT
(mance. In)
440 W( a sense, this annotation approach is similar to the ``optional type declarations'' in Common Lisp.  An)95 W
8280 19859 MT
(important constraint that has been maintained is that the annotations do not change the semantics of the)
80 W( grammar,)81 W
8280 21236 MT
(but uniquely the order in which the unifier processes it.)SH
10080 23715 MT
(All the control annotations are applied to disjunctions.  From the measurements made on FUF)
20 W( working on large)19 W
8280 25092 MT
(grammars, it was found that optimization of conjunctions was not necessary, as)
64 W( the average length of conjunctions)65 W
8280 26469 MT
(over the course of a unification is quite small \050on the order of 10\051 and time spent processing them)
28 W( is quite small.  In)27 W
8280 27846 MT
(contrast, the overhead associated with dealing with disjunctions is quite high.)SH
10080 30325 MT
(The control techniques for disjunctions implemented in FUF are the following:)SH
/Symbol SF
10070 31778 MT
(\267)SH
/Times-Roman SF
10780 XM
(indexing)SH
/Symbol SF
10070 33536 MT
(\267)SH
/Times-Roman SF
10780 XM
(dependency-directed backtracking)SH
/Symbol SF
10070 35294 MT
(\267)SH
/Times-Roman SF
10780 XM
(lazy-evaluation / freeze)SH
/Symbol SF
10070 37052 MT
(\267)SH
/Times-Roman SF
10780 XM
(conditional evaluation)SH
10080 39531 MT
(In addition to these control mechanisms, a series of ``impure'' mechanisms ease the integration of)
56 W( unification-)57 W
8280 40908 MT
(based processing in a larger practical system:)SH
/Symbol SF
10070 42361 MT
(\267)SH
/Times-Roman SF
10780 XM
(type hierarchies and procedural typing)SH
/Symbol SF
10070 44119 MT
(\267)SH
/Times-Roman SF
10780 XM
(external functions)SH
/Symbol SF
10070 45877 MT
(\267)SH
/Times-Roman SF
10780 XM
(``given'' checking)SH
10080 48356 MT
(When all annotations are considered, the syntax of an)SH
/Courier SF
31742 XM
(alt)SH
/Times-Roman SF
33792 XM
(or)SH
/Courier SF
34875 XM
(ralt)SH
/Times-Roman SF
37525 XM
(constructs is:)SH
9 /Courier AF
10839 50989 MT
(\050alt { traceflag | \050trace on traceflag\051 | \050:trace flag\051 })SH
13539 51937 MT
({ \050index on path\051 | \050:index path\051})SH
13539 52885 MT
({ \050demo str\051 | \050:demo str\051})SH
13539 53833 MT
({ \050bk-class class\051 | \050:bk-class class\051 })SH
13539 54781 MT
({ \050:order {:random | :sequential}\051 })SH
13539 55729 MT
({ \050:wait <list>\051 })SH
13539 56677 MT
({ \050:ignore-unless <list>\051 })SH
13539 57625 MT
({ \050:ignore-when)
SH( <list>\051)
1080 W( })SH
13539 58573 MT
(\050 fd1 ... fdn \051\051)SH
10839 60469 MT
(The annotations \050trace, index, bk-class, order, wait and ignore\051)SH
10839 61417 MT
(can appear in any order.)SH
42480 12922 50 10440 62002 BX BX1
10 /Times-Roman AF
10080 64481 MT
(This chapter)
57 W( explains and gives examples on how these control features of FUF operate.  To better understand)56 W
8280 65858 MT
(why control annotations can make unification faster it is necessary to understand what makes)
57 W( unification slow.  So)58 W
8280 67235 MT
(we start by a discussion of how to measure the complexity of a grammar.)SH
ES
%%Page: 60 61
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(60)SH
14 /Times-Bold AF
6120 11738 MT
(12.1. Complexity)SH
10 /Times-Roman AF
7920 13115 MT
(The complexity of a grammar can be)
157 W( described by the number of possible paths through it, each path cor-)156 W
6120 14492 MT
(responding to the choice of one branch for each alternation.)SH
7920 16971 MT
(To understand this measure of complexity, it is useful to define the notion of disjunctive normal form)
136 W( .  In)137 W
6120 18348 MT
(general, a grammar is made up of)
104 W( embedded disjunctions, that is, of alts within alts.  Embedded disjunctions can)103 W
6120 19725 MT
(always be rewritten into top-level disjunctions.  This transformation works as indicated below:)SH
9 SS 
8679 21465 MT
(Embedded form)
SH( Normal)
12195 W( form)SH
/Courier SF
8679 23361 MT
(\050\050size \050\050alt \0501 2 3\051\051\051\051\051)
SH( \050\050alt)
8100 W( \050\050\050size 1\051\051)SH
34059 24309 MT
(\050\050size 2\051\051)SH
34059 25257 MT
(\050\050size 3\051\051\051\051\051)SH
8679 27153 MT
(\050\050alt \050\050\050cat \050\050alt \050np clause\051\051\051\051)
SH( \050\050alt)
3240 W( \050\050\050cat np\051)SH
12999 28101 MT
(\050rank group\051\051)
SH( \050rank)
14040 W( group\051\051)SH
12459 29049 MT
(\050\050cat word\051)
SH( \050\050cat)
15120 W( clause\051)SH
12999 29997 MT
(\050rank word\051\051\051\051\051)
SH( \050rank)
12960 W( group\051\051)SH
34059 30945 MT
(\050\050cat word\051)SH
34599 31893 MT
(\050rank word\051\051\051\051\051)SH
8679 33789 MT
(\050\050size \050\050alt \0501 2\051\051\051\051)
SH( \050\050alt)
9720 W( \050\050\050size 1\051)SH
9219 34737 MT
(\050weight \050\050alt \0501 2\051\051\051\051\051)
SH( \050weight)
12420 W( 1\051\051)SH
34059 35685 MT
(\050\050size 2\051)SH
34599 36633 MT
(\050weight 1\051\051)SH
34059 37581 MT
(\050\050size 1\051)SH
34599 38529 MT
(\050weight 2\051\051)SH
34059 39477 MT
(\050\050size 2\051)SH
34599 40425 MT
(\050weight 2\051\051\051\051)SH
42480 20561 50 8280 41010 BX BX1
10 /Times-Roman AF
7920 43489 MT
(The number of branches in the top level alt of an FD in normal form is)
205 W( exponential in the depth of the)206 W
8 SS 
52120 44521 MT
(29)SH
10 SS 
6120 44866 MT
(embedding of alts in the)
147 W( original FD.  In practice, for large grammars, the normal form can contain up to 10)146 W
6120 46243 MT
(branches.)SH
7920 48722 MT
(In certain implementations, disjunctions are expanded and kept in extensive form instead of being)
62 W( ``resolved'')63 W
6120 50099 MT
(as in FUF, by)
38 W( choosing one branch out of the set of branches.  In such an approach, the unification of an FD with a)37 W
6120 51476 MT
(disjunction yields a new disjunction:)SH
/Courier SF
8520 52882 MT
(unify\050FD, \050\050alt \050d1...dn\051\051\051\051 = \050\050alt \050unify FD d1\051...\050unify FD dn\051\051\051)SH
/Times-Roman SF
6120 54350 MT
(If one of the branches)SH
/Courier SF
15089 XM
(di)SH
/Times-Roman SF
16539 XM
(is not compatible with)SH
/Courier SF
25706 XM
(FD)SH
/Times-Roman SF
(, the branch is canceled, by virtue of the equivalences:)SH
9 /Courier AF
8679 56035 MT
(\050\050alt \050d1 fail\051\051\051 = d1)SH
8679 56983 MT
(\050\050alt \050\051\051\051 = fail)SH
42480 2494 50 8280 57568 BX BX1
10 /Times-Roman AF
6120 58978 MT
(where)SH
/Courier SF
8887 XM
(fail)SH
/Times-Roman SF
11611 XM
(is the symbolic representation of an incompatible FD.  The problem with such an approach is that in)74 W
6120 60355 MT
(practice many disjuncts)
20 W( stay ``alive'' during the unification process, and the result tends to take on sizes close to the)19 W
6120 61732 MT
(normal form expansion of the grammar, which is clearly unmanageable.)
50 W( The)
351 W( FUF implementation does not follow)51 W
6120 63109 MT
(this approach, although one form)
175 W( of the)174 W
/Courier SF
23395 XM
(wait)SH
/Times-Roman SF
26219 XM
(construct presented in Section 12 allows the grammar writer to)174 W
6120 64486 MT
(selectively keep certain disjunctions unresolved when desired.)SH
7920 66965 MT
(The measure of the complexity of a grammar is thus the number)
176 W( of branches the grammar would have in)177 W
6120 68342 MT
(disjunctive normal form.  Indexing the grammar actually divides this measure of complexity by a great number.)SH
7920 70821 MT
(In FUF, the functions)4 W
/Courier SF
16797 XM
(complexity)SH
/Times-Roman SF
23051 XM
(and)SH
/Courier SF
24749 XM
(avg-complexity)SH
/Times-Roman SF
33403 XM
(compute different measures of)
4 W( the complexity of)3 W
ES
%%Page: 61 62
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(61)SH
8280 11486 MT
(a grammar.)SH
9 /Courier AF
10839 13171 MT
(\050COMPLEXITY &optional grammar with-index\051)SH
10839 14119 MT
(--> number of branches of grammar in disjunctive normal form.)SH
10839 15067 MT
(- By default, grammar is *u-grammar*)SH
10839 16015 MT
(- By default, with-index is T. When it is T, all indexed alts are)SH
11919 16963 MT
(considered as one single branch, when it is nil, they are)SH
11919 17911 MT
(considered as regular alts.)SH
10839 19807 MT
(\050AVG-COMPLEXITY &optional grammar with-index rough-avg\051)SH
10839 20755 MT
(--> "average" number of branches tried when input contains no)SH
12999 21703 MT
(constraint.)SH
10839 22651 MT
(- By default, grammar is *u-grammar*)SH
10839 23599 MT
(- By default, with-index is T.  When it is T, all indexed alts are)SH
11919 24547 MT
(considered as one single branch, when it is nil, they are)SH
11919 25495 MT
(considered as regular alts.)SH
10839 26443 MT
(- By default, rough-avg is nil. When it is nil, the average of an)SH
11919 27391 MT
(alt is the sum of the complexity of the half first branches. When)SH
11919 28339 MT
(it is T, the average is half of the sum of the complexity of all)SH
11919 29287 MT
(branches.)SH
42480 17662 50 10440 29872 BX BX1
10 /Times-Roman AF
10080 32351 MT
(Note that these functions do not currently measure the ambiguity of the patterns included in the grammar.)SH
14 /Times-Bold AF
8280 36169 MT
(12.2. Indexing)SH
10 /Times-Roman AF
10080 37546 MT
(The main problem for FUF is to handle non-deterministic constructs in the)
137 W( grammar. The non-deterministic)138 W
8280 38923 MT
(constructs are currently:)23 W
/Courier SF
18263 XM
(alt)SH
/Times-Roman SF
(,)SH
/Courier SF
20586 XM
(ralt)SH
/Times-Roman SF
(,)SH
/Courier SF
23509 XM
(opt)SH
/Times-Roman SF
25581 XM
(and)SH
/Courier SF
27297 XM
(pattern)SH
/Times-Roman SF
(. Unification of these constructs with an input can produce)22 W
8280 40300 MT
(several results. Whenever the unifier encounters such a construct, it does not know which of)
57 W( the possible results to)58 W
8280 41677 MT
(choose. For)
408 W( example, when unifying an)79 W
/Courier SF
25136 XM
(alt)SH
/Times-Roman SF
27265 XM
(there is no way to choose a)
79 W( branch out of the many available in the)78 W
/Courier SF
8280 43054 MT
(alt)SH
/Times-Roman SF
(. The way the)
22 W( program works is to try each of the possibilities one after the other. When the unification later on)23 W
8280 44431 MT
(fails, the program backtracks and tries the next possibility.)SH
10080 46910 MT
(This method is actually a blind search through the space of all the descriptions)
79 W( compatible with the grammar.)78 W
8280 48287 MT
(Indexing is a technique used to guide the search in a more efficient way when more knowledge is)
63 W( available. Other)64 W
8280 49664 MT
(heuristics to control search are discussed in Section 12 and include goal freezing \050with the)176 W
/Courier SF
47219 XM
(wait)SH
/Times-Roman SF
50045 XM
(control\051 and)175 W
8280 51041 MT
(dependency-directed backtracking \050with the)SH
/Courier SF
26108 XM
(bk-class)SH
/Times-Roman SF
31158 XM
(construct\051.)SH
8 SS 
30578 53175 MT
(12)SH
10 SS 
10080 53520 MT
(FUF allows indexing of)3 W
/Courier SF
19870 XM
(alt)SH
/Times-Roman SF
21923 XM
(and)SH
/Courier SF
23620 XM
(ralt)SH
/Times-Roman SF
26273 XM
(constructs.)SH
31884 XM
(Indexing tells the unifier how to choose one)
3 W( branch out of)4 W
8280 54897 MT
(the alternation based on the value)
24 W( of the index only, and without considering the other branches ever. The following)23 W
8280 56274 MT
(example illustrates the technique.)SH
10800 50 8280 66656 UL
6 SS 
9080 67995 MT
(12)SH
8 SS 
9680 68304 MT
(A)SH
/Courier SF
10490 XM
(opt)SH
/Times-Roman SF
12162 XM
(construct is actually an)32 W
/Courier SF
19840 XM
(alt)SH
/Times-Roman SF
21512 XM
(with 2 branches, one being)
32 W( the trivial nil. It would not make sense to index it. A)33 W
/Courier SF
47790 XM
(pattern)SH
/Times-Roman SF
51383 XM
(construct is)33 W
8280 69228 MT
(ambiguous because patterns like \050...a...b...\051 and \050...c...d...\051 can)
28 W( be combined in many ways.  Actually, it is always more efficient to put patterns at)27 W
8280 70152 MT
(the end of the grammar, because much of the ambiguity generated by these patterns would not change the unification anyway, except when the \050*)8 W
8280 71076 MT
(constituent\051 device is used. In)
31 W( any case, the equivalent of `indexing' a pattern, that is reducing the ambiguity, is to use as few dots as possible in)30 W
8280 72000 MT
(the patterns.)SH
ES
%%Page: 62 63
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(62)SH
9 /Courier AF
8679 11761 MT
(Example taken from gr4)SH
11880 50 8679 11961 UL
8679 13657 MT
(\050\050alt \050:trace process\051 \050:index process-type\051)SH
10299 14605 MT
(\050\050\050process-type actions\051)SH
11379 15553 MT
(...\051)SH
10839 16501 MT
(\050\050process-type mental\051)SH
11379 17449 MT
(...\051)SH
10839 18397 MT
(\050\050process-type attributive\051)SH
11379 19345 MT
(...\051)SH
10839 20293 MT
(\050\050process-type equative\051)SH
11379 21241 MT
(...\051\051\051)SH
9219 22189 MT
(...\051)SH
42480 11974 50 8280 22774 BX BX1
10 /Times-Roman AF
7920 25253 MT
(In the)
44 W( example, the)45 W
/Courier SF
16014 XM
(\050:index process-type\051)45 W
/Times-Roman SF
28954 XM
(declaration indicates that all the branches of the alternation)45 W
6120 26630 MT
(can be distinguished by the value of the)156 W
/Courier SF
23477 XM
(process-type)SH
/Times-Roman SF
31083 XM
(feature alone.  If)
156 W( the input contains a bound feature)155 W
/Courier SF
6120 28007 MT
(process-type)SH
/Times-Roman SF
(, it is)
37 W( possible to directly choose the corresponding branch of the alternation. If however the input)38 W
6120 29384 MT
(does not correspond such a feature, it has to go through the)SH
/Courier SF
29977 XM
(alt)SH
/Times-Roman SF
32027 XM
(in the regular way, with no jumping around.)SH
7920 31863 MT
(This is what happens in the tracing messages for each case:)SH
9 /Courier AF
8679 33548 MT
(If input is:)SH
10839 34496 MT
(\050\050cat clause\051 \050process-type attributive\051 ...\051)SH
8679 35444 MT
(Trace message is:)SH
10839 36392 MT
(-->Entering alt PROCESS -- Jump indexed to branch 3 ATTRIBUTIVE)SH
8679 38288 MT
(If input does not contain a feature process-type:)SH
10839 39236 MT
(\050\050cat clause\051 \050prot John\051 ...\051)SH
8679 40184 MT
(Trace message is:)SH
10839 41132 MT
(-->No value given in input for index PROCESS-TYPE - No jump)SH
10839 42080 MT
(-->Entering alt PROCESS -- Branch #1)SH
42480 10078 50 8280 42665 BX BX1
10 /Times-Roman AF
7920 45144 MT
(A grammar is always indexed)
71 W( at the top-level by the)70 W
/Courier SF
29787 XM
(cat)SH
/Times-Roman SF
31907 XM
(feature \050or the currently set cat attribute \051. It makes)70 W
6120 46521 MT
(more sense to index on the features that will be bound in the input or at)
19 W( the moment the)20 W
/Courier SF
41676 XM
(alt)SH
/Times-Roman SF
43746 XM
(or)SH
/Courier SF
44849 XM
(ralt)SH
/Times-Roman SF
47519 XM
(will get tried,)20 W
6120 47898 MT
(but it never hurts to index an)SH
/Courier SF
17869 XM
(alt)SH
/Times-Roman SF
(, so it is recommended to index whatever is indexable.)SH
7920 50377 MT
(The indexed feature can be at the top level of all the branches, as in the first example for)21 W
/Courier SF
43921 XM
(process-type)SH
/Times-Roman SF
(, but)21 W
6120 51754 MT
(it can also be at lower levels, like in the following example:)SH
9 /Courier AF
8679 54387 MT
(Example taken from gr4:)SH
12420 50 8679 54587 UL
8679 56283 MT
(\050\050alt verb-trans \050:index \050verb transitivity-class\051\051)SH
18360 50 17859 56483 UL
10299 57231 MT
(\050\050\050verb \050\050transitivity-class intransitive\051\051\051)SH
11379 58179 MT
(...\051)SH
10839 59127 MT
(\050\050verb \050\050transitivity-class transitive\051\051\051)SH
11379 60075 MT
(...\051)SH
10839 61023 MT
(\050\050verb \050\050transitivity-class bitransitive\051\051\051)SH
11379 61971 MT
(...\051)SH
10839 62919 MT
(\050\050verb \050\050transitivity-class neuter\051\051\051)SH
11379 63867 MT
(...\051\051)SH
9219 64815 MT
(...\051\051)SH
42480 13684 50 8280 66162 BX BX1
10 /Times-Roman AF
7920 68641 MT
(If the index identifies more than one branches in the disjunction, then the index will serve)
227 W( to prune the)228 W
6120 70018 MT
(disjunction from)
183 W( all the banches that do not match the index, and the search will continue with the remaining)182 W
6120 71395 MT
(branches as usual.  For example:)SH
ES
%%Page: 63 64
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(63)SH
9 /Courier AF
10839 12709 MT
(\050\050alt \050:index cat\051)SH
12459 13657 MT
(\050\050\050cat clause\051)SH
13539 14605 MT
(\050mood declarative\051)SH
13539 15553 MT
(...\051)SH
12999 16501 MT
(\050\050cat clause\051)SH
13539 17449 MT
(\050mood non-finite\051)SH
13539 18397 MT
(...\051)SH
12999 19345 MT
(\050\050cat np\051)SH
13539 20293 MT
(...\051\051\051)SH
11919 21241 MT
(...\051)SH
42480 11788 50 10440 22588 BX BX1
10 /Times-Roman AF
10080 25067 MT
(When this disjunction is unified with the input)189 W
/Courier SF
30426 XM
(\050cat clause\051)189 W
/Times-Roman SF
(, two branches are retained by)
189 W( the index)190 W
8280 26444 MT
(matcher \050branches 1 and 2\051.  Branch 3 does not match the index and is)
64 W( therefore eliminated.  The unifier will then)63 W
8280 27821 MT
(proceed with the alt as if it only contained branches 1 and 2.)SH
10080 30300 MT
(Note that if a branch does not contain a bound value for)
3 W( the index, it is as if it contains the value NIL, and it will)4 W
8280 31677 MT
(therefore always retained in the alt after the index matching.)SH
10080 34156 MT
(WARNING: index does)35 W
/Times-Bold SF
20100 XM
(not)SH
/Times-Roman SF
21774 XM
(work if several branches are grouped together with an alt embedded under the)
35 W( key)34 W
8280 35533 MT
(attribute. For)
250 W( example, the following input will fail with the following grammar:)SH
9 /Courier AF
10839 37218 MT
(\050\050cat clause\051 \050mood finite\051\051)SH
10839 39114 MT
(\050\050alt \050:index cat\051)SH
11919 40062 MT
(\050\050\050cat \050\050alt \050clause np vp\051\051\051\051)SH
12999 41010 MT
(\050cset \050\050== head\051\051\051\051)SH
12459 41958 MT
(\050\050cat \050\050alt \050n v adj\051\051\051\051)SH
12999 42906 MT
(\050cset \050=\051\051\051\051\051\051)SH
42480 7234 50 10440 43491 BX BX1
10 /Times-Roman AF
10080 45970 MT
(The unification fails because)91 W
/Courier SF
22219 XM
(clause)SH
/Times-Roman SF
26160 XM
(does not match the expression)91 W
/Courier SF
38920 XM
(\050\050alt \050clause np vp\051\051\051)92 W
/Times-Roman SF
52738 XM
(in the)92 W
8280 47347 MT
(index search.  The reason for this limitation is that)91 W
/Courier SF
29549 XM
(index)SH
/Times-Roman SF
32890 XM
(is a speed optimization feature, and making it support)90 W
/Courier SF
8280 48724 MT
(alt)SH
/Times-Roman SF
10391 XM
(in some rare cases would make all uses of)61 W
/Courier SF
27964 XM
(index)SH
/Times-Roman SF
31275 XM
(slower. It)
372 W( has)
61 W( therefore been decided to make index more)62 W
8280 50101 MT
(restricted and more efficient.)SH
14 /Times-Bold AF
8280 53941 MT
(12.3. Dependency-directed Backtracking and)SH
/Times-Roman SF
35501 XM
(BK-CLASS)SH
10 /Courier AF
10080 55318 MT
(BK-class)SH
/Times-Roman SF
15149 XM
(implements a version of dependency-directed backtracking)
19 W( [3])
SH( specialized to the case of FUF.)
19 W( The)287 W
/Courier SF
8280 56695 MT
(bk-class)SH
/Times-Roman SF
13368 XM
(construct relies on the fact that in FUF, a)
38 W( failure always occurs because there is a conflict between two)39 W
8280 58072 MT
(values for a certain attribute at a certain location in the total FD.  In the example illustrating this section, back-)132 W
8280 59449 MT
(tracking is necessary because an equation requires that the value of the feature)59 W
/Courier SF
40621 XM
({manner manner-conveyed})59 W
/Times-Roman SF
8280 60826 MT
(be instantiated, but the actual feature is not.  The path)14 W
/Courier SF
30125 XM
({manner manner-conveyed})14 W
/Times-Roman SF
44803 XM
(defines the)14 W
/Times-Italic SF
49441 XM
(address of the)14 W
8 /Times-Roman AF
11197 61858 MT
(13)SH
10 /Times-Italic AF
8280 62203 MT
(failure)SH
/Times-Roman SF
(.)SH
10080 64682 MT
(The idea is that the location of a failure can be used to identify the only decision)
114 W( points in the backtracking)115 W
8280 66059 MT
(stack that could have caused it.)
43 W( This)
334 W( identification requires additional knowledge that must be declared in the)42 W
8 SS 
53229 XM
(FUG)SH
10 SS 
(.)SH
8280 67436 MT
(More precisely, the)61 W
8 SS 
16461 XM
(FUG)SH
10 SS 
18373 XM
(writer is)
61 W( first allowed to declare certain paths to be of a certain)62 W
/Courier SF
44477 XM
(bk-class)SH
/Times-Roman SF
(. Then,)
374 W( in the)62 W
10800 50 8280 70352 UL
6 SS 
9080 71691 MT
(13)SH
8 SS 
9680 72000 MT
(In an FD, each embedded feature can be viewed as an equation between the path leading to the feature in the total FD and the feature value.)SH
ES
%%Page: 64 65
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(64)SH
8 SS 
6120 11486 MT
(FUG)SH
10 SS 
(, every choice points that correspond to this)SH
/Courier SF
25413 XM
(bk-class)SH
/Times-Roman SF
30463 XM
(must be explicitly declared.)SH
7920 13965 MT
(For example, the following statements are used in grammar gr7:)SH
9 /Courier AF
9759 16598 MT
(\050define-bk-class 'manner-conveyed 'manner\051)SH
9759 17546 MT
(\050define-bk-class 'manner 'manner\051)SH
9759 18494 MT
(\050define-bk-class 'lexical-verb '\050ao manner\051\051)SH
9759 19442 MT
(\050define-bk-class 'ao-conveyed 'ao\051)SH
9759 20390 MT
(\050define-bk-class 'ao 'ao\051)SH
42480 7048 50 8280 21737 BX BX1
10 /Times-Roman AF
6120 23147 MT
(The first one specifies that any path ending with the symbol)45 W
/Courier SF
30807 XM
(manner-conveyed)SH
/Times-Roman SF
40102 XM
(is of class manner.  In addition,)44 W
6120 24524 MT
(we tag in the FUG all)139 W
/Courier SF
15842 XM
(alt)SH
/Times-Roman SF
(s that have an influence on the handling of the)
139 W( manner constraint with a declaration)140 W
/Courier SF
6120 25901 MT
(\050bk-class manner\051)SH
/Times-Roman SF
16570 XM
(as in:)SH
9 SS 
11919 28534 MT
(;; In GR7 -- CLAUSE branch -- ADJUNCTS region)SH
/Courier SF
11919 29482 MT
(\050alt manner \050:demo "Is there a manner role?"\051)SH
12999 30430 MT
(\050:bk-class manner\051)SH
9720 50 12999 30630 UL
12999 31378 MT
(\050\050\050manner none\051\051)SH
/Times-Roman SF
13539 32326 MT
(;; can it be realized by other means - delay with ANY)SH
/Courier SF
13539 33274 MT
(\050\050manner \050\050manner-conveyed any\051\051\051\051)SH
/Times-Roman SF
13539 34222 MT
(;; if cannot be realized any other way, resort to an adverb)SH
/Courier SF
13539 35170 MT
(\050\050manner-comp \050\050cat adv\051)SH
21639 36118 MT
(\050concept {^ ^ manner concept}\051)SH
21639 37066 MT
(\050lex {^ ^ manner lex}\051\051\051)SH
14079 38014 MT
(\050manner \050\050manner-conveyed yes\051\051\051)SH
14079 38962 MT
(\050pattern \050dots manner-comp verb dots\051\051\051)SH
/Times-Roman SF
13539 39910 MT
(;; or to a pp)SH
/Courier SF
13539 40858 MT
(\050\050manner-comp \050\050cat pp\051)SH
21639 41806 MT
(\050lex {^ ^ manner lex}\051)SH
21639 42754 MT
(\050concept {^ ^ manner concept}\051)SH
21639 43702 MT
(\050opt \050\050prep \050\050lex "with"\051\051\051\051\051\051\051)SH
14079 44650 MT
(\050manner \050\050manner-conveyed yes\051\051\051)SH
14079 45598 MT
(\050pattern \050dots verb dots manner-comp dots\051\051\051\051\051)SH
42480 19558 50 8280 46183 BX BX1
10 /Times-Roman AF
7920 48662 MT
(This fragment extracted)
203 W( from grammar GR7  illustrates a possible use of the)202 W
/Courier SF
41293 XM
(bk-class)SH
/Times-Roman SF
46545 XM
(construct. The)654 W
6120 50039 MT
(example is detailed in a paper accompanying the manual \050available in file .../doc/bk-class\051.  The fragment)
120 W( above)121 W
6120 51416 MT
(implements the following decisions:)
134 W( if there is no)133 W
/Courier SF
27242 XM
(manner)SH
/Times-Roman SF
31225 XM
(role specified in the input, then nothing needs to be)133 W
6120 52793 MT
(done. If)
304 W( there is a manner role, then the grammar must decide how to realize it.  One option is to realize it as either)28 W
6120 54170 MT
(an adverbial adjunct or as a PP adjunct.)
34 W( Another)
317 W( option, shown in the next figure, is to realize the)33 W
/Courier SF
46199 XM
(manner)SH
/Times-Roman SF
50082 XM
(role by)33 W
6120 55547 MT
(selecting a verb which would carry the manner meaning.  The three)
240 W( possibilities are illustrated by the three)241 W
6120 56924 MT
(sentences, where the constituent realizing the manner role is in italics:)SH
8120 58263 MT
(1.)SH
9120 XM
(The Denver Nuggets)SH
/Times-Italic SF
17701 XM
(narrowly)SH
/Times-Roman SF
21618 XM
(beat the Boston Celtics 101-99.)SH
8120 60021 MT
(2.)SH
9120 XM
(The Denver Nuggets beat the Boston Celtics)SH
/Times-Italic SF
27201 XM
(by a slight margin)SH
/Times-Roman SF
34757 XM
(101-99.)SH
8120 61779 MT
(3.)SH
9120 XM
(The Denver Nuggets)SH
/Times-Italic SF
17701 XM
(edged)SH
/Times-Roman SF
20339 XM
(the Boston Celtics 101-99.)SH
7920 64258 MT
(The fragment of the grammar implementing the choice of the verb is shown in the next figure:)SH
ES
%%Page: 65 66
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(65)SH
9 /Courier AF
10839 12709 MT
(;; Lexicon for verbs: mapping concept - lex + connotations)SH
10839 13657 MT
(\050\050cat lex-verb\051)SH
11379 14605 MT
(\050alt verbal-lexicon \050:demo "What lexical entry can be used for the verb?"\051)SH
12459 15553 MT
(\050:index concept\051)SH
12459 16501 MT
(\050:bk-class \050voice-class transitivity\051\051)SH
12459 17449 MT
(\050)SH
/Times-Roman SF
12999 18397 MT
(;; Need to express the result of a game)SH
/Courier SF
12999 19345 MT
(\050\050concept game-result\051)SH
13539 20293 MT
(\050transitive-class transitive\051)SH
13539 21241 MT
(\050voice-class non-middle\051)SH
13539 22189 MT
(\050process-class action\051)SH
13539 24085 MT
(\050alt \050:bk-class \050ao manner\051\051)SH
12420 50 16239 24285 UL
14619 25033 MT
(\050)SH
/Times-Roman SF
15159 25981 MT
(;; The verbs edge or nip express the manner)SH
/Courier SF
15159 26929 MT
(\050\050{manner} \050\050concept narrow\051)SH
21639 27877 MT
(\050manner-conveyed yes\051\051\051)SH
15699 28825 MT
(\050lex \050\050ralt \050"edge" "nip"\051\051\051\051\051)SH
/Times-Roman SF
15159 30721 MT
(;; The verbs stun or surprise express an evaluation of agent)SH
/Courier SF
15159 31669 MT
(\050\050{AO} \050\050concept rating\051)SH
19479 32617 MT
(\050carrier {agent}\051)SH
19479 33565 MT
(\050orientation -\051)SH
19479 34513 MT
(\050ao-conveyed yes\051\051\051)SH
15699 35461 MT
(\050lex \050\050ralt \050"stun" "surprise"\051\051\051\051\051)SH
/Times-Roman SF
15699 37357 MT
(;; Neutral verbs)SH
/Courier SF
15699 38305 MT
(\050\050lex \050\050ralt \050"beat" "defeat" "down"\051\051\051\051\051\051\051\051)SH
/Times-Roman SF
12999 40201 MT
(;; More verbs for other concepts)SH
/Courier SF
12999 41149 MT
(....)SH
12999 42097 MT
(\050\050concept move\051)SH
13539 43045 MT
(\050lex \050\050ralt \050"walk" "run"\051\051\051\051\051\051\051\051)SH
42480 33592 50 10440 44392 BX BX1
10 /Times-Roman AF
10080 46871 MT
(Examples of input that exercise these parts)
9 W( of the grammar are provided in file ir7.)
8 W( A)
524 W( simple example is shown)8 W
8280 48248 MT
(in the next figure:)SH
9 /Courier AF
10839 50881 MT
(\050defun t1 \050\051)SH
11919 51829 MT
(\050format t "t1 -->)SH
/Times-Roman SF
21639 XM
(The Denver Nuggets edged the Celtics.)SH
/Courier SF
(~%"\051)SH
11919 52777 MT
(\050setf t1 '\050\050cat clause\051)SH
17859 53725 MT
(\050process-type action\051)SH
17859 54673 MT
(\050process \050\050concept game-result\051\051\051)SH
17859 55621 MT
(\050agent \050\050cat proper\051)SH
22179 56569 MT
(\050lex "The Denver Nugget"\051)SH
22179 57517 MT
(\050number plural\051\051\051)SH
17859 58465 MT
(\050medium \050\050cat proper\051)SH
22719 59413 MT
(\050lex "the Celtic"\051)SH
22719 60361 MT
(\050number plural\051\051\051)SH
17859 61309 MT
(\050tense past\051)SH
17859 62257 MT
(\050manner \050\050concept narrow\051\051\051\051\051\051)SH
42480 14632 50 10440 63604 BX BX1
10 /Times-Roman AF
10080 66083 MT
(The overall flow of control through this grammar concerning the realization of the manner role is as)
87 W( follows:)88 W
8280 67460 MT
(The unifier first processes the input at the clause level.  When it reaches the region dealing with adjuncts, it checks)46 W
8280 68837 MT
(the)SH
/Courier SF
9828 XM
(manner)SH
/Times-Roman SF
13754 XM
(role. There)
402 W( is a)76 W
/Courier SF
20632 XM
(manner)SH
/Times-Roman SF
24558 XM
(role in input)77 W
/Courier SF
29928 XM
(t1)SH
/Times-Roman SF
(, so the grammar has a choice between the three modes of)77 W
8280 70214 MT
(realization listed above - verb, adverb or PP.  The grammar first tries to ``leave)
162 W( a chance to the verb'' - more)161 W
8280 71591 MT
(precisely, it leaves a chance to)
51 W( some other unspecified constituent in the grammar to account for the)52 W
/Courier SF
49373 XM
(manner)SH
/Times-Roman SF
53275 XM
(role.)SH
ES
%%Page: 66 67
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(66)SH
6120 11486 MT
(If the verb happens to convey the manner, then)
170 W( nothing else needs to be done.  This case is illustrated by the)169 W
6120 12863 MT
(following trace of unification of example)SH
/Courier SF
22839 XM
(t1)SH
/Times-Roman SF
24289 XM
(in file)SH
/Courier SF
26900 XM
(ir7)SH
/Times-Roman SF
(.)SH
9 SS 
8679 15496 MT
(Trace of example t1)SH
8679 17392 MT
(;; Set up the traces)SH
/Courier SF
8679 18340 MT
(> \050load "$fug5/examples/gr7"\051)SH
8679 19288 MT
(> \050load "$fug5/examples/ir7"\051)SH
8679 20236 MT
(> \050trace-disable-all\051)SH
8679 21184 MT
(> \050trace-enable-match "manner"\051)SH
8679 22132 MT
(> \050trace-enable-match "game-result-lex"\051)SH
8679 23080 MT
(> \050trace-bk-class t\051)SH
/Times-Roman SF
8679 24028 MT
(;; Run example)SH
/Courier SF
8679 24976 MT
(> \050uni \050t1\051\051)SH
8679 26872 MT
(t1 --> The Denver Nuggets edged the Celtics.)SH
8679 27820 MT
(>STARTING CAT CLAUSE AT LEVEL {})SH
8679 29716 MT
(-->Entering alt MANNER -- Branch #1)SH
8679 30664 MT
(-->Fail in trying \050\050CONCEPT NARROW\051 \050LEX "narrowly"\051\051 with NONE)SH
10299 31612 MT
(at level {MANNER})SH
8679 32560 MT
(>Special path {MANNER} caught by class \050MANNER\051 after 1 frame)SH
8679 34456 MT
(-->Entering alt MANNER -- Branch #2)SH
8679 35404 MT
(-->Updating \050MANNER-CONVEYED NIL\051 with ANY at level {MANNER MANNER-CONVEYED})SH
8679 36352 MT
(-->Success with branch 2 in alt MANNER)SH
8679 38248 MT
(>Special path {VERB TRANSITIVE-CLASS} caught by class \050TRANSITIVITY\051)SH
9219 39196 MT
(after 1 frame)SH
8679 41092 MT
(>STARTING CAT PROPER AT LEVEL {SUBJECT})SH
8679 42040 MT
(>STARTING CAT VERB-GROUP AT LEVEL {VERB})SH
8679 42988 MT
(>STARTING CAT PROPER AT LEVEL {OBJECT})SH
8679 43936 MT
(>STARTING CAT LEX-VERB AT LEVEL {VERB LEXICAL-VERB})SH
/Times-Roman SF
8679 45832 MT
(;; choose a verb that expresses the manner)SH
/Courier SF
8679 46780 MT
(-->Entering alt GAME-RESULT-LEX -- Branch #1)SH
8679 47728 MT
(-->Fail in trying NONE with RATING at level {AO CONCEPT})SH
8679 48676 MT
(-->Entering alt GAME-RESULT-LEX -- Branch #2)SH
8679 49624 MT
(-->Updating \050MANNER-CONVEYED ANY\051 with YES at level {MANNER MANNER-CONVEYED})SH
8679 50572 MT
(-->Updating \050LEX NIL\051 with "nip" at level {VERB LEX})SH
8679 51520 MT
(-->Success with branch 2 in alt GAME-RESULT-LEX)SH
8679 53416 MT
([Used 59 backtracking points - 12 wrong branches - 0 undos])SH
8679 54364 MT
(The Denver Nuggets nipped the Celtics.)SH
42480 42124 50 8280 55711 BX BX1
10 /Times-Roman AF
7920 58190 MT
(But if for any reason \050like the interaction between manner and argumentation)
28 W( detailed in the bk-class paper and)29 W
6120 59567 MT
(illustrated in examples found in file ir7 or because the input already)
24 W( specifies the verb\051 the grammar fails to account)23 W
6120 60944 MT
(for the)SH
/Courier SF
9009 XM
(manner)SH
/Times-Roman SF
12860 XM
(role in other constituents, the)1 W
/Courier SF
24753 XM
(ANY)SH
/Times-Roman SF
26804 XM
(constraint put under the)1 W
/Courier SF
36529 XM
(manner-conveyed)SH
/Times-Roman SF
45780 XM
(feature will fail at)1 W
6120 62321 MT
(determination time. At this time, we know we failed because of the)90 W
/Courier SF
34307 XM
(manner-conveyed)SH
/Times-Roman SF
43647 XM
(feature, so if we back-)90 W
6120 63698 MT
(track, we want to backtrack to the latest)
93 W( choice that involved the)94 W
/Courier SF
33208 XM
(manner)SH
/Times-Roman SF
37152 XM
(role realization.  With the)94 W
/Courier SF
48120 XM
(bk-class)SH
/Times-Roman SF
6120 65075 MT
(annotations, the unifier will backtrack)93 W
/Times-Italic SF
22027 XM
(directly)SH
/Times-Roman SF
25425 XM
(to the last choice point of)
93 W( class)92 W
/Courier SF
38656 XM
(manner)SH
/Times-Roman SF
(, ignoring all intermediate)92 W
6120 66452 MT
(decisions. This)
445 W( case is illustrated by the trace of the unification of example)98 W
/Courier SF
37903 XM
(t2)SH
/Times-Roman SF
39451 XM
(from file ir7.)
98 W( In)794 W
/Courier SF
47010 XM
(t2)SH
/Times-Roman SF
48558 XM
(the verb is)98 W
6120 67829 MT
(specified and set to be ``beat'' which does not convey the)25 W
/Courier SF
29695 XM
(manner)SH
/Times-Roman SF
33570 XM
(role. In)
298 W( this case, the unifier needs to backtrack)24 W
6120 69206 MT
(as illustrated:)SH
ES
%%Page: 67 68
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(67)SH
9 /Courier AF
10839 11761 MT
(> \050uni \050t2\051\051)SH
10839 12709 MT
(t2 --> The Denver Nuggets narrowly beat the Celtics.)SH
10839 13657 MT
(>STARTING CAT CLAUSE AT LEVEL {})SH
/Times-Roman SF
10839 15553 MT
(;; First leave a chance to the verb)SH
/Courier SF
10839 16501 MT
(-->Entering alt MANNER -- Branch #1)SH
10839 17449 MT
(-->Fail in trying \050\050CONCEPT NARROW\051 \050LEX "narrowly"\051\051 with NONE)SH
12459 18397 MT
(at level {MANNER})SH
10839 19345 MT
(-->Entering alt MANNER -- Branch #2)SH
10839 20293 MT
(-->Updating \050MANNER-CONVEYED NIL\051 with ANY at level {MANNER MANNER-CONVEYED})SH
10839 21241 MT
(-->Success with branch 2 in alt MANNER)SH
10839 23137 MT
(>STARTING CAT PROPER AT LEVEL {SUBJECT})SH
10839 24085 MT
(>STARTING CAT VERB-GROUP AT LEVEL {VERB})SH
10839 25033 MT
(>STARTING CAT PROPER AT LEVEL {OBJECT})SH
10839 25981 MT
(>STARTING CAT LEX-VERB AT LEVEL {VERB LEXICAL-VERB})SH
/Times-Roman SF
10839 27877 MT
(;; Now choose the verb: it must be beat)SH
/Courier SF
10839 28825 MT
(-->Entering alt GAME-RESULT-LEX -- Branch #1)SH
10839 29773 MT
(-->Fail in trying NONE with RATING at level {AO CONCEPT})SH
10839 30721 MT
(-->Entering alt GAME-RESULT-LEX -- Branch #2)SH
10839 31669 MT
(-->Updating \050MANNER-CONVEYED ANY\051 with YES at level {MANNER MANNER-CONVEYED})SH
10839 32617 MT
(-->Fail in trying "beat" with "nip" at level {VERB LEX})SH
10839 33565 MT
(-->Fail in trying "beat" with "edge" at level {VERB LEX})SH
10839 34513 MT
(-->Entering alt GAME-RESULT-LEX -- Branch #3)SH
10839 35461 MT
(-->Updating \050LEX "beat"\051 with "beat" at level {VERB LEX})SH
10839 36409 MT
(-->Success with branch 3 in alt GAME-RESULT-LEX)SH
/Times-Roman SF
10839 38305 MT
(;; Problem now: manner is not conveyed! Backtrack...)SH
/Courier SF
10839 39253 MT
([Used 64 backtracking points - 17 wrong branches - 1 undo])SH
10839 40201 MT
(>Fail in Determine: found an ANY at level {MANNER MANNER-CONVEYED})SH
10839 41149 MT
(>CURRENT SENTENCE: The Denver Nuggets beat the Celtics.)SH
/Times-Roman SF
10839 43045 MT
(;; Backtrack because of manner-conveyed)SH
/Courier SF
10839 43993 MT
(>Special path {MANNER MANNER-CONVEYED} caught by class \050AO MANNER\051)SH
11379 44941 MT
(after 2 frames)SH
/Times-Roman SF
10839 46837 MT
(;; Which makes lexical-verb fail:)SH
/Courier SF
10839 47785 MT
(-->Fail in alt GAME-RESULT-LEX at level {VERB LEXICAL-VERB})SH
/Times-Roman SF
10839 49681 MT
(;; Now We skip 23 frames on the stack! We go up DIRECTLY to the choice of manner: express it as an adverb)SH
/Courier SF
10839 50629 MT
(>Special path {VERB LEXICAL-VERB} caught by class \050MANNER\051 after 23 frames)SH
10839 51577 MT
(-->Entering alt MANNER -- Branch #3)SH
10839 52525 MT
(-->Updating \050CAT NIL\051 with ADV at level {MANNER-COMP CAT})SH
10839 53473 MT
(-->Enriching input with \050CONCEPT {MANNER CONCEPT}\051 at level {MANNER-COMP})SH
10839 54421 MT
(-->Enriching input with \050LEX {MANNER LEX}\051 at level {MANNER-COMP})SH
10839 55369 MT
(-->Updating \050MANNER-CONVEYED NIL\051 with YES at level {MANNER MANNER-CONVEYED})SH
10839 56317 MT
(-->Unifying \050DOTS START DOTS\051 with \050DOTS MANNER-COMP VERB DOTS\051)SH
10839 57265 MT
(-->Trying pattern : \050DOTS START DOTS MANNER-COMP VERB DOTS\051)SH
10839 58213 MT
(-->Adding constraints : NIL)SH
10839 59161 MT
(-->Success with branch 3 in alt MANNER)SH
/Times-Roman SF
10839 61057 MT
(;; Redo intermediary decisions)SH
/Courier SF
10839 62005 MT
(>STARTING CAT PROPER AT LEVEL {SUBJECT})SH
10839 62953 MT
(>STARTING CAT VERB-GROUP AT LEVEL {VERB})SH
10839 63901 MT
(>STARTING CAT PROPER AT LEVEL {OBJECT})SH
10839 64849 MT
(>STARTING CAT LEX-VERB AT LEVEL {VERB LEXICAL-VERB})SH
/Times-Roman SF
10839 66745 MT
(;; Choose verb again)SH
/Courier SF
10839 67693 MT
(-->Entering alt GAME-RESULT-LEX -- Branch #1)SH
10839 68641 MT
(-->Entering alt GAME-RESULT-LEX -- Branch #2)SH
10839 69589 MT
(-->Entering alt GAME-RESULT-LEX -- Branch #3)SH
10839 70537 MT
(-->Updating \050LEX "beat"\051 with "beat" at level {VERB LEX})SH
10839 71485 MT
(-->Success with branch 3 in alt GAME-RESULT-LEX)SH
/Times-Roman SF
10839 73381 MT
(;; This time it works)SH
/Courier SF
10839 74329 MT
([Used 106 backtracking points - 58 wrong branches - 137 undos])SH
10839 75277 MT
(The Denver Nuggets narrowly beat the Celtics.)SH
42480 65062 50 10440 75862 BX BX1
ES
%%Page: 68 69
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(68)SH
7920 11486 MT
(Note that in this second)
21 W( example, if the bk-class feature is disabled \050by typing \050clear-bk-class\051\051, the unifier does)22 W
6120 12863 MT
(not find an acceptable solution after 100,000)
151 W( backtracking points.  This indicates that bk-class is not merely an)150 W
6120 14240 MT
(optimization but is often required to make unification practical.)SH
7920 16719 MT
(Figure 12-1 illustrates the effect of using)74 W
/Courier SF
25019 XM
(bk-class)SH
/Times-Roman SF
(. The)
398 W( unifier therefore uses)
74 W( the knowledge that)75 W
/Times-Italic SF
49651 XM
(only)SH
/Times-Roman SF
51698 XM
(the)SH
6120 18096 MT
(verb or the adverb can satisfy the)
119 W( manner constraint in a clause to drastically reduce the search space.  But, this)118 W
6120 19473 MT
(knowledge is)83 W
/Times-Italic SF
11841 XM
(locally)SH
/Times-Roman SF
14896 XM
(expressed at each relevant choice point,)
83 W( retaining the possibility of independently expressing)84 W
6120 20850 MT
(each constraint in the)SH
8 SS 
14896 XM
(FUG)SH
10 SS 
(.)SH
647 1000 0 6067 63400 GB 
%%BeginDocument: stack2.ps
%!PS-Adobe-2.0 EPSF-1.2
%%Title: stack2
%%Creator: f2ps
%%CreationDate: Mon May  4 18:01:11 1992
%%For: elhadad@mermaid.cs.columbia.edu (Michael Elhadad)
%%%Pages: 1
%%BoundingBox: 143 175 468 620
%%EndComments
/$F2psDict 32 dict def $F2psDict begin $F2psDict /mtrx matrix put
 end /$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def /$F2psEnd {$F2psEnteredState restore end} def
%%EndProlog
$F2psBegin
40.000000 633.000000 translate
0.900000 -0.900000 scale
2.000 setlinewidth
% Polyline
newpath 119 339 moveto 359 339 lineto 339 359 lineto 364 379 lineto 339 389 lineto 364 399 lineto 119 399 lineto 139 389 lineto 119 379 lineto 139 359 lineto 119 339 lineto stroke
% Polyline
newpath 126 34 moveto 119 34 119 67 7 arcto 4 {pop} repeat 119 74 352 74 7 arcto 4 {pop} repeat 359 74 359 41 7 arcto 4 {pop} repeat 359 34 126 34 7 arcto 4 {pop} repeat closepath  stroke
% Polyline
newpath 126 84 moveto 119 84 119 117 7 arcto 4 {pop} repeat 119 124 352 124 7 arcto 4 {pop} repeat 359 124 359 91 7 arcto 4 {pop} repeat 359 84 126 84 7 arcto 4 {pop} repeat closepath  stroke
% Polyline
newpath 126 134 moveto 119 134 119 167 7 arcto 4 {pop} repeat 119 174 352 174 7 arcto 4 {pop} repeat 359 174 359 141 7 arcto 4 {pop} repeat 359 134 126 134 7 arcto 4 {pop} repeat closepath  stroke
% Polyline
newpath 126 184 moveto 119 184 119 217 7 arcto 4 {pop} repeat 119 224 352 224 7 arcto 4 {pop} repeat 359 224 359 191 7 arcto 4 {pop} repeat 359 184 126 184 7 arcto 4 {pop} repeat closepath  stroke
% Polyline
newpath 126 284 moveto 119 284 119 317 7 arcto 4 {pop} repeat 119 324 352 324 7 arcto 4 {pop} repeat 359 324 359 291 7 arcto 4 {pop} repeat 359 284 126 284 7 arcto 4 {pop} repeat closepath  stroke
% Polyline
newpath 126 234 moveto 119 234 119 267 7 arcto 4 {pop} repeat 119 274 352 274 7 arcto 4 {pop} repeat 359 274 359 241 7 arcto 4 {pop} repeat 359 234 126 234 7 arcto 4 {pop} repeat closepath  stroke
3.000 setlinewidth
% Polyline
newpath 126 409 moveto 119 409 119 487 7 arcto 4 {pop} repeat 119 494 352 494 7 arcto 4 {pop} repeat 359 494 359 416 7 arcto 4 {pop} repeat 359 409 126 409 7 arcto 4 {pop} repeat closepath  stroke
% Polyline
newpath 359 449 moveto 399 419 lineto 399 119 lineto 369 104 lineto stroke
newpath 387.783 120.100 moveto 369.000 104.000 lineto 393.150 109.367 lineto stroke
% Polyline
newpath 121 79 moveto 114 79 114 122 7 arcto 4 {pop} repeat 114 129 357 129 7 arcto 4 {pop} repeat 364 129 364 86 7 arcto 4 {pop} repeat 364 79 121 79 7 arcto 4 {pop} repeat closepath  stroke
% Polyline
newpath 121 279 moveto 114 279 114 322 7 arcto 4 {pop} repeat 114 329 357 329 7 arcto 4 {pop} repeat 364 329 364 286 7 arcto 4 {pop} repeat 364 279 121 279 7 arcto 4 {pop} repeat closepath  stroke
% Polyline
newpath 399 339 moveto 369 314 lineto stroke
newpath 383.596 333.974 moveto 369.000 314.000 lineto 391.278 324.755 lineto stroke
% Polyline
newpath 364 284 moveto 399 259 lineto stroke
% Polyline
newpath 439 479 moveto 439 39 lineto stroke
newpath 433.000 63.000 moveto 439.000 39.000 lineto 445.000 63.000 lineto stroke
/fn0.15 /Times-Roman findfont 16.666667 scalefont def
fn0.15 setfont
(subconstituents) dup stringwidth pop 2 div 239 exch sub 384 moveto 1 -1 scale show 1 -1 scale 
(Process all ) dup stringwidth pop 2 div 239 exch sub 359 moveto 1 -1 scale show 1 -1 scale 
(Delay Manner [ANY]) dup stringwidth pop 2 div 239 exch sub 309 moveto 1 -1 scale show 1 -1 scale 
(Process Argumentation [done]) dup stringwidth pop 2 div 239 exch sub 259 moveto 1 -1 scale show 1 -1 scale 
(Map args to complements) dup stringwidth pop 2 div 239 exch sub 209 moveto 1 -1 scale show 1 -1 scale 
(Choose "stun") dup stringwidth pop 2 div 239 exch sub 159 moveto 1 -1 scale show 1 -1 scale 
(Lexicalize WIN) dup stringwidth pop 2 div 239 exch sub 109 moveto 1 -1 scale show 1 -1 scale 
(Process predicate) dup stringwidth pop 2 div 239 exch sub 59 moveto 1 -1 scale show 1 -1 scale 
(Check ANY:) dup stringwidth pop 2 div 239 exch sub 429 moveto 1 -1 scale show 1 -1 scale 
(MANNER IS NOT) dup stringwidth pop 2 div 239 exch sub 454 moveto 1 -1 scale show 1 -1 scale 
(CONVEYED...) dup stringwidth pop 2 div 239 exch sub 479 moveto 1 -1 scale show 1 -1 scale 
(B) dup stringwidth pop 2 div 469 exch sub 79 moveto 1 -1 scale show 1 -1 scale 
(a) dup stringwidth pop 2 div 469 exch sub 104 moveto 1 -1 scale show 1 -1 scale 
(c) dup stringwidth pop 2 div 469 exch sub 129 moveto 1 -1 scale show 1 -1 scale 
(k) dup stringwidth pop 2 div 469 exch sub 154 moveto 1 -1 scale show 1 -1 scale 
(t) dup stringwidth pop 2 div 469 exch sub 179 moveto 1 -1 scale show 1 -1 scale 
(r) dup stringwidth pop 2 div 469 exch sub 204 moveto 1 -1 scale show 1 -1 scale 
(a) dup stringwidth pop 2 div 469 exch sub 229 moveto 1 -1 scale show 1 -1 scale 
(c) dup stringwidth pop 2 div 469 exch sub 254 moveto 1 -1 scale show 1 -1 scale 
(k) dup stringwidth pop 2 div 469 exch sub 279 moveto 1 -1 scale show 1 -1 scale 
(i) dup stringwidth pop 2 div 469 exch sub 304 moveto 1 -1 scale show 1 -1 scale 
(n) dup stringwidth pop 2 div 469 exch sub 329 moveto 1 -1 scale show 1 -1 scale 
(g) dup stringwidth pop 2 div 469 exch sub 354 moveto 1 -1 scale show 1 -1 scale 
showpage
$F2psEnd

%%EndDocument
 GE /Times-Bold SF
23318 53688 MT
(Figure 12-1:)SH
/Times-Roman SF
29067 XM
(Effect of bk-class)SH
46800 33056 50 6120 55011 BX BX1
7920 57490 MT
(In general, the determination of the address of failure is)
210 W( more complex and it is necessary to distinguish)209 W
6120 58867 MT
(between)SH
/Times-Italic SF
9707 XM
(initial failures)5 W
/Times-Roman SF
15663 XM
(and)SH
/Times-Italic SF
17362 XM
(derived failures)5 W
/Times-Roman SF
(. An)
260 W( initial failure always occurs at a leaf of)
5 W( the total FD, when trying to)6 W
6120 60244 MT
(unify two)
20 W( incompatible atoms.  Failures, however, can also propagate up the structure of the total FD.  For example,)19 W
6120 61621 MT
(when unifying)18 W
/Courier SF
12211 XM
(\050\050a \050\050b 1\051\051\051\051)18 W
/Times-Roman SF
20315 XM
(with)SH
/Courier SF
22361 XM
(\050\050a \050\050b 2\051\051\051\051)18 W
/Times-Roman SF
30465 XM
(the original address of failure is the path)18 W
/Courier SF
46995 XM
({a b})18 W
/Times-Roman SF
(. When)19 W
6120 62998 MT
(the unifier)
69 W( backtracks, it also triggers a failure at address)68 W
/Courier SF
29712 XM
({a})SH
/Times-Roman SF
(, which is not a leaf.  This type of failure is called a)68 W
6120 64375 MT
(derived failure.  In the implementation of)73 W
/Courier SF
23406 XM
(bk-class)SH
/Times-Roman SF
(, FUF ignores derived)
73 W( failures and directly backtracks to the)74 W
6120 65752 MT
(first choice)
119 W( point whose)118 W
/Courier SF
16425 XM
(bk-class)SH
/Times-Roman SF
21593 XM
(matches the last initial failure.  Determining whether a failure is derived or)118 W
6120 67129 MT
(initial can be difficult.  In FUF, the following)
179 W( technique is used: I distinguish between)180 W
/Times-Italic SF
43449 XM
(forward)SH
/Times-Roman SF
47102 XM
(and)SH
/Times-Italic SF
48976 XM
(backward)SH
/Times-Roman SF
6120 68506 MT
(processing. Forward)
606 W( processing is)
178 W( the normal advance of the search procedure through the disjunctions in the)177 W
6120 69883 MT
(grammar. Upon)
426 W( failure, backward processing starts, which means that the stack)
88 W( of the last decisions is unwound.)89 W
6120 71260 MT
(Each time a new disjunction is retried and restarted, forward processing could restart, but unification may)
33 W( fail again)32 W
ES
%%Page: 69 70
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(69)SH
8280 11486 MT
(immediately, without making)
86 W( any changes to the total FD being processed.  In general, backward mode continues)87 W
8280 12863 MT
(until one of two events occurs: either a restarted alt succeeds and at least)
118 W( one change is made to the total FD \050a)117 W
8280 14240 MT
(feature is added to the)
22 W( input\051, or a failure occurs when unifying a grammar feature with a feature that was present in)23 W
8280 15617 MT
(the original input, before unification started.  The distinction between forward and backward processing and the)
9 W( way)8 W
8280 16994 MT
(the address of failure is maintained is illustrated in Fig.12-2.)SH
978 1000 0 1948 69481 GB 
%%BeginDocument: bkclass1.ps
%!
%%Title: bkclass1
%%Creator: f2ps
%%CreationDate: Wed Apr 29 22:13:07 1992
%%For: elhadad@mermaid.cs.columbia.edu (Michael Elhadad)
%%%Pages: 1
%%BoundingBox: 122 291 490 501
%%EndComments
/$F2psDict 32 dict def $F2psDict begin $F2psDict /mtrx matrix put
 end /$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def /$F2psEnd {$F2psEnteredState restore end} def
%%EndProlog
$F2psBegin
77.000000 542.000000 translate
0.900000 -0.900000 scale
1.000 setlinewidth
% Polyline
newpath 289 144 moveto 284 154 lineto 279 139 lineto 269 139 lineto 274 129 lineto 269 119 lineto 284 124 lineto 289 109 lineto 294 129 lineto 304 134 lineto 289 139 lineto stroke
% Polyline
newpath 339 229 moveto 334 239 lineto 329 224 lineto 319 224 lineto 324 214 lineto 319 204 lineto 334 209 lineto 339 194 lineto 344 214 lineto 354 219 lineto 339 224 lineto stroke
% Polyline
newpath 244 224 moveto 239 234 lineto 234 219 lineto 224 219 lineto 229 209 lineto 224 199 lineto 239 204 lineto 244 189 lineto 249 209 lineto 259 214 lineto 244 219 lineto stroke
% Polyline
newpath 124 224 moveto 119 234 lineto 114 219 lineto 104 219 lineto 109 209 lineto 104 199 lineto 119 204 lineto 124 189 lineto 129 209 lineto 139 214 lineto 124 219 lineto stroke
% Polyline
newpath 204 74 moveto 274 124 lineto stroke
newpath 268.653 117.723 moveto 274.000 124.000 lineto 266.328 120.978 lineto stroke
% Polyline
newpath 174 134 moveto 199 79 lineto stroke
newpath 193.869 85.455 moveto 199.000 79.000 lineto 197.510 87.111 lineto stroke
% Polyline
newpath 334 204 moveto 169 134 lineto stroke
newpath 175.584 138.966 moveto 169.000 134.000 lineto 177.146 135.283 lineto stroke
% Polyline
newpath 164 139 moveto 324 209 lineto stroke
newpath 317.472 203.961 moveto 324.000 209.000 lineto 315.869 207.626 lineto stroke
% Polyline
newpath 234 199 moveto 169 144 lineto stroke
newpath 173.815 150.694 moveto 169.000 144.000 lineto 176.399 147.641 lineto stroke
% Polyline
newpath 159 144 moveto 229 204 lineto stroke
newpath 224.228 197.275 moveto 229.000 204.000 lineto 221.624 200.312 lineto stroke
% Polyline
newpath 159 144 moveto 124 204 lineto stroke
newpath 129.759 198.098 moveto 124.000 204.000 lineto 126.303 196.082 lineto stroke
% Polyline
newpath 194 74 moveto 164 134 lineto stroke
newpath 169.367 127.739 moveto 164.000 134.000 lineto 165.789 125.950 lineto stroke
% Polyline
newpath 129 204 moveto 164 149 lineto stroke
newpath 158.018 154.676 moveto 164.000 149.000 lineto 161.392 156.823 lineto stroke
/fn2.15 /Times-Bold findfont 16.666667 scalefont def
fn2.15 setfont
(Fail) dup stringwidth pop 2 div 339 exch sub 254 moveto 1 -1 scale show 1 -1 scale 
(Fail) dup stringwidth pop 2 div 249 exch sub 254 moveto 1 -1 scale show 1 -1 scale 
(Address of failure) dup stringwidth pop 2 div 119 exch sub 279 moveto 1 -1 scale show 1 -1 scale 
(Initial failure) dup stringwidth pop 2 div 119 exch sub 254 moveto 1 -1 scale show 1 -1 scale 
(ALT) dup stringwidth pop 2 div 124 exch sub 139 moveto 1 -1 scale show 1 -1 scale 
(ALT) dup stringwidth pop 2 div 199 exch sub 59 moveto 1 -1 scale show 1 -1 scale 
/fn0.15 /Times-Roman findfont 16.666667 scalefont def
fn0.15 setfont
(O) dup stringwidth pop 2 div 284 exch sub 139 moveto 1 -1 scale show 1 -1 scale 
(O) dup stringwidth pop 2 div 334 exch sub 219 moveto 1 -1 scale show 1 -1 scale 
(O) dup stringwidth pop 2 div 239 exch sub 219 moveto 1 -1 scale show 1 -1 scale 
(O) dup stringwidth pop 2 div 119 exch sub 219 moveto 1 -1 scale show 1 -1 scale 
(O) dup stringwidth pop 2 div 159 exch sub 144 moveto 1 -1 scale show 1 -1 scale 
(O) dup stringwidth pop 2 div 199 exch sub 79 moveto 1 -1 scale show 1 -1 scale 
fn2.15 setfont
(Fail on input:) 319 139 moveto 1 -1 scale show 1 -1 scale 
(Address of failure) 319 164 moveto 1 -1 scale show 1 -1 scale 
/fn3.12 /Times-BoldItalic findfont 13.333333 scalefont def
fn3.12 setfont
(1) 169 104 moveto 1 -1 scale show 1 -1 scale 
(2) 129 174 moveto 1 -1 scale show 1 -1 scale 
(3) 154 184 moveto 1 -1 scale show 1 -1 scale 
(4) 194 194 moveto 1 -1 scale show 1 -1 scale 
(5) 219 184 moveto 1 -1 scale show 1 -1 scale 
(6) 279 204 moveto 1 -1 scale show 1 -1 scale 
(7) 269 169 moveto 1 -1 scale show 1 -1 scale 
(8) 194 119 moveto 1 -1 scale show 1 -1 scale 
(9) 249 99 moveto 1 -1 scale show 1 -1 scale 
showpage
$F2psEnd

%%EndDocument
 GE /Times-Bold SF
21243 42632 MT
(Figure 12-2:)SH
/Times-Roman SF
26992 XM
(Determination of the address of failure)SH
46800 25856 50 8280 43955 BX BX1
10080 46434 MT
(The figure shows the search space)
SH( when traversing two successive alts in the grammar.  Each arrow corresponds)1 W
8280 47811 MT
(to either the choice of a branch in the alt or to a forced)
10 W( backtracking.  Arrows 1 and 2 correspond to the first forward)9 W
8280 49188 MT
(processing step and end up in a failure.  This is)
3 W( an initial failure and the)4 W
/Times-Italic SF
37191 XM
(address of failure)4 W
/Times-Roman SF
44509 XM
(\050which is by definition the)4 W
8280 50565 MT
(location which caused the latest significant failure\051 is set to the current position in the total FD.  The backward)136 W
8280 51942 MT
(processing step starts and a second branch of the ALT is tried \050arcs 3 and)
21 W( 4\051.  This second branch fails immediately,)22 W
8280 53319 MT
(before any change is made to the total FD.  In such a case, the backward processing step continues, and the)
36 W( address)35 W
8280 54696 MT
(of failure is)5 W
/Times-Bold SF
13155 XM
(not)SH
/Times-Roman SF
14799 XM
(updated. The)
260 W( motivation is that the)
5 W( unifier is still backtracking for the same original reason: nothing)6 W
8280 56073 MT
(changed in)
7 W( the grammar that makes the original failure less relevant.  So the unifier keeps backtracking, and tries the)6 W
8280 57450 MT
(third and last branch of the ALT \050arcs 5 and 6\051.)
36 W( The)
324 W( same failure occurs again, and backward processing proceeds.)37 W
8280 58827 MT
(The second ALT is exhausted and, therefore, fails, and the)
45 W( second branch of the first ALT is tried in turn \050arcs 7, 8)44 W
8280 60204 MT
(and 9\051.  At this time, two reasons can trigger a switch of failure address:)SH
/Symbol SF
10070 61657 MT
(\267)SH
/Times-Roman SF
10780 XM
(Unification fails immediately, before any changes are made, but the failure is)
22 W( due to the incompatibility)23 W
10780 62762 MT
(of a feature)
122 W( of the grammar with a feature that was originally present in the input before unification)121 W
10780 63867 MT
(started. In)
436 W( such a case, the failure is not ``caused'' by the branch of processing that)
93 W( led to the initial)94 W
10780 64972 MT
(failure, it is)
55 W( caused by the grammar itself with the original input, and would have had occurred even if)54 W
10780 66077 MT
(no decisions had been taken before.  So the failure address is switched to the current address.)SH
/Symbol SF
10070 67835 MT
(\267)SH
/Times-Roman SF
10780 XM
(Unification succeeds and at least one feature)
158 W( from the grammar is added to the total FD.  Forward)159 W
10780 68940 MT
(processing starts again.  Any future failure can be caused by these new changes, and cannot therefore)
7 W( be)6 W
10780 70045 MT
(attributed to the old initial failure.  So the failure address is also switched to the current address.)SH
ES
%%Page: 70 71
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(70)SH
7920 11486 MT
(There is one more complication with the use of the address of)
174 W( failure as a source of information on what)175 W
6120 12863 MT
(decision caused the failure: as already mentioned in Sect.5.2, a given location in the total FD can be accessed)173 W
6120 14240 MT
(through several paths from the)
115 W( top of the total FD \050since an FD is not a tree but can be an arbitrary graph\051.  So)116 W
6120 15617 MT
(several distinct paths, with)
159 W( different labels can identify the location where the failure occurred.  The intelligent)158 W
6120 16994 MT
(backtracking component must decide which path should be matched against the bk-class)
238 W( specifications.  The)239 W
6120 18371 MT
(convention used here is the same one used to disambiguate the up-arrow notation)
118 W( presented in Sect.5.2: the path)117 W
6120 19748 MT
(used to identify the address of failure is the)
45 W( path written in the grammar on the feature that caused the failure.  The)46 W
6120 21125 MT
(motivation is that the grammar writer uses)
8 W( the path that is the most meaningful to access features, and that incidental)7 W
6120 22502 MT
(conflations along this path would not be as informative for backtracking)
97 W( purposes.  Another approach could have)98 W
6120 23879 MT
(been to use all the path addresses that identify a location and)
6 W( match them against all bk-class specifications.  But this)5 W
6120 25256 MT
(approach would have imposed too much overhead on the regular backtracking mechanism.)SH
7920 27735 MT
(The bk-class mechanism works well in practice.  For the basketball example discussed)
42 W( above, I have measured)43 W
6120 29112 MT
(the number of backtracking)
147 W( points required to generate different clauses conveying the same core content.  The)146 W
8 SS 
25756 30144 MT
(14)SH
10 SS 
6120 30489 MT
(following table summarizes these measurements.)SH
9 SS 
23555 32356 MT
(Input / Output)SH
35903 XM
(w/o bk-cl)SH
40359 XM
(w/ b)SH
25627 50 16706 32952 LH BX1
-1612 50 35504 32952 LV BX1
-1612 50 39960 32952 LV BX1
17105 33968 MT
(No floating constraints:)SH
36128 XM
(110)SH
40584 XM
(110)SH
/Times-Italic SF
17105 34982 MT
(The DN beat the BC)SH
25627 50 16706 35566 LH BX1
/Times-Roman SF
17105 36582 MT
(Manner in the verb:)SH
36128 XM
(110)SH
40584 XM
(110)SH
/Times-Italic SF
17105 37596 MT
(The DN edged the BC)SH
25627 50 16706 38180 LH BX1
/Times-Roman SF
17105 39196 MT
(Manner as adverbial:)SH
36128 XM
(>10,000)SH
40584 XM
(214)SH
/Times-Italic SF
17105 40210 MT
(The DN narrowly beat the BC)SH
25627 50 16706 40794 LH BX1
/Times-Roman SF
17105 41810 MT
(AO in the verb:)SH
36128 XM
(112)SH
40584 XM
(112)SH
/Times-Italic SF
17105 42824 MT
(The DN stunned the BC)SH
25627 50 16706 43408 LH BX1
/Times-Roman SF
17105 44424 MT
(AO as adjective:)SH
36128 XM
(1,623)SH
40584 XM
(239)SH
/Times-Italic SF
17105 45438 MT
(The hapless DN beat the BC)SH
25627 50 16706 46022 LH BX1
/Times-Roman SF
17105 47038 MT
(AO as adverbial:)SH
36128 XM
(>100,000)SH
40584 XM
(268)SH
/Times-Italic SF
17105 48052 MT
(The DN surprisingly beat the BC)SH
25627 50 16706 48636 LH BX1
/Times-Roman SF
17105 49652 MT
(AO & manner together:)SH
36128 XM
(1,178)SH
40584 XM
(246)SH
/Times-Italic SF
17105 50666 MT
(The hapless DN edged the BC)SH
25627 19910 50 16706 51250 BX BX1
-18298 50 35504 51250 LV BX1
-18298 50 39960 51250 LV BX1
10 /Times-Roman AF
7920 53729 MT
(The number)
257 W( of backtracking points required to generate each example clause is listed with and without)258 W
/Courier SF
6120 55106 MT
(bk-class)SH
/Times-Roman SF
(. The)
292 W( numbers for the first clause,)
21 W( which does not include any floating constraints, give an indication of)20 W
6120 56483 MT
(the size of)
31 W( the grammar.  It roughly corresponds to the number of unretracted decisions made by the grammar.  It is)32 W
6120 57860 MT
(the optimal number of backtracking points that a search control regime can)
147 W( obtain for the given input with this)146 W
6120 59237 MT
(grammar. Without)328 W
/Courier SF
14125 XM
(bk-class)SH
/Times-Roman SF
(, the wide variation in number of backtracking points)
39 W( among the examples indicates)40 W
6120 60614 MT
(the exponential nature of the)
143 W( blind search which floating constraints impose on the standard control regime.  In)142 W
6120 61991 MT
(contrast, with)11 W
/Courier SF
11836 XM
(bk-class)SH
/Times-Roman SF
(, the)
11 W( variation in number of backtracking points remains within a factor of three among all)12 W
6120 63368 MT
(the examples.)SH
10800 50 6120 70352 UL
6 SS 
6920 71691 MT
(14)SH
8 SS 
7520 72000 MT
(In this table,)SH
/Times-Italic SF
11695 XM
(DN)SH
/Times-Roman SF
13007 XM
(abbreviates)SH
/Times-Italic SF
16848 XM
(Denver Nuggets)SH
/Times-Roman SF
22224 XM
(and)SH
/Times-Italic SF
23579 XM
(BC)SH
/Times-Roman SF
24802 XM
(abbreviates)SH
/Times-Italic SF
28643 XM
(Boston Celtics)SH
/Times-Roman SF
(.)SH
ES
%%Page: 71 72
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(71)SH
14 /Times-Bold AF
8280 11760 MT
(12.4. Lazy Evaluation and Freeze with)SH
/Times-Roman SF
31535 XM
(wait)SH
10 SS 
10080 13137 MT
(The)SH
/Courier SF
11923 XM
(bk-class)SH
/Times-Roman SF
17011 XM
(mechanism is useful)
38 W( in general to correct directly a decision made a long time ago, as soon as)37 W
8280 14514 MT
(it appears that the decision was wrong.  But this implies that all the work done between the wrong decision and the)41 W
8280 15891 MT
(realization that it is wrong)
191 W( must be re-done once the original wrong has been corrected.  For example, in the)190 W
8280 17268 MT
(following case:)SH
9 /Courier AF
11238 19914 MT
(Frame TOP)SH
17577 XM
(---------> failure because of feature P)SH
6198 1546 50 10839 20499 BX BX1
11238 21460 MT
(Frame T100)SH
17577 XM
(\051)SH
6198 1546 50 10839 22045 BX BX1
11238 23006 MT
(Frame T099)SH
17577 XM
(\051)SH
6198 1546 50 10839 23591 BX BX1
10839 24539 MT
(... \051---->)
3780 W( Lots of decisions that do not)SH
10839 25487 MT
(... \051)
3780 W( affect)
2700 W( the value of P.)SH
10839 26435 MT
(... \051)3780 W
11238 27582 MT
(Frame T016)SH
17577 XM
(\051)SH
6198 1546 50 10839 28167 BX BX1
11238 29128 MT
(Frame T015)SH
17577 XM
(---------> feature P is set to wrong value)SH
6198 1546 50 10839 29713 BX BX1
11238 30674 MT
(Frame T014)SH
6198 1546 50 10839 31259 BX BX1
10839 32207 MT
(...)SH
11238 33354 MT
(Frame T001)SH
6198 1546 50 10839 33939 BX BX1
42480 17294 50 10440 35286 BX BX1
10 /Times-Roman AF
10080 37765 MT
(The decisions corresponding to frames T016 to T100 are going to be done twice because T015)
25 W( made the wrong)26 W
8280 39142 MT
(choice originally.  While making)
52 W( a decision twice is not too bad compared to the cost of exhaustively searching all)51 W
8280 40519 MT
(the choices corresponding to frames T016 to T100 backwards, it is still sub-optimal.)SH
10080 42998 MT
(One could reach a more)
9 W( efficient solution if the decision corresponding to frame T015 is delayed and the unifier)10 W
8280 44375 MT
(commits to a)
23 W( value for P only after frame T100.  The)22 W
/Courier SF
29959 XM
(wait)SH
/Times-Roman SF
32631 XM
(control specification is used to achieve this effect under)22 W
8280 45752 MT
(certain conditions.)SH
10080 48231 MT
(Wait specifies that the decision corresponding to a disjunction)
98 W( depends on the value of certain features.  The)99 W
8280 49608 MT
(syntax is as follows:)SH
9 /Courier AF
10839 51293 MT
(\050alt TP \050:wait P\051 ...\051)SH
42480 1546 50 10440 51878 BX BX1
10 /Times-Roman AF
10080 54357 MT
(This declaration indicates to the unifier that the alt TP depends on the value)
55 W( of the feature P. If when it is first)54 W
8280 55734 MT
(met feature P is)
138 W( instantiated, then the alt is evaluated normally.  If however P is not yet instantiated, the whole)139 W
8280 57111 MT
(disjunction is delayed: it)
67 W( is put on hold, on an agenda.  The rest of the grammar is evaluated, and periodically, the)66 W
8280 58488 MT
(unifier checks the agenda to determine if one of the frozen alts can be awakened.)SH
10080 60967 MT
(The following example illustrates a possible use of)SH
/Courier SF
30689 XM
(wait)SH
/Times-Roman SF
(:)SH
ES
%%Page: 72 73
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(72)SH
9 /Courier AF
9219 12709 MT
(;; In conjunction: do verb ellipsis?)SH
9219 13657 MT
(;; If the same verb is used in both conjuncts)SH
9219 14605 MT
(;; you can ellide it in the second conjunct:)SH
9219 15553 MT
(;; --> John ate the burger and Mary the fish.)SH
9219 16501 MT
(;; The ellipsis is done by adding a GAP feature to the second verb.)SH
9219 17449 MT
(;; Wait until verbs for both conjuncts have been selected.)SH
9219 18397 MT
(;; This alt does NOT determine what the verbs should be.)SH
9219 19345 MT
(\050alt verb-ellipsis \050:wait {constituent1 process lex})SH
17820 50 19479 19545 UL
25419 20293 MT
({constituent2 process lex}\051)SH
14580 50 25419 20493 UL
10299 21241 MT
(\050\050\050cat clause\051)SH
11379 22189 MT
(\050{^ constituent1 process lex} {^ ^ ^ ^ constituent2 process lex}\051)SH
11379 23137 MT
(\050{^ constituent2 process gap} yes\051)SH
11379 24085 MT
(\050verbal-ellipsis yes\051\051)SH
10839 25033 MT
(\050\050verbal-ellipsis no\051\051\051\051\051)SH
42480 15580 50 8280 26380 BX BX1
10 /Times-Roman AF
7920 28859 MT
(This fragment is extracted from grammar gr10.  It)
73 W( is part of the branch of the grammar dealing with conjunc-)74 W
6120 30236 MT
(tion. This)
260 W( alt implements the decision whether to use a verb ellipsis in a conjunction of two clauses.)
5 W( The)
258 W( verb in the)4 W
6120 31613 MT
(second conjunct can be elided if it the same lexical entry as the)
25 W( verb in the first conjunct.  This match is checked by)26 W
6120 32990 MT
(testing that the {constituent1 process lex} path can)
18 W( be unified with the {constituent2 process lex} path.  When it can)17 W
6120 34367 MT
(be unified, the {constituent2 process} is enriched with the)
87 W( feature \050gap yes\051, which the linearizer will interpret by)88 W
6120 35744 MT
(skipping the verb in the final sentence.)SH
7920 38223 MT
(Now remember that the standard control)
89 W( flow in FUF is top-down breadth-first in the tree of constituents.  A)88 W
6120 39600 MT
(conjunction of clauses is made up of the following constituents:)SH
9 /Courier AF
8679 42233 MT
(COMPLEX-CLAUSE)SH
9759 43181 MT
(|)SH
9759 44129 MT
(|---- ELEMENTS)SH
9759 45077 MT
(| |)3240 W
9759 46025 MT
(| |---)
3240 W( CONSTITUENT1)SH
9759 46973 MT
(| | |)3240 W
9759 47921 MT
(| | |---)
3240 W( PROCESS)SH
9759 48869 MT
(| | |---)
3240 W( PARTICIPANTS)SH
9759 49817 MT
(| | |---)
3240 W( SYNT-ROLES)SH
9759 50765 MT
(| |)3240 W
9759 51713 MT
(| |---)
3240 W( CONSTITUENT2)SH
9759 52661 MT
(| | |)3240 W
9759 53609 MT
(| | |---)
3240 W( PROCESS)SH
9759 54557 MT
(| | |---)
3240 W( PARTICIPANTS)SH
9759 55505 MT
(| | |---)
3240 W( SYNT-ROLES)SH
9759 56453 MT
(| | |)3240 W
42480 17476 50 8280 57800 BX BX1
10 /Times-Roman AF
7920 60279 MT
(When the branch of the grammar specifying the)
23 W( conjunction is traversed, the choice of the lexical item that will)24 W
6120 61656 MT
(realize the process is still three levels)
49 W( down.  The decision whether to use an ellipsis concerns only the conjunction)48 W
6120 63033 MT
(grammar, so it must be located in the)
131 W( conjunction branch, not in the branch of the grammar deciding on lexical)132 W
6120 64410 MT
(choice for the process.  But it depends on this later decision - we do not want to influence the choice of)
28 W( the verbs in)27 W
6120 65787 MT
(the conjunct by the fact that they are conjoined.  So the decision is instead delayed until the verbs in both)
33 W( conjuncts)34 W
6120 67164 MT
(have been determined.)SH
7920 69643 MT
(Note that)
143 W( if the input already specifies the verbs, then the decision can be evaluated right away.  It is only)142 W
6120 71020 MT
(delayed when needed.)SH
ES
%%Page: 73 74
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(73)SH
10080 11486 MT
(There can be complications when using)19 W
/Courier SF
26302 XM
(wait)SH
/Times-Roman SF
28971 XM
(when two)
19 W( decisions wait for each other, in a deadlock configura-)20 W
8280 12863 MT
(tion. I)
741 W( have not yet encountered such situations in practice but in such cases, a combination of)245 W
/Courier SF
50741 XM
(wait)SH
/Times-Roman SF
53636 XM
(and)SH
/Courier SF
8280 14240 MT
(bk-class)SH
/Times-Roman SF
13330 XM
(could ensure that the deadlock can be broken in an efficient way.)SH
12 /Times-Bold AF
8280 17924 MT
(12.4.1. Wait and Constituent Traversal)SH
10 /Times-Roman AF
10080 19301 MT
(The delaying of disjunctions interacts in)
57 W( a complex manner with the way the constituent structure is traversed.)58 W
8280 20678 MT
(Recall that the traversal proceeds as follows: the toplevel constituent is unified with the grammar, then at)
28 W( the end of)27 W
8280 22055 MT
(the unification \050before determination time\051, the)10 W
/Courier SF
27420 XM
(cset)SH
/Times-Roman SF
30080 XM
(of the constituent is identified, and every descendant specified)11 W
8280 23432 MT
(in the)SH
/Courier SF
10780 XM
(cset)SH
/Times-Roman SF
13430 XM
(is traversed, in order.  The structure is then traversed breadth first.)SH
10080 25911 MT
(As explained in Sect.5.7.1, there are two ways to specify a)188 W
/Courier SF
35782 XM
(cset)SH
/Times-Roman SF
38620 XM
(in a constituent in)
188 W( FUF: implicitly and)187 W
8280 27288 MT
(explicitly. The)288 W
/Courier SF
14670 XM
(cset)SH
/Times-Roman SF
17339 XM
(is explicitly specified if there is a complete)19 W
/Courier SF
34933 XM
(cset)SH
/Times-Roman SF
37602 XM
(feature found in the constituent.  Otherwise)20 W
8280 28665 MT
(it is implicit.  The implicit)68 W
/Courier SF
19440 XM
(cset)SH
/Times-Roman SF
22158 XM
(is found)
68 W( by using two heuristics: first it is assumed that any path mentioned in a)67 W
8280 30042 MT
(pattern is also a constituent; second, any feature)
185 W( which contains a sub-feature of the form)186 W
/Courier SF
46944 XM
(\050cat xx\051)186 W
/Times-Roman SF
52366 XM
(is also)186 W
8280 31419 MT
(assumed to be a constituent.)SH
10080 33898 MT
(To override these heuristics, the grammar)
43 W( writer can use)42 W
/Times-Italic SF
33235 XM
(incremental cset specifications)42 W
/Times-Roman SF
(. There)
334 W( are indeed two)42 W
8280 35275 MT
(types of)142 W
/Courier SF
12008 XM
(cset)SH
/Times-Roman SF
14800 XM
(specifications: complete)
142 W( and incremental.  A complete specification is of the form)143 W
/Courier SF
49537 XM
(\050cset \050c1)143 W
8280 36652 MT
(... cn\051\051)1144 W
/Times-Roman SF
14746 XM
(and exhaustively identifies all)
272 W( the subconstituents of the current constituent.  An incremental)271 W
8280 38029 MT
(specification is of the form:)SH
/Courier SF
10680 39435 MT
(\050cset \050+ a)SH
17760 XM
(... a)SH
21240 XM
(\051 \050- d)SH
25920 XM
(... d)SH
29400 XM
(\051\051)SH
8 SS 
16680 39768 MT
(1)SH
20760 XM
(m)SH
24840 XM
(1)SH
28920 XM
(p)SH
10 /Times-Roman AF
8280 40903 MT
(An incremental)125 W
/Courier SF
14973 XM
(cset)SH
/Times-Roman SF
17748 XM
(specifies that all the)125 W
/Courier SF
26469 XM
(a)SH
/Times-Roman SF
27549 XM
(s should be added)
125 W( to the implicit)126 W
/Courier SF
41678 XM
(cset)SH
/Times-Roman SF
44454 XM
(and all the)126 W
/Courier SF
49248 XM
(d)SH
/Times-Roman SF
50328 XM
(s should be)126 W
8 /Courier AF
27069 41236 MT
(i)SH
49848 XM
(j)SH
10 /Times-Roman AF
8280 42280 MT
(removed from it.)
225 W( The)
698 W( possibility of specifying the constituent structure incrementally is a great convenience)224 W
8280 43657 MT
(practically since it allows the grammar writer to give partial information on constituency in different regions)
49 W( of the)50 W
8280 45034 MT
(grammar.)SH
10080 47513 MT
(Incremental cset)
104 W( specifications may affect delayed disjunctions.  The following example illustrates this situa-)103 W
8280 48890 MT
(tion:)SH
9 /Courier AF
10839 50575 MT
(\050\050alt \050:wait {^ manner conveyed}\051)SH
11919 51523 MT
(\050\050\050manner \050\050conveyed any\051\051\051)SH
12459 52471 MT
(\050\050manner \050\050conveyed adverb\051)SH
17859 53419 MT
(\050cat adverb\051 ...\051\051)SH
12999 54367 MT
(\050cset \050\050+ manner\051\051\051\051\051\051\051\051)SH
42480 5338 50 10440 54952 BX BX1
10 /Times-Roman AF
10080 57431 MT
(In this case, the decision to express the manner constraint by using an adverb is delayed,)
69 W( leaving a chance for)70 W
8280 58808 MT
(the verb to express it as)
32 W( a connotation.  Thus, in the first pass through the grammar, this alt is not evaluated.  At the)31 W
8280 60185 MT
(end of)
106 W( the processing of the clause constituent, the cset is determined.  The implicit cset is computed and all the)107 W
8280 61562 MT
(incremental cset specifications are added on it.  At this point, the)43 W
/Courier SF
34959 XM
(manner)SH
/Times-Roman SF
38852 XM
(feature is not identified as a constituent,)43 W
8280 62939 MT
(since there is no cat specified for it and no)
22 W( incremental cset has added it explicitly.  The constituent structure is then)23 W
8280 64316 MT
(traversed. At)
624 W( the end of this traversal, the delayed alts on the agenda are processed.)
187 W( The)
622 W( manner alt is thus)186 W
8280 65693 MT
(unblocked, and the second branch)
92 W( is eventually selected.  An adverb constituent is then added at the clause level.)93 W
8280 67070 MT
(When the alt is completely processed, this)
120 W( adverb constituent should be unified with the adverb grammar as any)119 W
8280 68447 MT
(subconstituent would be,)
101 W( if it had been processed without being delayed.  Unfortunately, the constituent structure)102 W
8280 69824 MT
(was already computed before the delayed alt was)
67 W( unblocked.  And the adverb was not part of the cset at this time.)66 W
8280 71201 MT
(So the adverb is not added to the final constituent structure of the clause.)SH
ES
%%Page: 74 75
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(74)SH
7920 11486 MT
(I have extended the determination process to re-check the constituent)
217 W( structure whenever an alt has been)218 W
6120 12863 MT
(unblocked during determination,)
6 W( thus allowing new constituents to be added by delayed alts without restriction.  The)5 W
6120 14240 MT
(determination process performs the following task: first, a)
74 W( delayed alt is selected \050the first one that was put on the)75 W
6120 15617 MT
(agenda is chosen\051 and its evaluation is)
71 W( forced.  Next, unification starts again to evaluate all the delayed alts which)70 W
6120 16994 MT
(have been unblocked by the evaluation of the forced alt.  At the end of)
108 W( this unification step, determination starts)109 W
6120 18371 MT
(again. This)
488 W( loop continues until)
119 W( the agenda is empty.  At this point, the constituent structure is recomputed and)118 W
6120 19748 MT
(retraversed from the top of the total FD)
140 W( down, in breadth-first order.  All constituents which have already been)141 W
6120 21125 MT
(unified are skipped, all new constituents identified)
139 W( by the recomputation of the)138 W
/Courier SF
39528 XM
(cset)SH
/Times-Roman SF
(s at the end of the agenda)138 W
6120 22502 MT
(evaluation are)
1 W( unified again.  After this unification step, determination starts again from scratch \050since the evaluation)2 W
6120 23879 MT
(of the new constituents may have added delayed alts on the agenda\051, until the agenda is empty and all constituents)60 W
6120 25256 MT
(have been unified.)SH
7920 27735 MT
(This top-down traversal in several passes integrates nicely the regular)
2 W( top-down control regime with the benefits)3 W
6120 29112 MT
(of the dynamic)
130 W( re-ordering of constraints provided by)129 W
/Courier SF
28872 XM
(wait)SH
/Times-Roman SF
(. Note)
508 W( that this traversal in several passes does not)129 W
6120 30489 MT
(translate in reduced efficiency: it is only triggered when needed \050that is, when decisions)
35 W( had to be delayed\051, and the)36 W
6120 31866 MT
(traversal/recomputation of the constituent structure is a very)
49 W( efficient operation.  As measured, efficiency is overall)48 W
6120 33243 MT
(drastically improved with)SH
/Courier SF
16647 XM
(wait)SH
/Times-Roman SF
(.)SH
14 /Times-Bold AF
6120 37061 MT
(12.5. Conditional-Evaluation with Ignore)SH
10 /Times-Roman AF
7920 38438 MT
(The)SH
/Courier SF
9877 XM
(ignore)SH
/Times-Roman SF
13879 XM
(control annotation allows the grammar writer to evaluate certain decisions only)
152 W( under certain)153 W
6120 39815 MT
(conditions. The idea is to just ignore certain decisions when there is not enough information, there)
11 W( is already enough)10 W
6120 41192 MT
(information or there is not enough resources left.  The 3 cases correspond to the annotations:)SH
9 /Courier AF
12999 43825 MT
(\050alt \050:ignore-when <path> ...\051 ...\051)SH
12999 44773 MT
(\050alt \050:ignore-unless <path> ...\051 ...\051)SH
12999 45721 MT
(\050alt \050:ignore-after <number>\051 ...\051)SH
42480 5152 50 8280 47068 BX BX1
10 SS 
7920 49547 MT
(Ignore-when)SH
/Times-Roman SF
14797 XM
(is triggered when the paths listed in the annotation are already instantiated.  It is)
27 W( used to check)28 W
6120 50924 MT
(that the input already contains information and the grammar does not have to re-derive it.)SH
/Courier SF
7920 53403 MT
(Ignore-unless)SH
/Times-Roman SF
16119 XM
(is triggered when a path is not instantiated.  It is)
149 W( used when the input does not contain)148 W
6120 54780 MT
(enough information at all, and)
12 W( the grammar can therefore just choose an arbitrary default.  A real example of the use)13 W
6120 56157 MT
(of)SH
/Courier SF
7203 XM
(ignore-unless)SH
/Times-Roman SF
15253 XM
(is given below.)SH
/Courier SF
7920 58636 MT
(Ignore-after)SH
/Times-Roman SF
15439 XM
(is triggered after a certain number of backtracking points have been)
69 W( consumed.  It indicates)68 W
6120 60013 MT
(that the decision encoded by the disjunction is)
128 W( a detail refinement that is not necessary to the completion of the)129 W
6120 61390 MT
(unification, but would just add to its appropriateness or value.)
141 W( IGNORE-AFTER)
531 W( IS NOT IMPLEMENTED IN)140 W
20002 50 32918 61590 UL
6120 62767 MT
(FUF5.2)SH
3084 50 6120 62967 UL
7920 65246 MT
(One characteristics of these annotations is that their evaluation may depend on the order)
101 W( in which evaluation)102 W
6120 66623 MT
(proceeds. Since)
340 W( this order is not known to the grammar writer, their use)
45 W( can be delicate.  To prevent unpredictable)44 W
6120 68000 MT
(variations, the)84 W
/Courier SF
12204 XM
(ignore)SH
/Times-Roman SF
16138 XM
(annotations should be used in conjunction with)84 W
/Courier SF
35809 XM
(wait)SH
/Times-Roman SF
(, since)85 W
/Courier SF
41184 XM
(wait)SH
/Times-Roman SF
43919 XM
(establishes constraints)85 W
6120 69377 MT
(on when)
15 W( a decision is evaluated.  Therefore a)14 W
/Courier SF
24575 XM
(wait)SH
/Times-Roman SF
27239 XM
(annotation has priority over an)14 W
/Courier SF
39835 XM
(ignore)SH
/Times-Roman SF
43699 XM
(when both occur in the)14 W
6120 70754 MT
(same alt.  Adding a)39 W
/Courier SF
14314 XM
(wait)SH
/Times-Roman SF
17003 XM
(annotation can often ensure that)
39 W( the)40 W
/Courier SF
31736 XM
(ignore)SH
/Times-Roman SF
35626 XM
(annotation will only be considered when it)40 W
ES
%%Page: 75 76
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(75)SH
8280 11486 MT
(is relevant.)SH
10080 13965 MT
(The following example is)
225 W( extracted from grammar gr10.  It is actually the same case of verb ellipsis in)224 W
8280 15342 MT
(conjunction presented in the section on)169 W
/Courier SF
25181 XM
(wait)SH
/Times-Roman SF
28000 XM
(above. In)
588 W( this decision, we also want to specify that the whole)169 W
8280 16719 MT
(decision of whether to use ellipsis or not is only relevant in the)
51 W( case of a conjunction of clauses.  This is expressed)50 W
8280 18096 MT
(by addition the)SH
/Courier SF
14530 XM
(ignore-unless)SH
/Times-Roman SF
22580 XM
(annotation as shown in the following figure:)SH
9 /Courier AF
11379 20729 MT
(;; In conjunction: do verb ellipsis?)SH
11379 21677 MT
(;; This decision ONLY applies to CLAUSEs.)SH
11379 22625 MT
(;; Ignore it in conjunctions of NPs and other cats.)SH
11379 23573 MT
(\050alt verb-ellipsis \050:wait process\051)SH
12459 24521 MT
(\050:ignore-unless \050\050cat clause\051\051\051)SH
16740 50 12459 24721 UL
12459 25469 MT
(\050\050\050cat clause\051)SH
13539 26417 MT
(\050{^ constituent1 process lex} {^ ^ ^ ^ constituent2 process lex}\051)SH
13539 27365 MT
(\050{^ constituent2 process gap} yes\051)SH
13539 28313 MT
(\050verbal-ellipsis yes\051\051)SH
12999 29261 MT
(\050\050verbal-ellipsis no\051\051\051\051\051)SH
42480 11788 50 10440 30608 BX BX1
ES
%%Page: 76 77
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(76)SH
ES
%%Page: 77 78
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(77)SH
16 /Times-Bold AF
8280 11872 MT
(13. Tracing and Debugging)SH
14 SS 
8280 15690 MT
(13.1. What it Means to Debug a FUF Program)SH
10 /Times-Roman AF
10080 17067 MT
(When using FUF, a grammar developer is)
34 W( programming in the FUF programming language.  The grammar is a)35 W
8280 18444 MT
(program. The)
522 W( input FD is the input to the program.  FUF is the interpreter and sentences are the output of the)135 W
8280 19821 MT
(execution of a grammar on inputs.  In this framework, when something)
8 W( ``goes wrong,'' the grammar developer must)9 W
8280 21198 MT
(debug his grammar.  The main sources of bugs found when developing FUF programs are:)SH
/Symbol SF
10070 22651 MT
(\267)SH
/Times-Roman SF
10780 XM
(The input is not well formed \050it is not a valid FD\051.)SH
/Symbol SF
10070 24409 MT
(\267)SH
/Times-Roman SF
10780 XM
(The grammar is not well formed \050it is not a valid FD\051.)SH
/Symbol SF
10070 26167 MT
(\267)SH
/Times-Roman SF
10780 XM
(The input does not have the structure expected by the grammar \050too flat or too deeply nested\051.)SH
/Symbol SF
10070 27925 MT
(\267)SH
/Times-Roman SF
10780 XM
(The constituent structure is badly specified in the grammar)
56 W( \050causing either too many constituents to be)55 W
10780 29030 MT
(generated, or not enough, or infinite recursion in the constituent traversal\051.)SH
/Symbol SF
10070 30788 MT
(\267)SH
/Times-Roman SF
10780 XM
(The ordering patterns are not correctly specified or two pattern specifications do not unify.)SH
/Symbol SF
10070 32546 MT
(\267)SH
/Times-Roman SF
10780 XM
(The appropriate morphological features are not passed to the leaf-constituents,)
37 W( preventing the morphol-)38 W
10780 33651 MT
(ogy module from performing the required inflections.)SH
/Symbol SF
10070 35409 MT
(\267)SH
/Times-Roman SF
10780 XM
(Relative paths are not pointing to)
84 W( the place they were intended to.  An ambiguous relative path is not)83 W
10780 36514 MT
(correctly resolved.)SH
/Symbol SF
10070 38272 MT
(\267)SH
/Times-Roman SF
10780 XM
(Given/any fail when they should not: given can interact poorly with wait, and should be)
111 W( replaced by)112 W
10780 39377 MT
(any, any can cause heavy backtracking and should be replaced by given.)SH
/Symbol SF
10070 41135 MT
(\267)SH
/Times-Roman SF
10780 XM
(Types are not defined as expected, or there is an unwanted interaction between types.)SH
/Symbol SF
10070 42893 MT
(\267)SH
/Times-Roman SF
10780 XM
(FSET declarations are too rigorous.)SH
/Symbol SF
10070 44651 MT
(\267)SH
/Times-Roman SF
10780 XM
(Wait and/or bk-class are not used correctly.)SH
/Symbol SF
10070 46409 MT
(\267)SH
/Times-Roman SF
10780 XM
(An indexed feature is not found in an indexed alt.)SH
10080 48888 MT
(The main problem when debugging a FUF program is to identify what)
33 W( caused a failure to occur.  We introduce)32 W
8280 50265 MT
(the following terminology to discuss the various debugging tools available)
95 W( in FUF: a failure occurs whenever the)96 W
8280 51642 MT
(unifier attempts to unify a simple leaf symbol with a different, incompatible leaf.)
22 W( Failures)
292 W( trigger backtracking.  An)21 W
8280 53019 MT
(unexpected failure is a failure that the programmer did not expect.)
48 W( The)
348 W( initial failure is the first unexpected failure)49 W
8280 54396 MT
(to occur during an unification.  The distinction between regular failure and unexpected failure is)
74 W( of course subjec-)73 W
8280 55773 MT
(tive, but it is useful, because there are usually many failures that)
91 W( occur even if there are no bugs in the grammar.)92 W
8280 57150 MT
(This happens whenever a non-indexed alt is traversed.  Branches are tried in order until the appropriate)
93 W( branch is)92 W
8280 58527 MT
(found. When)
486 W( failure occurs during the test of the initial branches, this is not the trace that ``something is)
118 W( going)119 W
8280 59904 MT
(wrong''. So)
332 W( the main problem of the)
41 W( FUF debugger is to, as quickly as possible, identify the initial failure - and to)40 W
8280 61281 MT
(filter out all the irrelevant expected failures.)SH
10080 63760 MT
(This task is)
41 W( made difficult because FUF backtracks a lot, and if the initial failure is missed, a lot of subsequent)42 W
8280 65137 MT
(``unexpected failures'')
144 W( will occur when wrong branches are tried upon backtracking \050in a sense, everything that)143 W
8280 66514 MT
(happens after the initial failure should be disregarded, as the unifier is engaging on a wrong course\051.)SH
10080 68993 MT
(This chapter presents the tracing tools)
123 W( available in FUF and provides advice on how to use them to quickly)124 W
8280 70370 MT
(identify the initial failure.)SH
ES
%%Page: 78 79
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(78)SH
14 /Times-Bold AF
6120 11738 MT
(13.2. Checking the Validity of FDs and Grammars)SH
10 /Times-Roman AF
7920 13115 MT
(Before tracing the unification, it is important to check that both)
48 W( the input and the grammar are valid FDs.  The)47 W
6120 14492 MT
(following functions perform this checking:)SH
9 /Courier AF
8679 16177 MT
(\050FD-SYNTAX fd\051: check that a Lisp expression FD is a well-formed FD.)SH
8679 18073 MT
(\050FD-P fd\051: check that a well-formed FD does not contain inconsistencies)SH
14619 19021 MT
(\050that is, \050u fd nil\051 is not :fail, or in other terms, the FD)SH
14619 19969 MT
(does not contain contradictory features, such as \050\050a 1\051 \050a 2\051\051\051.)SH
8679 21865 MT
(\050GRAMMAR-P grammar\051: check that a Lisp expression grammar is a well-formed)SH
14619 22813 MT
(grammar.)SH
42480 8182 50 8280 23398 BX BX1
10 /Times-Roman AF
7920 25877 MT
(When you suspect that your current input/grammar do not work, check first that they)
127 W( are syntactically valid)128 W
6120 27254 MT
(using these functions.)SH
14 /Times-Bold AF
6120 31072 MT
(13.3. Fine Tuning Tracing: Overview of FUF Tracing Functions)SH
10 /Times-Roman AF
7920 32449 MT
(Several dimensions characterize the activity of the FUF unifier:)SH
/Symbol SF
7910 33902 MT
(\267)SH
/Times-Roman SF
8620 XM
(Where in the)SH
/Times-Italic SF
14035 XM
(input)SH
/Times-Roman SF
16341 XM
(is the unification proceeding.)SH
/Symbol SF
7910 35660 MT
(\267)SH
/Times-Roman SF
8620 XM
(Where in the)SH
/Times-Italic SF
14035 XM
(grammar)SH
/Times-Roman SF
18007 XM
(is the unification proceeding.)SH
/Symbol SF
7910 37418 MT
(\267)SH
/Times-Roman SF
8620 XM
(How)SH
/Times-Italic SF
10814 XM
(important)SH
/Times-Roman SF
15009 XM
(is the current action of the unifier.)SH
/Symbol SF
7910 39176 MT
(\267)SH
/Times-Roman SF
8620 XM
(What)SH
/Times-Italic SF
11036 XM
(stage)SH
/Times-Roman SF
13397 XM
(of the unification is proceeding.)SH
7920 41655 MT
(It is possible to tailor the tracing behavior of FUF according to each of these dimensions.)
45 W( In)
338 W( general, FUF can)44 W
6120 43032 MT
(output a tracing message)
39 W( whenever it takes an action, such as adding a feature to the total FD, selecting a branch in)40 W
6120 44409 MT
(the grammar, backtracking because of a failure, expanding a cset and moving in the)
188 W( constituent tree traversal,)187 W
6120 45786 MT
(freezing and unfreezing goals etc.)
22 W( Outputting)
296 W( all the possible trace messages is always overwhelming, and provides)23 W
6120 47163 MT
(too much text to be useful.  So the)
41 W( challenge of the FUF debugger is to fine-tune the tracing system to produce just)40 W
6120 48540 MT
(enough information to locate the bugs in the grammar and/or in the input FD.)SH
7920 51019 MT
(The grammar developper indicates what portions of the grammar must be)
23 W( traced: the grammar is traced, not the)24 W
6120 52396 MT
(unifier. Therefore, to trigger)
96 W( tracing, one must put directives into the grammar. At the Lisp level, and for a given)95 W
6120 53773 MT
(grammar including tracing directives, traces can be switched on or off by the following functions:)SH
ES
%%Page: 79 80
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(79)SH
9 /Courier AF
10839 11761 MT
(I GENERAL TRACING CONTROL)SH
13500 50 10839 11961 UL
10839 13657 MT
(\050trace-on\051 enable)
540 W( all trace messages to be output.)SH
10839 14605 MT
(\050trace-off\051 disable all trace messages to be output)SH
10839 15553 MT
(\050trace-bp &optional \050frequency 10\051\051:)SH
15159 16501 MT
(Output a dot for every frequency backtracking points.)SH
15159 17449 MT
(Useful for long computations to get a feeling of what's happening.)SH
15159 18397 MT
(Works even if \050trace-off\051.)SH
10839 19345 MT
(%break% allows the insertion of break points in the grammar.)SH
10839 20293 MT
(\050trace-level level\051)SH
15159 21241 MT
(Determines detail level of trace to be printed.  The following)SH
15159 22189 MT
(levels are defined:)SH
23259 23137 MT
(00: feature level action)SH
23259 24085 MT
(05: unimportant alt-level action)SH
23259 25033 MT
(10: alt-level action - branch number trying)SH
23259 25981 MT
(12: demo messages)SH
23259 26929 MT
(15: freeze, ignore, bk-class)SH
23259 27877 MT
(20: constituent level action)SH
23259 28825 MT
(30: important failure - end of alt)SH
10839 30721 MT
(II TRACING FLAGS MANAGEMENT: ENABLE & DISABLE)SH
24300 50 10839 30921 UL
10839 32617 MT
(\050all-tracing-flags &optional \050grammar *u-grammar*\051\051)SH
17319 33565 MT
(return the list of all tracing flags defined in grammar.)SH
10839 34513 MT
(\050trace-disable flag\051  disable flag.  Everything works as if flag was not)SH
22719 35461 MT
(defined in the grammar.)SH
10839 36409 MT
(\050trace-enable flag\051)
SH( re-enable)
1080 W( a disabled flag.)SH
10839 37357 MT
(\050trace-disable-all\051 disable)
1080 W( all flags.)SH
10839 38305 MT
(\050trace-enable-all\051 re-enable)
1620 W( all flags.)SH
10839 39253 MT
(\050trace-enable-alt alt-name :expansion t :grammar g\051)SH
10839 40201 MT
(\050trace-disable-alt alt-name ...\051)SH
22719 41149 MT
(Enable all tracing flags defined under a def-alt or)SH
22719 42097 MT
(def-conj. If)
540 W( expansion is nil, does not expand the)SH
22719 43045 MT
(sub-def-alt.)SH
10839 43993 MT
(\050trace-disable-match string\051)SH
22719 44941 MT
(disable all flags whose names contain string.)SH
10839 45889 MT
(\050trace-enable-match string\051)540 W
22719 46837 MT
(re-enable all flags whose names contain string.)SH
10839 48733 MT
(III CONTROL OF SPECIFIC ACTIVITY TRACING)SH
21600 50 10839 48933 UL
10839 50629 MT
(\050trace-determine :on t|nil\051  enable tracing of determine stage or not.)SH
10839 51577 MT
(\050trace-category :all|cat|\050cat1...catn\051 t|nil\051 enable tracing of)SH
27579 52525 MT
(categories or not.)SH
10839 53473 MT
(\050trace-bk-class t|nil\051  list special messages concerning bk-class)SH
10839 54421 MT
(\050trace-wait :on t|nil\051  list special messages concerning goal freezing)SH
10839 55369 MT
(\050trace-cset :on t|nil\051  trace cset expansion)SH
10839 56317 MT
(\050trace-alts :on t|nil\051  detailed tracing of all alts, even unnamed.)SH
10839 57265 MT
(\050hyper-trace-category cat :status t|nil\051)SH
23799 58213 MT
(trace category with printing of full constituent)SH
23799 59161 MT
(before unification of constituents of the traced cats)SH
42480 48946 50 10440 59746 BX BX1
14 /Times-Bold AF
8280 63564 MT
(13.4. Identifying Possible Bugs: Trace-bp)SH
10 /Times-Roman AF
10080 64941 MT
(To identify whether FUF enters into unbounded backtracking \050which is the sign of a)
57 W( bug in the grammar or in)58 W
8280 66318 MT
(the input\051, it is useful to first monitor how many)
27 W( backtracking points are being used.  This can be achieved by using)26 W
8280 67695 MT
(the)SH
/Courier SF
9754 XM
(trace-bp)SH
/Times-Roman SF
14806 XM
(\050trace backtracking points\051 function.  This is the only tracing function which can be activated even if)2 W
8280 69072 MT
(the general tracing system is turned off \050with the function)69 W
/Courier SF
32244 XM
(trace-off)SH
/Times-Roman SF
(\051. The)
388 W( effect of the function is to output)
69 W( a)68 W
8280 70449 MT
(dot on the screen every n backtracking points, where n is 10 by default and can be changed)
5 W( by giving an argument to)6 W
/Courier SF
8280 71826 MT
(trace-bp)SH
/Times-Roman SF
(. The)
250 W( form of the function is:)SH
ES
%%Page: 80 81
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(80)SH
9 /Courier AF
8679 11761 MT
(\050TRACE-BP &optional n\051)SH
8679 13657 MT
(\050TRACE-BP nil\051: turns off printing of .)SH
42480 3442 50 8280 14242 BX BX1
10 /Times-Roman AF
7920 16721 MT
(If the string of dots becomes longer than expected,)
33 W( then it is worth stopping the unifier under the suspicion that)32 W
6120 18098 MT
(something is going wrong, and to start the tracing system with)SH
/Courier SF
31286 XM
(trace-on)SH
/Times-Roman SF
(.)SH
14 /Times-Bold AF
6120 21916 MT
(13.5. Levels of Tracing)SH
10 /Times-Roman AF
7920 23293 MT
(In the attempt)
20 W( to reduce the amount of trace messages and finding the original source of failure, the most useful)21 W
6120 24670 MT
(tool is the)90 W
/Courier SF
10585 XM
(trace-level)SH
/Times-Roman SF
17525 XM
(function, which filters tracing messages according)
90 W( to their importance.  The following)89 W
6120 26047 MT
(levels of importance are predefined:)SH
/Symbol SF
7910 27500 MT
(\267)SH
/Times-Roman SF
8620 XM
(30: important failure - end of alt)SH
/Symbol SF
7910 29258 MT
(\267)SH
/Times-Roman SF
8620 XM
(20: constituent level action)SH
/Symbol SF
7910 31016 MT
(\267)SH
/Times-Roman SF
8620 XM
(15: freeze, ignore, bk-class)SH
/Symbol SF
7910 32774 MT
(\267)SH
/Times-Roman SF
8620 XM
(12: demo messages)SH
/Symbol SF
7910 34532 MT
(\267)SH
/Times-Roman SF
8620 XM
(10: alt-level action - branch number trying)SH
/Symbol SF
7910 36290 MT
(\267)SH
/Times-Roman SF
8620 XM
(05: unimportant alt-level action)SH
/Symbol SF
7910 38048 MT
(\267)SH
/Times-Roman SF
8620 XM
(00: feature level action)SH
7920 40527 MT
(The function)105 W
/Courier SF
13518 XM
(trace-level)SH
/Times-Roman SF
20473 XM
(sets the minimum level of tracing messages that can be printed.)
105 W( Thus,)
461 W( calling)106 W
6120 41904 MT
(\050trace-level 20\051 insures that only important messages of level 20 and 30 will be printed.)SH
7920 44383 MT
(The levels are defined as follows:)SH
/Symbol SF
7910 45836 MT
(\267)SH
/Times-Roman SF
8620 XM
(30: An ``important'' failure in unification occurs - that is, all the branches of an alt)
34 W( have been tried and)33 W
8620 46941 MT
(failed. This)
530 W( in general means that the input is not compatible with the)
140 W( grammar.  It does not force)141 W
8620 48046 MT
(immediate failure of the overall unification process, because some backtracking)
135 W( options may still be)134 W
8620 49151 MT
(open, but it is a strong)
214 W( indication that something wrong is going on.  In general, there is a high)215 W
8620 50256 MT
(probability that the)SH
/Times-Italic SF
16481 XM
(first)SH
/Times-Roman SF
18343 XM
(level 30 failure message is the initial failure \050cf.  p.77\051.)SH
/Symbol SF
7910 52014 MT
(\267)SH
/Times-Roman SF
8620 XM
(20: Constituent Level Action - traces the constituent tree traversal of FUF.  Whenever the grammar is)73 W
8620 53119 MT
(re-accessed to unify a new constituent, a)
202 W( tracing message is printed.  This is useful to follow the)203 W
8620 54224 MT
(progression of the unifier through)
138 W( the total FD.  In general, the traversal is a top-down breadth-first)137 W
8620 55329 MT
(expansion of the constituent tree.)SH
/Symbol SF
7910 57087 MT
(\267)SH
/Times-Roman SF
8620 XM
(15: Control messages: The dominant control strategy of FUF)
181 W( is the top-down constituent traversal.)182 W
8620 58192 MT
(Fine-tuning of this strategy is, however, possible, using)
22 W( the)21 W
/Courier SF
32704 XM
(bk-class)SH
/Times-Roman SF
(,)SH
/Courier SF
38025 XM
(wait)SH
/Times-Roman SF
40696 XM
(and)SH
/Courier SF
42411 XM
(ignore)SH
/Times-Roman SF
46282 XM
(directives.)SH
8620 59297 MT
(These constructs are described in more detail in Section 12.)SH
/Symbol SF
7910 61055 MT
(\267)SH
/Times-Roman SF
8620 XM
(12: Demo messages: The alt)
29 W( construct allows the grammar writer to output ``demo messages'' when an)30 W
8620 62160 MT
(alt is entered.  These messages are considered of level 12.)SH
/Symbol SF
7910 63918 MT
(\267)SH
/Times-Roman SF
8620 XM
(10: Alt-level action - branch number trying: when an alt is tried, branches)
141 W( are tried successively, in)140 W
8620 65023 MT
(order, randomly \050for a ralt\051 or directly \050for an indexed alt\051.)
105 W( A)
462 W( tracing message is output each time a)106 W
8620 66128 MT
(branch is tried, indicating the name of the alt)
48 W( \050therefore the position of the unifier within the grammar\051)47 W
8620 67233 MT
(and the number of the branch within the alt.)SH
/Symbol SF
7910 68991 MT
(\267)SH
/Times-Roman SF
8620 XM
(05: unimportant alt-level action: when an alt is indexed, certain tracing messages are printed)
87 W( to docu-)88 W
8620 70096 MT
(ment the index search.)SH
/Symbol SF
7910 71854 MT
(\267)SH
/Times-Roman SF
8620 XM
(00: feature level action: each time)
37 W( a feature is added to the total FD by the unifier, a tracing message is)36 W
ES
%%Page: 81 82
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(81)SH
10780 11486 MT
(printed. This)
250 W( is the absolute lowest level of tracing and results in unending seas of messages.)SH
10080 13965 MT
(In general, when debugging, start by setting \050trace-level 30\051, this provides most of the)
23 W( time directly the location)24 W
8280 15342 MT
(of the initial failure.)SH
14 /Times-Bold AF
8280 19160 MT
(13.6. Tracing of Alternatives and Options)SH
10 /Times-Roman AF
10080 20537 MT
(To follow the)
11 W( unifier as it proceeds through the grammar, the most useful trace is generated by giving a name to)10 W
8280 21914 MT
(an alternative of the grammar. It is done by adding an atomic)
79 W( name after the keywords)80 W
/Courier SF
44347 XM
(alt)SH
/Times-Roman SF
(,)SH
/Courier SF
46727 XM
(ralt)SH
/Times-Roman SF
49457 XM
(or)SH
/Courier SF
50620 XM
(opt)SH
/Times-Roman SF
52750 XM
(in the)80 W
8280 23291 MT
(grammar:)SH
9 /Courier AF
14619 24976 MT
(\050\050alt PASSIVE)SH
15699 25924 MT
(\050)SH
16239 26872 MT
(;; branch 1 of alt passive)SH
16239 27820 MT
(\050\050verb \050\050voice passive\051\051\051)SH
16779 28768 MT
(\050prot none\051\051)SH
16239 30664 MT
(;; branch 2 of alt passive)SH
16239 31612 MT
(\050\050verb \050\050voice passive\051\051\051)SH
16779 32560 MT
(\050prot any\051)SH
16779 33508 MT
(\050prot \050\050cat np\051\051\051)SH
16779 34456 MT
(\050by-obj \050\050cat pp\051 \050prep \050\050lex "by"\051\051\051 \050np \050^ prot\051\051\051\051)SH
16779 35404 MT
(\050pattern \050dots verb by-obj dots\051\051\051\051\051)SH
15159 37300 MT
(;; body of alt passive \050common to all branches\051)SH
15159 38248 MT
(\050verb \050\050cat verb-group\051\051\051)SH
15159 39196 MT
(...\051)SH
42480 15766 50 10440 39781 BX BX1
10 /Times-Roman AF
10080 42260 MT
(Here, this fraction of the grammar has been marked by)
44 W( the directive:)43 W
/Courier SF
38237 XM
(\050alt PASSIVE ...\051)43 W
/Times-Roman SF
(. \050An equivalent)43 W
8280 43637 MT
(notation is)20 W
/Courier SF
12765 XM
(\050alt \050:trace PASSIVE\051 ...\051)20 W
/Times-Roman SF
(.\051 The)
290 W( effect will be that all unification done subsequently)
20 W( will be)21 W
8280 45014 MT
(traced, producing the following output:)SH
9 /Courier AF
15159 46699 MT
(--> Entering ALT PASSIVE)SH
15159 47647 MT
(--> Trying Branch #1 in ALT PASSIVE:)SH
15159 48595 MT
(--> Fail on trying \050prot none\051 with)SH
25419 49543 MT
(\050prot \050\050nnp \050\050n \050\050lex boy\051\051\051\051\051\051\051)SH
15159 50491 MT
(--> Trying Branch #2 in ALT PASSIVE:)SH
15159 51439 MT
(...)SH
42480 6286 50 10440 52024 BX BX1
10 /Times-Roman AF
10080 54503 MT
(If a traced)
190 W( alternative is found later in the grammar, the level of indentation will increase. If the level of)189 W
8280 55880 MT
(indentation decreases, that means a whole)SH
/Courier SF
25304 XM
(\050alt ...\051)SH
/Times-Roman SF
30954 XM
(has failed. It is indicated by the output:)SH
9 /Courier AF
15159 57565 MT
(--> Fail on ALT PROT.)SH
42480 1546 50 10440 58150 BX BX1
10 /Times-Roman AF
10080 60629 MT
(The possible messages printed when the grammar is traced are:)SH
ES
%%Page: 82 83
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(82)SH
9 /Courier AF
8679 11761 MT
(Move in the alternatives:)SH
13500 50 8679 11961 UL
12999 12709 MT
(ENTERING ALT f: BRANCH #i)SH
12999 13657 MT
(FAIL IN ALT f)SH
12999 14605 MT
(When the alt is indexed:)SH
12999 15553 MT
(ENTERING ALT f -- JUMP INDEXED TO BRANCH #i INDEX-NAME)SH
12999 16501 MT
(NO VALUE GIVEN IN INPUT FOR INDEX INDEX-NAME - NO JUMP)SH
8679 17449 MT
(For options:)SH
6480 50 8679 17649 UL
12999 18397 MT
(TRYING WITH OPTION o)SH
12999 19345 MT
(TRYING WITHOUT OPTION o)SH
8679 20293 MT
(Regular unification:)SH
10800 50 8679 20493 UL
12999 21241 MT
(ENRICHING INPUT WITH s AT LEVEL l)SH
12999 22189 MT
(FAIL IN TRYING s with s AT LEVEL l)SH
8679 23137 MT
(Pattern unification:)SH
10800 50 8679 23337 UL
12999 24085 MT
(UNIFYING PATTERN p with p)SH
12999 25033 MT
(TRYING PATTERN p)SH
12999 25981 MT
(ADDING CONSTRAINTS c)SH
12999 26929 MT
(FAIL ON PATTERN p)SH
8679 27877 MT
(Unification between pointers to constituents:)SH
24300 50 8679 28077 UL
12999 28825 MT
(UPDATING s WITH VALUE s AT LEVEL l)SH
12999 29773 MT
(s BECOMES A POINTER TO s AT LEVEL l)SH
12999 30721 MT
(UPDATING BOTH PATHS TO A BOUND)SH
42480 20506 50 8280 31306 BX BX1
14 /Times-Bold AF
6120 35124 MT
(13.7. Local tracing with boundaries)SH
10 /Times-Roman AF
7920 36501 MT
(If you want a more focused tracing, you can put anywhere in the grammar)
96 W( a pair of atomic flags whose first)97 W
6120 37878 MT
(character must be a "%" \050value of variable)61 W
/Courier SF
23807 XM
(*trace-marker*)SH
/Times-Roman SF
(\051. All the unification done between the 2 flags will)61 W
6120 39255 MT
(be traced, and will produce the same messages as usual.)SH
9 /Courier AF
14079 40940 MT
(;; branch 2 of alt passive)SH
14079 41888 MT
(\050\050verb \050\050voice passive\051\051\051)SH
14619 42836 MT
(\050prot any\051)SH
14619 43784 MT
(%by-obj%)SH
14619 44732 MT
(\050prot \050\050cat np\051\051\051)SH
14619 45680 MT
(\050by-obj \050\050cat pp\051 \050prep \050\050lex "by"\051\051\051 \050np \050^ prot\051\051\051\051)SH
14619 46628 MT
(%by-obj%)SH
14619 47576 MT
(\050pattern \050dots verb by-obj dots\051\051\051)SH
14619 48524 MT
(...)SH
42480 9130 50 8280 49109 BX BX1
10 /Times-Roman AF
7920 51588 MT
(All the unification done between the 2 flags %by-obj% will be traced.  You furthermore will have a message:)SH
9 /Courier AF
8679 53273 MT
(Switching local trace flags on and off:)SH
12999 54221 MT
(TRACING FLAG f)SH
12999 55169 MT
(UNTRACING FLAG f)SH
42480 3442 50 8280 55754 BX BX1
10 /Times-Roman AF
7920 58233 MT
(You generally want to have only small portions of the grammar put between tracing flags.)SH
12 /Times-Bold AF
6120 61917 MT
(13.7.1. Special Flags %trace-on% and %trace-off%)SH
10 /Times-Roman AF
7920 63294 MT
(The special tracing flags)41 W
/Courier SF
18137 XM
(%trace-on%)SH
/Times-Roman SF
24428 XM
(and)SH
/Courier SF
26163 XM
(%trace-off%)SH
/Times-Roman SF
33054 XM
(are predefined and have the)
41 W( effect of temporarily)42 W
6120 64671 MT
(turning all tracing on and off.  They are used as all other local tracing flags, as shown in the following example:)SH
ES
%%Page: 83 84
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(83)SH
9 /Courier AF
14619 12709 MT
(\050\050alt PASSIVE)SH
15699 13657 MT
(\050)SH
16239 14605 MT
(;; branch 1 of alt passive)SH
16239 15553 MT
(\050\050verb \050\050voice passive\051\051\051)SH
16779 16501 MT
(\050prot none\051\051)SH
16239 18397 MT
(;; branch 2 of alt passive)SH
16239 19345 MT
(\050\050verb \050\050voice passive\051\051\051)SH
16779 21241 MT
(%trace-off% ;;)
4860 W( Turn off tracing of details in this branch)SH
16779 23137 MT
(\050prot any\051)SH
16779 24085 MT
(\050prot \050\050cat np\051\051\051)SH
16779 25033 MT
(\050by-obj \050\050cat pp\051 \050prep \050\050lex "by"\051\051\051 \050np \050^ prot\051\051\051\051)SH
16779 25981 MT
(\050pattern \050dots verb by-obj dots\051\051)SH
16779 27877 MT
(%trace-on% ;;)
5400 W( Turn tracing back on)SH
16779 29773 MT
(\051\051\051)SH
15159 31669 MT
(;; body of alt passive \050common to all branches\051)SH
15159 32617 MT
(\050verb \050\050cat verb-group\051\051\051)SH
15159 33565 MT
(...\051)SH
42480 24112 50 10440 34912 BX BX1
10 SS 
10080 37391 MT
(%Trace-off%)SH
/Times-Roman SF
16963 XM
(is generally used to remove tracing information)
33 W( from a region of the grammar that has already)32 W
8280 38768 MT
(been debugged but still leaving the alt traversal tracing messages on.  The same)
47 W( effect is most of the time achieved)48 W
8280 40145 MT
(by using the)SH
/Courier SF
13419 XM
(trace-level)SH
/Times-Roman SF
20269 XM
(function, but)SH
/Courier SF
25630 XM
(%trace-off%)SH
/Times-Roman SF
32480 XM
(allows finer tuning of the tracing behavior of FUF.)SH
12 /Times-Bold AF
8280 43829 MT
(13.7.2. The Special Tracing Flag %break%)SH
10 /Times-Roman AF
10080 45206 MT
(The special tracing flag)59 W
/Courier SF
19980 XM
(%break%)SH
/Times-Roman SF
24489 XM
(is used to trigger a break in the execution of FUF.  When found by FUF, a)58 W
8280 46583 MT
(Lisp continuable break is triggered.  It is then possible to examine the current state of the unification using)
36 W( the Lisp)37 W
8280 47960 MT
(debugger. Using)
282 W( the Lisp debugger,)
16 W( it is then possible to either resume unification or abort it.  Within the debugger,)15 W
8280 49337 MT
(the total fd can be inspected \050and modified\051 by using)
162 W( the function)163 W
/Courier SF
36612 XM
(path-value)SH
/Times-Roman SF
43025 XM
(and)SH
/Courier SF
44882 XM
(set-path-value)SH
/Times-Roman SF
(. A)576 W
8280 50714 MT
(typical session is shown below:)SH
ES
%%Page: 84 85
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(84)SH
9 /Courier AF
8679 12709 MT
(\050setq *u-grammar* '\050\050alt \050\050\050cat clause\051 \050pattern \050s v o\051\051)SH
23259 13657 MT
(\050s \050\050cat np\051\051\051)SH
23259 14605 MT
(\050v \050\050cat v\051\051\051)SH
23259 15553 MT
(\050o \050\050cat np\051\051\051\051)SH
22719 16501 MT
(\050\050cat np\051 %break%\051)SH
22719 17449 MT
(\050\050cat v\051 %break%\051\051\051\051\051)SH
8679 19345 MT
(;; The np and v branch are not yet written - a break is inserted)SH
8679 20293 MT
(;; The developer can then insert new values manually during unification.)SH
8679 22189 MT
(LISP> \050uni '\050\050cat clause\051)SH
15699 23137 MT
(\050s \050\050lex "John"\051\051\051)SH
15699 24085 MT
(\050v \050\050lex "like"\051\051\051)SH
15699 25033 MT
(\050o \050\050lex "Mary"\051\051\051\051\051)SH
8679 27877 MT
(>)SH
8679 29773 MT
(>========================================)SH
8679 30721 MT
(>STARTING CAT CLAUSE AT LEVEL {})SH
8679 31669 MT
(>========================================)SH
8679 34513 MT
(>Expanding constituent {} into cset \050{O} {V} {S}\051.)SH
8679 35461 MT
(>)SH
8679 37357 MT
(>========================================)SH
8679 38305 MT
(>STARTING CAT NP AT LEVEL {O})SH
8679 39253 MT
(>========================================)SH
8679 42097 MT
(Break: Break in grammar)SH
8679 43993 MT
(Restart actions \050select using :continue\051:)SH
9219 44941 MT
(0: return from break.)SH
8679 45889 MT
([1c] FUG5 23> \050path-value {o}\051)SH
8679 47785 MT
(\050\050LEX "Mary"\051 \050CAT NP\051\051)SH
8679 48733 MT
([1c] FUG5 24> \050path-value {n}\051)SH
8679 50629 MT
(\050\050LEX "John"\051 \050CAT NP\051\051)SH
8679 52525 MT
([1c] FUG5 25> :cont)SH
8679 54421 MT
(>Constituent {O} is a leaf.)SH
8679 55369 MT
(>)SH
8679 57265 MT
(>========================================)SH
8679 58213 MT
(>STARTING CAT V AT LEVEL {V})SH
8679 59161 MT
(>========================================)SH
8679 62005 MT
(Break: Break in grammar)SH
8679 63901 MT
(Restart actions \050select using :continue\051:)SH
9219 64849 MT
(0: return from break.)SH
8679 65797 MT
([1c] FUG5 26> :reset)SH
8679 67693 MT
(FUG5 27>)SH
42480 57478 50 8280 68278 BX BX1
10 /Times-Roman AF
7920 70757 MT
(The behavior of the debugger depends on which)
55 W( version of Common Lisp you are using.  The example shown)54 W
ES
%%Page: 85 86
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(85)SH
8280 11486 MT
(here is run under Franz)
93 W( Inc's Allegro Common Lisp.  Consult your Lisp manual to find out the details of how to)94 W
8280 12863 MT
(resume processing \050the :cont command in ACL\051 and abort processing)
48 W( \050the :res command in ACL\051.  Another source)47 W
8280 14240 MT
(of variation is whether the {} notation is recognized within the debugger or not.  This notation)
15 W( is implemented using)16 W
8280 15617 MT
(macro characters in Lisp.  Macro-characters are recognized in ACL's debugger but not in Lucid Common)
108 W( Lisp's)107 W
8280 16994 MT
(implementation. For)
580 W( that reason, the function path-value accepts as parameter either a path or)
165 W( simply a list of)166 W
8280 18371 MT
(attributes.)SH
10080 20850 MT
(The function)9 W
/Courier SF
15486 XM
(path-value)SH
/Times-Roman SF
21745 XM
(returns the value)
9 W( of a path in the current total FD.  It is useful to inspect the current)8 W
8280 22227 MT
(value of the total FD.  The function)10 W
/Courier SF
22775 XM
(set-path-value)SH
/Times-Roman SF
31435 XM
(is also defined to change a value within the total FD.  Note)10 W
8280 23604 MT
(that it's use is highly dangerous.)SH
9 /Courier AF
10839 25289 MT
(\050path-value path-or-list\051  Return the value of path in the current total FD.)SH
10839 27185 MT
(\050set-path-value path-or-list FD\051  Set the value of a path in the current)SH
29199 28133 MT
(total FD to FD.)SH
10839 30029 MT
(Examples:)SH
10839 31925 MT
(\050path-value {process v}\051)SH
10839 32873 MT
(\050path-value '\050process v\051\051  ;; equivalent form when the {} notation is not)SH
25419 33821 MT
(;; recognized)SH
10839 35717 MT
(\050set-path-value {process v} '\050\050lex "take"\051\051\051)SH
10839 37613 MT
(\050set-path-value {process v} \050u \050path-value {process v}\051 '\050\050tense past\051\051\051\051)SH
25419 38561 MT
(;; u performs a simple unification between fds.)SH
42480 15580 50 10440 39908 BX BX1
10 /Times-Roman AF
10080 42387 MT
(For more)
61 W( general access, the total FD is accessible in the special variable)60 W
/Courier SF
40299 XM
(*input*)SH
/Times-Roman SF
44809 XM
(and it can be modified in)60 W
8280 43764 MT
(any possible ways.)
40 W( But)
332 W( if you do follow this way, there is a high probability that the unification will not be able to)41 W
8280 45141 MT
(proceed normally.  Note that there is no way to easily remove a conflation from the total FD using only)288 W
/Courier SF
8280 46518 MT
(path-value)SH
/Times-Roman SF
14533 XM
(and)SH
/Courier SF
16230 XM
(set-path-value)SH
/Times-Roman SF
24883 XM
(because)SH
/Courier SF
28301 XM
(path-value)SH
/Times-Roman SF
34554 XM
(always follows the paths)
3 W( until a non-path value can)4 W
8280 47895 MT
(be returned.  The following example illustrates this limitation:)SH
9 /Courier AF
10839 49580 MT
(\050setq *input* '\050\050a {b}\051)SH
19479 50528 MT
(\050b \050\050b1 1\051\051\051\051\051)SH
10839 52424 MT
(\050path-value {a}\051 --> \050\050b1 1\051\051)SH
10839 54320 MT
(\050set-path-value {a} '\050\050b1 2\051\051\051)SH
10839 56216 MT
(\050path-value {}\051 --> \050\050a {b}\051 \050b \050\050b1 2\051\051\051\051)SH
10839 58112 MT
(;; Cannot just with path-value and set-path-value remove the conflation)SH
10839 59060 MT
(;; between a and b \050a {b}\051.)SH
42480 11026 50 10440 59645 BX BX1
10 /Times-Roman AF
10080 62124 MT
(One last word)
197 W( of caution: when using)196 W
/Courier SF
26702 XM
(set-path-value)SH
/Times-Roman SF
(, relative paths are made absolute before being)196 W
8280 63501 MT
(inserted relative)
65 W( to the path of insertion given as parameter.  Since the relative path notation can be ambiguous \050cf)66 W
8280 64878 MT
(p.15\051, this can, under circumstances where there is an ambiguity, create unexpected results.)SH
ES
%%Page: 86 87
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(86)SH
14 /Times-Bold AF
6120 11760 MT
(13.8. The)SH
/Times-Roman SF
11954 XM
(trace-enable)SH
/Times-Bold SF
19146 XM
(and)SH
/Times-Roman SF
21752 XM
(trace-disable)SH
/Times-Bold SF
29256 XM
(Family of Functions)SH
10 /Times-Roman AF
7920 13137 MT
(In general, a grammar is defined in a file, that you load in your Lisp)
14 W( environment.  The tracing flags are defined)13 W
6120 14514 MT
(in that file after the alts and opts or as local flags.  When you develop a grammar,)
82 W( you want to focus on different)83 W
6120 15891 MT
(parts of the grammar.  In order to do that, you can selectively enable or disable some of the flags defined in the)110 W
6120 17268 MT
(grammar.)SH
7920 19747 MT
(The function)148 W
/Courier SF
13604 XM
(all-tracing-flags)SH
/Times-Roman SF
24202 XM
(returns a list)
148 W( of all the flags defined in the grammar.  You can then)149 W
6120 21124 MT
(choose to enable or disable all the flags, only a given flag, or all flags whose name matches a given string.)SH
7920 23603 MT
(When a flag is disabled,)
34 W( everything happens as if the flag was not defined at all in the grammar.  Note that you)33 W
6120 24980 MT
(cannot create a new flag)
21 W( in the grammar by using these functions.  You can simply turn on and off existing flags.  It)22 W
6120 26357 MT
(is therefore a good idea to define all the possible flags)
113 W( in a grammar and to adjust the list of enabled flags from)112 W
6120 27734 MT
(within lisp.)SH
7920 30213 MT
(When you)
122 W( use the)123 W
/Courier SF
15854 XM
(def-alt)SH
/Times-Roman SF
20427 XM
(and)SH
/Courier SF
22244 XM
(def-conj)SH
/Times-Roman SF
27417 XM
(notation \050cf. Section 6\051, the functions)123 W
/Courier SF
43320 XM
(trace-enable-alt)SH
/Times-Roman SF
6120 31590 MT
(and)SH
/Courier SF
7852 XM
(trace-disable-alt)SH
/Times-Roman SF
18340 XM
(can be used to enable and disable)
38 W( all the tracing flags appearing under a given def-alt)37 W
6120 32967 MT
(or def-conj construct.  The)130 W
/Courier SF
17656 XM
(expansion)SH
/Times-Roman SF
23436 XM
(keyword determines if the enabling/disabling)
130 W( only concerns the tracing)131 W
6120 34344 MT
(flags appearing directly in the def-alt construct, or also all the flags appearing in the expansion of the construct.)SH
14 /Times-Bold AF
6120 38184 MT
(13.9. The)SH
/Times-Roman SF
11954 XM
(:demo)SH
/Times-Bold SF
15804 XM
(directive)SH
10 /Times-Roman AF
7920 39561 MT
(Reading traces from the unifier is a particularly tedious task.  The main problem is that)
33 W( the messages generated)32 W
6120 40938 MT
(by the program are very similar to each other.  The)113 W
/Courier SF
27969 XM
(:demo)SH
/Times-Roman SF
32045 XM
(directive allows the grammar)
113 W( writer to bring some)114 W
6120 42315 MT
(variety to these messages.  A demo-message can be used to output a specific message during the trace of)
183 W( the)182 W
6120 43692 MT
(program when entering an alt \050or a ralt\051 construct.  The syntax is indicated by the following figure:)SH
9 /Courier AF
11919 45377 MT
(\050alt voice \050:demo "Is the voice active ~)SH
22179 46325 MT
(or passive?"\051)SH
14619 47273 MT
(\050\050\050voice active\051)SH
15699 48221 MT
(...\051)SH
15159 49169 MT
(\050\050voice passive\051)SH
15699 50117 MT
(...\051\051\051)SH
42480 6286 50 8280 50702 BX BX1
10 /Times-Roman AF
7920 53181 MT
(The message will be printed in the trace of the program \050only if the tracing flag voice is enabled\051 as shown:)SH
9 /Courier AF
8679 55814 MT
(--> Entering alt VOICE)SH
10839 56762 MT
(Is the voice active or passive?)SH
8679 57710 MT
(--> Trying branch #1)SH
10839 58658 MT
(...)SH
42480 5338 50 8280 59243 BX BX1
10 /Times-Roman AF
7920 61722 MT
(Note that the message is indented in the stream)
32 W( of trace messages.  Such messages allow the grammar writer to)33 W
6120 63099 MT
(put some semantic information into the trace messages, so that the whole stream of messages can be more)
102 W( easily)101 W
6120 64476 MT
(interpreted.)SH
7920 66955 MT
(In addition to its position at the)
133 W( top of an)134 W
/Courier SF
25810 XM
(alt)SH
/Times-Roman SF
27994 XM
(construct, a demo-message can be embedded anywhere in a)134 W
6120 68332 MT
(grammar by using)
144 W( the)143 W
/Courier SF
15693 XM
(control-demo)SH
/Times-Roman SF
23286 XM
(function.)SH
/Courier SF
27655 XM
(Control-demo)SH
/Times-Roman SF
35248 XM
(must be used within a)143 W
/Courier SF
44935 XM
(control)SH
/Times-Roman SF
49528 XM
(pair and)143 W
6120 69709 MT
(produces an indented demo message in the trace stream.  The following example illustrates its)
487 W( use:)488 W
/Courier SF
6120 71086 MT
(control-demo)SH
ES
%%Page: 87 88
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(87)SH
9 /Courier AF
14079 11761 MT
(\050alt from-loc \050:demo "Is there a from-loc role?"\051)SH
16779 12709 MT
(\050\050\050from-loc none\051)SH
17859 13657 MT
(%TRACE-OFF%)SH
17859 14605 MT
(\050control \050control-demo "No from-loc"\051\051)SH
17859 15553 MT
(%TRACE-ON%\051)SH
17319 16501 MT
(\050\050from-loc given\051)SH
17859 17449 MT
(%TRACE-OFF%)SH
17859 18397 MT
(\050control \050control-demo "From-loc is here"\051\051)SH
17859 19345 MT
(%TRACE-ON%\051\051\051)SH
/Times-Roman SF
10839 21241 MT
(Tracing output:)SH
/Courier SF
10839 23137 MT
(--> Entrering alt FROM-LOC)SH
12999 24085 MT
(Is there a from-loc role?)SH
10839 25033 MT
(--> Fail with branch #1)SH
10839 25981 MT
(--> Entering branch #2)SH
12999 26929 MT
(From-loc is here)SH
10839 27877 MT
(--> Success with branch #2)SH
42480 18424 50 10440 29224 BX BX1
10 /Times-Roman AF
10080 31703 MT
(NOTE: The)186 W
/Courier SF
15451 XM
(control)SH
/Times-Roman SF
20087 XM
(pair containing a)186 W
/Courier SF
27616 XM
(control-demo)SH
/Times-Roman SF
35252 XM
(call should be put within a %TRACE-OFF%)
186 W( -)185 W
8280 33080 MT
(%TRACE-ON% pair to avoid the printing of system trace messages regarding the control pair.)SH
10080 35559 MT
(NOTE: The demo message string is passed to the)112 W
/Courier SF
31058 XM
(format)SH
/Times-Roman SF
35020 XM
(common-lisp function,)
112 W( and can therefore contain)113 W
8280 36936 MT
(formatting characters accepted by that function \050)SH
/Times-Italic SF
(e.g.)SH
/Times-Roman SF
(, ~ or ~%\051.  Refer to your CommonLisp manual for details.)SH
14 /Times-Bold AF
8280 40754 MT
(13.10. Tracing of Specific Stages of the Unification)SH
10 /Times-Roman AF
10080 42131 MT
(The following group of function enable or disable tracing of specific stages of the unification process:)SH
9 /Courier AF
10839 43816 MT
(\050trace-determine :on t|nil\051)SH
10839 44764 MT
(\050trace-category :all|cat|\050cat1...catn\051 t|nil\051)SH
10839 45712 MT
(\050trace-bk-class t|nil\051)SH
10839 46660 MT
(\050trace-wait :on t|nil\051)SH
10839 47608 MT
(\050trace-cset :on t|nil\051)SH
10839 48556 MT
(\050trace-alts :on t|nil\051)SH
10839 49504 MT
(\050hyper-trace-category cat :status t|nil\051)SH
42480 7234 50 10440 50089 BX BX1
12 /Times-Bold AF
8280 53773 MT
(13.10.1. Trace-determine)SH
10 /Times-Roman AF
10080 55150 MT
(The determination stage)
9 W( checks that no ANY constraint is left unsatisfied at the end of the unification stage, and)8 W
8280 56527 MT
(that all TEST constraints are satisfied.  In)
93 W( addition, it checks that no further CSET traversal is required to restore)94 W
8280 57904 MT
(after frozen constraints have been thawed or forced.)SH
10080 60383 MT
(When trace-determine is on, these checks generate tracing messages.  The specific messages are:)SH
9 /Courier AF
10839 63016 MT
(FAIL: Found an ANY at level <path>)SH
10839 63964 MT
(Current Sentence: ....)SH
10839 65860 MT
(TEST succeeds: <expr> at level <path>)SH
10839 67756 MT
(Fail in testing <expr> at level <path>)SH
42480 7234 50 10440 68341 BX BX1
10 /Times-Roman AF
10080 70820 MT
(The current sentence is only printed when FUF)
83 W( is called from the toplevel function)82 W
/Courier SF
44619 XM
(uni)SH
/Times-Roman SF
46751 XM
(whose function is to)82 W
ES
%%Page: 88 89
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(88)SH
6120 11486 MT
(print a sentence.  In other uses)
65 W( of FUF, the current function is not generated.  This message is of level 30 \050highest)66 W
6120 12863 MT
(level\051.)SH
7920 15342 MT
(In addition, each time)
83 W( the determination stage is reached, a line of statistics on backtracking is printed, of the)82 W
6120 16719 MT
(form:)SH
9 /Courier AF
8679 19352 MT
([Used 119 backtracking points - 26 wrong branches - 15 undos])SH
42480 3256 50 8280 20699 BX BX1
10 /Times-Roman AF
7920 23178 MT
(Three pieces of information are provided:)SH
8120 24517 MT
(1.)SH
9120 XM
(The total number of backtracking points)
220 W( used so far.  This can be interpreted as the number of)221 W
9120 25622 MT
(``questions'' FUF asked to the grammar, or how many times a branch)
164 W( had to be chosen in an alt)163 W
9120 26727 MT
(construct.)SH
8120 28485 MT
(2.)SH
9120 XM
(The number of ``wrong)
148 W( branches'' - that is, how many times FUF picked up a branch and started)149 W
9120 29590 MT
(unification to finally undo this branch upon backtracking.  This can be interpreted)
101 W( as the number of)100 W
9120 30695 MT
(``wrong guesses'' made by FUF.)SH
8120 32453 MT
(3.)SH
9120 XM
(The number of ``undos'' - that is, how many features were added to)
142 W( the total FD while traversing)143 W
9120 33558 MT
(``wrong guesses'' and were later removed from the total FD upon)
232 W( backtracking.  This gives an)231 W
9120 34663 MT
(indication of how ``deep'' FUF went into wrong branches before realizing that they led to failure.)SH
7920 37142 MT
(When, because of the interaction)
62 W( between wait and the constituent traversal \050cf Section 12.4.1\051 a new cycle of)63 W
6120 38519 MT
(unification must be started after determination,)
68 W( a new line of statistics will be printed.  These lines of statistics are)67 W
6120 39896 MT
(NOT printed if the keyword parameter)78 W
/Courier SF
22306 XM
(non-interactive)SH
/Times-Roman SF
31634 XM
(is set to true when calling the)
78 W( top-level functions of)79 W
6120 41273 MT
(FUF \050for example, as in)SH
/Courier SF
15952 XM
(\050uni fd1 :non-interactive t\051)SH
/Times-Roman SF
(\051.)SH
7920 43752 MT
(These statistic)
146 W( lines are printed indicate whenever a unification cycle ends and a determination cycle starts.)145 W
6120 45129 MT
(They therefore provide important information on how unification is proceeding.)SH
12 /Times-Bold AF
6120 48813 MT
(13.10.2. Trace-Category and Hyper-trace-category)SH
10 /Times-Roman AF
7920 50190 MT
(Trace-category is useful to)
66 W( follow the traversal of the constituent structure as it is performed by FUF. When a)67 W
6120 51567 MT
(category C is traced, the)
149 W( following message is printed whenever a constituent of category C is unified with the)148 W
6120 52944 MT
(grammar:)SH
9 /Courier AF
8679 54629 MT
(>========================================)SH
8679 55577 MT
(>STARTING CAT ADJ AT LEVEL {SYNT-ROLES SUBJ-COMP HEAD})SH
8679 56525 MT
(>========================================)SH
42480 4204 50 8280 57872 BX BX1
10 /Times-Roman AF
7920 60351 MT
(The function)151 W
/Courier SF
13610 XM
(hyper-trace-category)SH
/Times-Roman SF
26011 XM
(provides more detail: if category C is ``hyper-traced'', the)
151 W( same)152 W
6120 61728 MT
(message is printed, and in addition the whole constituent is printed:)SH
9 /Courier AF
8679 63413 MT
(>========================================)SH
8679 64361 MT
(>STARTING CAT ADJ AT LEVEL {SYNT-ROLES SUBJ-COMP HEAD})SH
8679 65309 MT
(>========================================)SH
8679 67205 MT
(>CONSTITUENT {SYNT-ROLES SUBJ-COMP HEAD} =)SH
8679 68153 MT
(\050\050CAT ADJ\051 \050CONCEPT {SYNT-ROLES SUBJ-COMP CONCEPT}\051)SH
9219 69101 MT
(\050POLARITY {SYNT-ROLES SUBJ-COMP POLARITY}\051)SH
9219 70049 MT
(\050LEX {SYNT-ROLES SUBJ-COMP LEX}\051\051)SH
42480 8182 50 8280 70634 BX BX1
ES
%%Page: 89 90
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(89)SH
10080 11486 MT
(The functions are used as follows:)SH
9 /Courier AF
10839 13171 MT
(\050TRACE-CATEGORY c | :all | \050c1 ... cn\051  &optional t | nil\051)SH
10839 14119 MT
(\050HYPER-TRACE-CATEGORY c | :all | \050c1 ... cn\051 &optional t | nil\051)SH
19479 15067 MT
(Trace or hyper-trace a given category, or all categories)SH
19479 16015 MT
(\050if parameter is :all\051 or a list of categories.)SH
19479 16963 MT
(If a second parameter nil is added, the category or)SH
19479 17911 MT
(categories are untraced.)SH
42480 6286 50 10440 18496 BX BX1
12 /Times-Bold AF
8280 22180 MT
(13.10.3. Trace-Cset)SH
10 /Times-Roman AF
10080 23557 MT
(The)SH
/Courier SF
12104 XM
(trace-cset)SH
/Times-Roman SF
18573 XM
(function is used to monitor constituent traversal.  Each)
219 W( time FUF finishes unifying a)218 W
8280 24934 MT
(constituent, it computes the cset of the result of the unification, applying the rules described in)
105 W( Section 5.7.  The)106 W
8280 26311 MT
(constituents are then traversed breadth-first.  The)
53 W( function trace-cset triggers messages of the following form at the)52 W
8280 27688 MT
(end of the unification of each constituent:)SH
9 /Courier AF
10839 30321 MT
(>Expanding constituent {} into cset \050{SYNT-ROLES SUBJ-COMP})SH
30819 31269 MT
({PROCESS})SH
30819 32217 MT
({SYNT-ROLES SUBJECT}\051.)SH
10839 33165 MT
(>)SH
10839 35061 MT
(>========================================)SH
10839 36009 MT
(>STARTING CAT AP AT LEVEL {SYNT-ROLES SUBJ-COMP})SH
10839 36957 MT
(>========================================)SH
42480 9892 50 10440 38304 BX BX1
10 /Times-Roman AF
10080 40783 MT
(If the constituent has)
36 W( an empty cset, it means it is a leaf in the constituent structure.  In that case, the following)37 W
8280 42160 MT
(message is printed:)SH
9 /Courier AF
10839 44793 MT
(>Constituent {SYNT-ROLES SUBJ-COMP HEAD} is a leaf.)SH
10839 45741 MT
(>Constituent {PROCESS EVENT} is a leaf.)SH
10839 46689 MT
(>)SH
42480 5152 50 10440 48036 BX BX1
12 /Times-Bold AF
8280 51720 MT
(13.10.4. Trace-BK-Class)SH
10 /Times-Roman AF
10080 53097 MT
(The interpretation of the BK-class annotation has been introduced in Section 12.3.)
84 W( BK-class)
416 W( is used to allow)83 W
8280 54474 MT
(intelligent dependency-directed backtracking.  Each choice point can be marked to belong to a certain backtracking)43 W
8280 55851 MT
(class \050bk-class\051, and certain classes of paths can)
81 W( be declared to belong to corresponding bk-classes.  Upon failure,)80 W
8280 57228 MT
(the address of failure is checked.  If it does not belong to a declared bk-class, regular)
44 W( chronological backtracking is)45 W
8280 58605 MT
(started. If)
346 W( it does belong to a bk-class, then backtracking continues up to)
48 W( the latest choice points that belong to the)47 W
8280 59982 MT
(same bk-class.)SH
10080 62461 MT
(When tracing this behavior, the following conditions are monitored: \0501\051 when a special failure address is met)89 W
8280 63838 MT
(and how high up the intelligent backtracking progresses and \0502\051 what is)
40 W( the latest address of failure.  The following)39 W
8280 65215 MT
(messages are printed in each case:)SH
9 /Courier AF
10839 66900 MT
(>BK: Special path <path> caught by alt <alt> of class <c> after <n> frames.)SH
10839 68796 MT
(>BK: Switch from <path1> to <path2>)SH
42480 3442 50 10440 69381 BX BX1
10 /Times-Roman AF
10080 71860 MT
(The first message is emitted whenever intelligent backtracking occurs.  The second one is)
16 W( emitted whenever the)17 W
ES
%%Page: 90 91
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(90)SH
6120 11486 MT
(current address of failure is modified following the rules discussed on page 69.)SH
12 /Times-Bold AF
6120 15170 MT
(13.10.5. Trace-Wait)SH
10 /Times-Roman AF
7920 16547 MT
(The wait annotation is used to allow goal delaying during the evaluation of a grammar.  The idea)
11 W( is to wait until)10 W
6120 17924 MT
(enough information is available before trying to choose between the branches of an alt.)
201 W( The)
654 W( grammar writer)202 W
6120 19301 MT
(indicates which information is requested before the evaluation of an alt can start using the)
113 W( wait annotation and a)112 W
6120 20678 MT
(sequence of path expressions which point to the features which must be instantiated with the requested information.)SH
7920 23157 MT
(When enough information is already present, the alt is evaluated as usual.)
67 W( When)
386 W( there is missing information)68 W
6120 24534 MT
(\050some of the features are not yet instantiated\051, the alt is frozen \050delayed\051.)
10 W( Frozen)
268 W( alts are stored on an agenda, which)9 W
6120 25911 MT
(keeps track of the decisions which remain to be made in the future.  At regular intervals \050in FUF, whenever a)
61 W( new)62 W
6120 27288 MT
(choice point is met\051, the agenda is checked, and if enough information)
62 W( has been gathered since the time a decision)61 W
6120 28665 MT
(has been frozen, the decision is thawed, and evaluated immediately.  After the evaluation of the thawed alt,)
48 W( control)49 W
6120 30042 MT
(proceeds where it was interrupted.)SH
7920 32521 MT
(In addition, at the end of the unification)
131 W( stage, the determination stage checks if any decision is still on the)130 W
6120 33898 MT
(agenda. Such)
334 W( a situation is reached if not enough)
42 W( information could be gathered anyway to allow the evaluation of)43 W
6120 35275 MT
(the frozen alts.  In this case, the frozen alts of the agenda are ``forced'' and evaluated, even)
113 W( though some of the)112 W
6120 36652 MT
(requested information is missing.)SH
7920 39131 MT
(Finally, there is one more configuration of control decisions which concerns the goal delaying behavior of)
9 W( FUF:)10 W
6120 40508 MT
(as explained on page 74, wait annotations have priority over ignore)
25 W( annotations to insure that ignore annotations are)24 W
6120 41885 MT
(only considered)
27 W( when enough information is available for them to make sense.  When thawing a frozen alt from the)28 W
6120 43262 MT
(agenda, after enough information has been gathered, the)
112 W( ignore annotations are immediately checked.  If they do)111 W
6120 44639 MT
(match, then the whole frozen alt is immediately ignored.)SH
7920 47118 MT
(Corresponding to each of these configurations, the trace system emits the following messages.  In)
33 W( every case, a)34 W
6120 48495 MT
(unique agenda identifier \050integer number\051 is assigned to each frozen alt:)SH
9 /Courier AF
8679 51128 MT
(>Freezing alt <alt>: waiting for <path> [agenda <n>])SH
8679 53024 MT
(>Thawing [agenda <n>]: Restarting at level <path>)SH
8679 54920 MT
(>Forcing [agenda <n>]: Restarting at level <path>)SH
8679 56816 MT
(>Ignoring [agenda <n>])SH
42480 8944 50 8280 58163 BX BX1
12 /Times-Bold AF
6120 61847 MT
(13.10.6. Trace-Alts)SH
10 /Times-Roman AF
7920 63224 MT
(The function)72 W
/Courier SF
13452 XM
(trace-alts)SH
/Times-Roman SF
19774 XM
(systematically monitors traversing of alts in)
72 W( the grammar, even if the alts are not)71 W
6120 64601 MT
(traced, and outputs a message whenever a new branch)
26 W( is tried.  It is best used in conjunction with a trace-disable-all)27 W
6120 65978 MT
(setting, to follow uniquely alt traversal.  The form of the output is as follows:)SH
ES
%%Page: 91 92
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(91)SH
9 /Courier AF
10839 12709 MT
(LISP> \050trace-disable-all\051)SH
10839 13657 MT
(LISP> \050trace-alts\051)SH
10839 14605 MT
(LISP> \050uni t1\051)SH
10839 16501 MT
(>========================================)SH
10839 17449 MT
(>STARTING CAT CLAUSE AT LEVEL {})SH
10839 18397 MT
(>========================================)SH
10839 20293 MT
(>Fail in alt VOICE)SH
10839 21241 MT
(>Fail in alt VOICE-NORMAL)SH
10839 22189 MT
(>Fail in alt VOICE-NORMAL)SH
10839 23137 MT
(>Fail in alt VOICE-NORMAL)SH
10839 24085 MT
(>Fail in alt DATIVE-MOVE-DEFAULT)SH
10839 25033 MT
(>Fail in alt DATIVE-MOVE-DEFAULT)SH
10839 25981 MT
(>Fail in alt SUBJECT-SUBCAT)SH
10839 26929 MT
(>Fail in alt SUBJ-COMP-CAT)SH
10839 27877 MT
(>Fail in alt :ANONYMOUS)SH
10839 28825 MT
(>Fail in alt :ANONYMOUS)SH
10839 29773 MT
(>Expanding constituent {} into cset \050{SYNT-ROLES SUBJ-COMP})SH
30819 30721 MT
({PROCESS})SH
30819 31669 MT
({SYNT-ROLES SUBJECT}\051.)SH
10839 32617 MT
(>)SH
42480 22402 50 10440 33202 BX BX1
10 /Times-Roman AF
10080 35681 MT
(Each time a branch in an alt fails, the message ``fail in alt X'' is printed.  If the alt is not)
122 W( traced, the name)121 W
/Courier SF
8280 37058 MT
(:anonymous)SH
/Times-Roman SF
14618 XM
(is printed)
88 W( instead.  This is useful to find possible errors even in places which are not traced in the)89 W
8280 38435 MT
(grammar. In)
250 W( general,)SH
/Courier SF
17166 XM
(trace-alt)SH
/Times-Roman SF
22816 XM
(should only be used in last recourse.)SH
14 /Times-Bold AF
8280 42253 MT
(13.11. Some Advice on FUF Debugging)SH
10 /Times-Roman AF
10080 43630 MT
(This section provides some pragmatic advice on)
35 W( how to use the tracing system of FUF based on the experience)34 W
8280 45007 MT
(gathered while developing large grammars.  It lists common)
50 W( sources of confusion, warns against the misfeatures of)51 W
8280 46384 MT
(the tracing system, common bugs and some successful bug tracking tricks.)SH
12 /Times-Bold AF
8280 50068 MT
(13.11.1. Syntax Errors)SH
10 /Times-Roman AF
10080 51445 MT
(The first source of bugs, often incomprehensible ones, is syntax errors, either in the input)
5 W( FD or in the grammar.)4 W
8280 52822 MT
(So the first precaution is to check both inputs and grammars regularly.  Use functions FD-P and GRAMMAR-P for)37 W
8280 54199 MT
(that purpose.  In grammars, check especially the number of parentheses occuring after ALTs.)SH
12 /Times-Bold AF
8280 57883 MT
(13.11.2. Semantic Errors)SH
10 /Times-Roman AF
10080 59260 MT
(Semantic errors in the grammar can be trivial typos or the sign of)
25 W( a bad design of the FD structure.  In any case)24 W
8280 60637 MT
(check the following points:)SH
/Symbol SF
10070 62090 MT
(\267)SH
/Times-Roman SF
10780 XM
(Mispellings: wrong feature-name, wrong leaf-value-name)SH
/Symbol SF
10070 63848 MT
(\267)SH
/Times-Roman SF
10780 XM
(Paths: in both forms,)54 W
/Times-Italic SF
19580 XM
(i.e.)SH
/Times-Roman SF
(,)SH
/Courier SF
21356 XM
(\050\050f1 \050\050f2 \050\050f3)54 W
/Times-Roman SF
30168 XM
(and)SH
/Courier SF
31916 XM
({f1 f2 f3)54 W
/Times-Roman SF
(. Make)
358 W( sure that paths)
54 W( actually point)55 W
10780 64953 MT
(to the location in the total FD that you expect.)SH
/Symbol SF
10070 66711 MT
(\267)SH
/Times-Roman SF
10780 XM
(The most common)
49 W( source of error is to include the wrong number of up-arrows ^ in a path expression.)48 W
10780 67816 MT
(Always double-check your relative paths, especially)
83 W( those appearing embedded in ALTs, CONTROL,)84 W
10780 68921 MT
(EXTERNAL when the up-arrow notation can be quite counter-intuitive.)SH
/Symbol SF
10070 70679 MT
(\267)SH
/Times-Roman SF
10780 XM
(Observe the structure of the unified graph before unification.  To this end, use)
1 W( the function)SH
/Courier SF
47286 XM
(uni-fd)SH
/Times-Roman SF
51136 XM
(and)SH
10780 71784 MT
(pretty-print its output as in:)SH
ES
%%Page: 92 93
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(92)SH
/Courier SF
11020 11424 MT
(\050pprint \050clean-fd \050uni-fd input :grammar gr\051\051\051)SH
/Times-Roman SF
8620 12892 MT
(This is often instructive.  Use the function top-gdp to explore this output FD in detail.)SH
/Symbol SF
7910 14650 MT
(\267)SH
/Times-Roman SF
8620 XM
(Draw a graph of the total FD with all features instantiated to help you)
15 W( check all your paths and levels of)16 W
8620 15755 MT
(embedding.)SH
/Symbol SF
7910 17513 MT
(\267)SH
/Times-Roman SF
8620 XM
(If you do not understand the current structure of the FD, insert a %break% in your)
96 W( grammar at some)95 W
8620 18618 MT
(critical point, and use the function)239 W
/Courier SF
23969 XM
(path-value)SH
/Times-Roman SF
30458 XM
(to inspect the total)
239 W( FD during the time of the)240 W
8620 19723 MT
(unification.)SH
/Symbol SF
7910 21481 MT
(\267)SH
/Times-Roman SF
8620 XM
(It is)
4 W( risky to use absolute paths in general \050SURGE does not include a single absolute path for example\051.)3 W
8620 22586 MT
(Using an absolute path is a sign of desperation.)SH
12 /Times-Bold AF
6120 26270 MT
(13.11.3. Expression of Negative Constraints)SH
10 /Times-Roman AF
7920 27647 MT
(Negative constraints are used to limit the scope of acceptable FDs by the grammar and)
96 W( to force failure when)97 W
6120 29024 MT
(certain FD configurations are met.)
52 W( The)
352 W( main tools in FUF for the expression of negative constraints are FSET and)51 W
6120 30401 MT
(NONE. The)
250 W( main sources of confusion here are:)SH
/Symbol SF
7910 31854 MT
(\267)SH
/Times-Roman SF
8620 XM
(FSET is too)
16 W( restrictive: you didn't plan on adding a feature, a new feature is not compatible with FSET.)17 W
/Symbol SF
7910 33612 MT
(\267)SH
/Times-Roman SF
8620 XM
(FSET must include explicitly all the features, including CAT and CSET.)SH
/Symbol SF
7910 35370 MT
(\267)SH
/Times-Roman SF
8620 XM
(NONE is used in the wrong place.)SH
12 /Times-Bold AF
6120 39054 MT
(13.11.4. Control)SH
10 /Times-Roman AF
7920 40431 MT
(The overall flow of control of FUF is quite complex, and the trace messages do not make it very)
15 W( easy to follow.)14 W
6120 41808 MT
(Before going on and suffering through the zillions)
55 W( of lines produced by the trace system, try to understand analyti-)56 W
6120 43185 MT
(cally what could go wrong - recheck the syntax of your fd)
55 W( and grammar, and recheck the structure of your FD and)54 W
6120 44562 MT
(the structure your grammar)
103 W( builds.  Only when this fails should you try to read the trace messages to understand)104 W
6120 45939 MT
(what went wrong on a particular input.  You should proceed in the following order:)SH
8120 47278 MT
(1.)SH
9120 XM
(Identify that there is a)
72 W( bug: do \050trace-off\051 and \050trace-bp\051.  This will emit a dot every 10 backtracking)71 W
9120 48383 MT
(points \05010 is the default\051 and indicate how much effort FUF has invested)
32 W( on your input.  For example,)33 W
9120 49488 MT
(when dealing with SURGE, a clause)
143 W( that takes more than 300 backtracking points \05030 dots on the)142 W
9120 50593 MT
(screen\051 is either very complicated or contains a bug.  When)
137 W( you think there is a bug, interrupt the)138 W
9120 51698 MT
(unifier \050generally use control-C\051.)SH
8120 53456 MT
(2.)SH
9120 XM
(Monitor the speed of appearance of the dots.)
40 W( In)
329 W( general, FUF operates in two modes: ``forward'' and)39 W
9120 54561 MT
(``backward''. Forward)
480 W( mode is when the grammar is traversed as)
115 W( expected, and every new feature)116 W
9120 55666 MT
(falls into place.  Backward mode is after the occurrence of the)
102 W( first unexpected failure.  The unifier)101 W
9120 56771 MT
(starts backtracking and tries every other branch in an unexpected manner.  In general,)
178 W( these tried)179 W
9120 57876 MT
(branches fail very quickly.  So in backward mode,)
103 W( backtracking dots tend to be emitted much more)102 W
9120 58981 MT
(quickly than in forward mode.  When the dots start piling up, it's)
96 W( a good sign that FUF has entered)97 W
9120 60086 MT
(backward mode, and that a bug has been found.)SH
8120 61844 MT
(3.)SH
9120 XM
(Once you suspect there is a bug, identify the first unexpected failure.  The first attempt to do that is)
32 W( to)31 W
9120 62949 MT
(set \050trace-on\051 and \050trace-level 30\051.  This will print the most obvious candidates.  If this does not work,)34 W
9120 64054 MT
(basically, you're in trouble, and finding the bug will take time \050sorry!  I'm in the)
193 W( middle of the)192 W
9120 65159 MT
(implementation of a graphical debugger for FUF which should help you beyond this stage\051.)SH
8120 66917 MT
(4.)SH
9120 XM
(The next step is to gradually lower the trace-level until you get a good understanding of)
57 W( where in the)58 W
9120 68022 MT
(grammar is the source of the bug)
50 W( - moving to values 20, 15, 12, 10, 5 and 0 \050trying trace-level 0 on a)49 W
9120 69127 MT
(full grammar without disabling most of the tracing flags is a sign of desperation\051.)SH
8120 70885 MT
(5.)SH
9120 XM
(Once the approximate location of the problem is)
94 W( identified in the grammar, enable only the relevant)95 W
9120 71990 MT
(tracing flags \050those defined in the grammar)
84 W( around the problematic spot\051.  This is achieved by using)83 W
ES
%%Page: 93 94
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(93)SH
11280 11486 MT
(the functions \050trace-disable-all\051 \050trace-enable-alt <name-of-suspected-alt>\051.)SH
10280 13244 MT
(6.)SH
11280 XM
(From then on, try to understand what's happening.  I find it)
72 W( convenient to run FUF within an Emacs)73 W
11280 14349 MT
(buffer and to use the editor to search through the trace messages printed by FUF.)SH
10280 16107 MT
(7.)SH
11280 XM
(If you enable all)
163 W( tracing flags and set trace-level to 0 and you still cannot find a tracing message)162 W
11280 17212 MT
(identifying a failure \050of the form ``FAIL in ...''\051 this can be due to 2 problems:)SH
13336 18551 MT
(a.)SH
14280 XM
(Either the failure is occurring in a region of the grammar which)
38 W( does not contain tracing flags.)39 W
14280 19656 MT
(In this case, set \050trace-alts\051 and check the messages ``fail in alt :anonymous''.)SH
13280 21414 MT
(b.)SH
14280 XM
(Or the failure is)
112 W( due to a missing cat in the grammar.  Often if you unify \050\050cat xxx\051\051 with a)111 W
14280 22519 MT
(grammar that has no branch for xxx,)
102 W( there is no failure message produced.  Check your cats)103 W
14280 23624 MT
(often.)SH
10080 26103 MT
(The main points you should be looking for when debugging are:)SH
/Symbol SF
10070 27556 MT
(\267)SH
/Times-Roman SF
10780 XM
(Endless backtracking: this can be found)
58 W( by setting trace-level 00 and looking for repetition in the flow)57 W
10780 28661 MT
(of messages.)SH
/Symbol SF
10070 30419 MT
(\267)SH
/Times-Roman SF
10780 XM
(Failure on ANY \050especially in conjunction with recursion\051.)SH
/Symbol SF
10070 32177 MT
(\267)SH
/Times-Roman SF
10780 XM
(Failure on given \050especially in conjunction with wait\051: remember that an alt that is annotated with \050wait)26 W
10780 33282 MT
(path1\051 can be forced and therefore evaluated even if path1 is not yet instantiated.)
148 W( Therefore,)
545 W( using)147 W
10780 34387 MT
(\050path1 given\051 in such a situation is dangerous.  In this case, switch to any.)SH
/Symbol SF
10070 36145 MT
(\267)SH
/Times-Roman SF
10780 XM
(INDEX \050especially double indexes and partial indexes\051.  Do)
234 W( NOT factor together branches in an)235 W
10780 37250 MT
(indexed alt.  For example, the following index will not work \050unification with \050\050a 1\051\051 will fail\051:)SH
/Courier SF
13180 38656 MT
(\050alt \050:index a\051)SH
14380 39687 MT
(\050\050\050a \050\050alt \0501 2\051\051\051\051\051)SH
14980 40718 MT
(\050\050a 3\051\051\051\051)SH
/Symbol SF
10070 42476 MT
(\267)SH
/Times-Roman SF
10780 XM
(WAIT \050especially in conjunction with ignore and bk-class\051)SH
/Symbol SF
10070 44234 MT
(\267)SH
/Times-Roman SF
10780 XM
(BK-CLASS: especially, since the bk-class declarations are persistent, do not)
86 W( forget to evaluate \050clear-)85 W
10780 45339 MT
(bk-class\051 when loading a new grammar.  In case)
63 W( of doubt, evaluate \050clear-bk-class\051 and re-evaluate all)64 W
10780 46444 MT
(your \050define-bk-class\051.  In general, it is good to add the following prelude in all the)
82 W( files containing a)81 W
10780 47549 MT
(grammar definition:)SH
/Courier SF
13180 48955 MT
(\050eval-when \050load eval\051)SH
14380 49986 MT
(\050clear-bk-class\051)SH
14380 51017 MT
(\050reset-typed-features\051\051)SH
/Symbol SF
10070 52775 MT
(\267)SH
/Times-Roman SF
10780 XM
(IGNORE: check that you do not ignore alts too liberally.)SH
/Symbol SF
10070 54533 MT
(\267)SH
/Times-Roman SF
10780 XM
(Constituent Structure Definition:)SH
7 /Symbol AF
12708 55746 MT
(\267)SH
10 /Times-Roman AF
13280 55896 MT
(Wrong cset \050especially interaction between cat and explicit)
196 W( cset\051.  In case of doubts, use an)197 W
13280 57001 MT
(explicit cset in your grammar.)
15 W( Avoid)
279 W( over-restrictive csets \050with the = notation\051, they often cause)14 W
13280 58106 MT
(failure of unification with further cset features in the grammar.)SH
7 /Symbol AF
12708 59714 MT
(\267)SH
10 /Times-Roman AF
13280 59864 MT
(Wrong pattern and interaction between pattern and cset when using implicit cset expansion.)SH
7 /Symbol AF
12708 61472 MT
(\267)SH
10 /Times-Roman AF
13280 61622 MT
(Csets can trigger infinite recursion.)SH
/Symbol SF
10070 63380 MT
(\267)SH
/Times-Roman SF
10780 XM
(Linearizer: The linearizer produces strings of the form <unknown cat: XXX> when a category)
5 W( unknown)6 W
10780 64485 MT
(to the morphology module is)
59 W( found as a leaf in the constituent tree.  This is often due to the following)58 W
10780 65590 MT
(effect: all top-level unification functions have a :limit keyword option used)
181 W( to limit the number of)182 W
10780 66695 MT
(backtracking point)
7 W( used on a single input.  The default value for limit is 10,000.  When unification stops)6 W
10780 67800 MT
(after reaching this limit, the FD is sent to)
21 W( the linearizer, even though it has not been completely unified,)22 W
10780 68905 MT
(and all constituents have not been completely expanded.  In)
177 W( that case, you can get strings such as)176 W
10780 70010 MT
(<unknown cat: NP>)
26 W( because an NP has not been expanded.  To correct this problem, increase the limit.)27 W
/Symbol SF
10070 71768 MT
(\267)SH
/Times-Roman SF
10780 XM
(Type Hierarchy Problems:)SH
ES
%%Page: 94 95
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(94)SH
7 /Symbol AF
10548 11360 MT
(\267)SH
10 /Times-Roman AF
11120 11510 MT
(Since the type declarations are persistent, do not forget to)
121 W( evaluate \050reset-typed-features\051 when)120 W
11120 12615 MT
(loading a new grammar.  In case of doubt, use)72 W
/Courier SF
30558 XM
(draw-types)SH
/Times-Roman SF
36880 XM
(to verify the current state of type)72 W
11120 13720 MT
(definitions. In)
668 W( general, it is good to add the following prelude in all the files containing a)209 W
11120 14825 MT
(grammar definition:)SH
/Courier SF
13520 16231 MT
(\050eval-when \050load eval\051)SH
14720 17262 MT
(\050clear-bk-class\051)SH
14720 18293 MT
(\050reset-typed-features\051\051)SH
7 /Symbol AF
10548 19901 MT
(\267)SH
10 /Times-Roman AF
11120 20051 MT
(Wrong)SH
/Courier SF
14147 XM
(under)SH
/Times-Roman SF
17397 XM
(specification.)SH
7 /Symbol AF
10548 21659 MT
(\267)SH
10 /Times-Roman AF
11120 21809 MT
(Wrong)SH
/Courier SF
14147 XM
(define-feature-type)SH
7 /Symbol AF
10548 23417 MT
(\267)SH
10 /Times-Roman AF
11120 23567 MT
(Lack of)70 W
/Courier SF
14592 XM
(under)SH
/Times-Roman SF
17912 XM
(\050when one wants only to test for the presence of)
70 W( a feature and not to enrich the)71 W
11120 24672 MT
(total FD\051.)SH
/Symbol SF
7910 26430 MT
(\267)SH
/Times-Roman SF
8620 XM
(Procedural types, test and control:)SH
7 /Symbol AF
10548 27643 MT
(\267)SH
10 /Times-Roman AF
11120 27793 MT
(Wrong CONTROL/TEST function)SH
7 /Symbol AF
10548 29401 MT
(\267)SH
10 /Times-Roman AF
11120 29551 MT
(TEST for CONTROL and vice-versa.)SH
7 /Symbol AF
10548 31159 MT
(\267)SH
10 /Times-Roman AF
11120 31309 MT
(Wrong use of the path construct with a TEST/CONTROL \050with the # notation\051.)SH
7 /Symbol AF
10548 32917 MT
(\267)SH
10 /Times-Roman AF
11120 33067 MT
(Wrong EXTERNAL function.)SH
7 /Symbol AF
10548 34675 MT
(\267)SH
10 /Times-Roman AF
11120 34825 MT
(Wrong procedural-type definitions.)SH
ES
%%Page: 95 96
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(95)SH
16 /Times-Bold AF
8280 11872 MT
(14. Manipulation of FDs as Data-structures)SH
10 /Times-Roman AF
10080 13249 MT
(FDs can be viewed as a convenient)
18 W( data-structure.  FUF provides a library of Lisp functions to manipulate FDs:)17 W
8280 14626 MT
(accessors to extract a sub-fd from a total fd, insertion of an)
157 W( FD within a total FD, etc.  These functions' main)158 W
8280 16003 MT
(complexity lies in the interpretation of paths.  For example, if you)
51 W( want to extract a sub-fd from a total fd, and this)50 W
8280 17380 MT
(sub-fd contains path pointing outside the sub-fd up)
24 W( into the total fd, the extraction function should also extract these)25 W
8280 18757 MT
(paths. In)
250 W( addition, relative paths in the sub-fd must be adjusted to maintain consistency.)SH
10080 21236 MT
(Another class of functions)
53 W( helps in manipulating lists of FDs and FDs as lists \050providing programmatically the)52 W
8280 22613 MT
(same facilities as the ~, ^n~ and ~n notations discussed in Chapter 8 p.35\051.)SH
10080 25092 MT
(In this chapter,)
36 W( the notion of)37 W
/Times-Italic SF
21882 XM
(total FD)37 W
/Times-Roman SF
25623 XM
(plays a critical role.  A total FD is a self-contained FD, which appears at)37 W
8280 26469 MT
(the top level and)
182 W( is not supposed to be embedded in another FD.  All the paths appearing within this FD are)181 W
8280 27846 MT
(interpreted relative to the total FD.  In logical terms, a total)
243 W( FD is a universe of reference for FUF and in)244 W
8280 29223 MT
(programming language terms, a total FD is an environment.)SH
14 /Times-Bold AF
8280 33041 MT
(14.1. FD Accessors)SH
10 /Times-Roman AF
10080 34418 MT
(The following functions access the value of a path within a total FD.)SH
9 /Courier AF
10839 36103 MT
(\050top-gdp fd path\051)SH
10839 37999 MT
(\050top-gdpp fd path\051)SH
10839 39895 MT
(Example:)SH
10839 40843 MT
(fd1 = \050\050a 1\051)SH
14619 41791 MT
(\050b \050\050fset \050b1 b2\051\051)SH
16779 42739 MT
(\050b1 1\051)SH
16779 43687 MT
(\050b2 {^2 a}\051\051\051)SH
14619 44635 MT
(\050c {^ b b2}\051\051)SH
10839 46531 MT
(\050top-gdp fd1 {a}\051  --> 1)SH
10839 47479 MT
(\050top-gdpp fd1 {a}\051 --> \050a 1\051)SH
10839 48427 MT
(\050top-gdp fd1 {c}\051  --> 1)
SH( ;;)
10800 W( follows indirections)SH
10839 49375 MT
(\050top-gdpp fd1 {c}\051 --> \050a 1\051)SH
10839 50323 MT
(\050top-gdp fd1 {b}\051  --> \050\050b1 1\051 \050b2 {^2 a}\051\051  ;; can contain a path inside)SH
10839 51271 MT
(\050top-gdp fd1 {x y}\051  --> nil)
SH( ;;)
8640 W( adds a null path in fd1)SH
10839 53167 MT
(fd1 = \050\050a 1\051)
SH( ;;)
17280 W( fd1 is modified)SH
14619 54115 MT
(\050b \050\050b1 1\051 \050b2 {^2 a}\051\051\051)SH
14619 55063 MT
(\050c {^ b b2}\051)SH
14619 56011 MT
(\050x \050\050y nil\051\051\051\051)SH
10839 57907 MT
(\050empty-fd \050top-gdp fd1 {x}\051\051 --> t)
SH( ;;)
5400 W( but x is still unbound.)SH
10839 59803 MT
(\050top-gdp fd1 {a a1}\051 --> none)
SH( ;;)
1080 W( cannot go below a leaf.)SH
10839 60751 MT
(\050top-gdp fd1 {c c1}\051 --> none)
SH( ;;)
1080 W( idem)SH
10839 61699 MT
(\050top-gdp fd1 {b b3}\051 --> none)
SH( ;;)
1080 W( forbidden by fset.)SH
10839 62647 MT
(\050top-gdpp fd1 {a a1}}\051 --> none)SH
42480 28090 50 10440 63232 BX BX1
10 /Times-Roman AF
10080 65711 MT
(Top-gdp - short for go-down-path)
46 W( - follows a path within a total FD and returns the FD pointed to by the path.)45 W
8280 67088 MT
(It is guaranteed to return a proper FD, that is, it will never return a path to another location, but instead, it will follow)SH
8280 68465 MT
(indirections until a proper FD is found.)SH
10080 70944 MT
(Top-gdpp is a companion function which instead of returning the FD)
118 W( pointed to by the path returns the pair)117 W
ES
%%Page: 96 97
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(96)SH
6120 11486 MT
(containing the appropriate value.  As for top-gdp, this function always follows indirections and)
26 W( returns a pair whose)27 W
6120 12863 MT
(second element is a proper FD and never a path.)SH
7920 15342 MT
(If requested the value of a feature which)
194 W( is not present \050not yet instantiated\051 in the total FD, top-gdp \050or)193 W
6120 16719 MT
(top-gdpp\051 will construct the path up to the requested level as shown in the example)
50 W( with the request for the value f)51 W
6120 18096 MT
(the path {x y} which)
48 W( adds the path \050x \050\050y nil\051\051\051 into the total fd.  This is the manifestation of the fact that the value)47 W
6120 19473 MT
(nil adds no information to an FD.  The path \050x)
92 W( \050\050y nil\051\051\051 does not change the meaning of the FD since it adds no)93 W
6120 20850 MT
(instantiation.)SH
7920 23329 MT
(The function filter-nils is used to remove these useless empty fds from an)
209 W( fd, and return only the useful)208 W
6120 24706 MT
(information stored in an FD.)SH
9 /Courier AF
8679 26391 MT
(\050filter-nils '\050\050a nil\051 \050b \050\050c 1\051 \050d nil\051\051\051 \050x \050\050y nil\051\051\051\051\051)SH
8679 27339 MT
(->)SH
8679 28287 MT
(\050\050b \050\050c 1\051\051\051\051)SH
42480 3442 50 8280 28872 BX BX1
10 /Times-Roman AF
7920 31351 MT
(If the path requested is not compatible with the grammar, the value)97 W
/Courier SF
36163 XM
(none)SH
/Times-Roman SF
38910 XM
(is returned.  This can happen in 2)97 W
6120 32728 MT
(cases: when the requested path extends below a leaf of the FD \050for example the)
111 W( path {a a1} above\051 or when the)110 W
6120 34105 MT
(requested path does not satisfy an FSET declarations \050for example the path {b b3} above\051.)SH
7920 36584 MT
(Top-gdpp can either return a pair from the total FD)
2 W( or none.  When the result is a pair, it is possible to perform a)3 W
6120 37961 MT
(\050setf \050second pair\051 new-value\051 and the total FD will be appropriately modified - as long as)
56 W( the new value is a valid)55 W
6120 39338 MT
(FD. This)
250 W( is one way to ``patch'' a total FD with new values.)SH
14 /Times-Bold AF
6120 43156 MT
(14.2. FD Relocation)SH
10 /Times-Roman AF
7920 44533 MT
(Note that the value returned by top-gdp is not a valid total fd in itself because it can contain)
94 W( paths that point)95 W
6120 45910 MT
(within the total FD.  This is shown above in the result of \050top-gdp fd1 {b}\051 which contains)
73 W( a path \050\050b1 1\051 \050b2 {^2)72 W
6120 47287 MT
(a}\051\051. If)
698 W( you are interested in observing a sub-fd as a self-contained entity with no pointers into an external)225 W
6120 48664 MT
(environment, you must use relocate instead of top-gdp.  Relocate extracts a sub-fd from)
11 W( a total FD and turns it into a)10 W
6120 50041 MT
(stand-alone total FD.)SH
9 /Courier AF
8679 52674 MT
(\050relocate totalfd path\051)SH
8679 54570 MT
(Example:)SH
8679 55518 MT
(\050relocate '\050\050a \050\050a1 {^ a2}\051)SH
17319 56466 MT
(\050a2 \050\050x 2\051\051\051)SH
17319 57414 MT
(\050a3 {a a1}\051)SH
17319 58362 MT
(\050a4 {b}\051)SH
17319 59310 MT
(\050a5 {^2 c}\051\051\051)SH
15159 60258 MT
(\050b {a a1}\051)SH
15159 61206 MT
(\050c \050\050c1 1\051\051\051\051)SH
14079 62154 MT
({a}\051)SH
8679 63102 MT
(=>)SH
8679 64050 MT
(\050\050a1 {^ a2}\051)
SH( <---)
2160 W( NOTE keep relative path)SH
9219 64998 MT
(\050a2 \050\050x 2\051\051\051)SH
9219 65946 MT
(\050a3 {a1}\051)
SH( <---)
3240 W( NOTE updated path)SH
9219 66894 MT
(\050a4 \050\050x 2\051\051\051)
SH( <---)
1620 W( NOTE loose conflation a4/a2 because went out of a)SH
23259 67842 MT
(scope.)SH
9219 68790 MT
(\050a5 \050\050c1 1\051\051\051\051  <--- NOTE resolved path)SH
42480 19372 50 8280 70137 BX BX1
ES
%%Page: 97 98
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(97)SH
10080 11486 MT
(This function performs the following adjustments:)SH
/Symbol SF
10070 12939 MT
(\267)SH
/Times-Roman SF
10780 XM
(Extract the sub-fd with top-gdp.)SH
/Symbol SF
10070 14697 MT
(\267)SH
/Times-Roman SF
10780 XM
(Analyzes all paths found in the sub-fd.  Absolute paths which)
109 W( point within the sub-fd are updated to)110 W
10780 15802 MT
(make them relative to the new root.  For example, above, the path \050a3 {a a1}\051 is update to \050a3 {a1}\051.)SH
/Symbol SF
10070 17560 MT
(\267)SH
/Times-Roman SF
10780 XM
(Paths which point outside the scope of the new root are resolved and replaced)
59 W( by the value pointed to.)58 W
10780 18665 MT
(For example, \050a5 {^2 c}\051 is replaced by \050a5 \050\050c1 1\051\051\051.)SH
/Symbol SF
10070 20423 MT
(\267)SH
/Times-Roman SF
10780 XM
(Relative paths which point)
36 W( inside the total FD remain relative paths.  For example, \050a1 {^ a2}\051 remains)37 W
10780 21528 MT
(relative.)SH
/Symbol SF
10070 23286 MT
(\267)SH
/Times-Roman SF
10780 XM
(Conflations which are established indirectly through a feature which lies)
19 W( outside the scope of the sub-fd)18 W
10780 24391 MT
(are lost.  This is the case above between a1 and)
117 W( a4.  In the original total FD, a1 and a4 are unified,)118 W
10780 25496 MT
(because {a a4} points to {b} which points to {a a1}.  During the)
41 W( extraction analysis, it is found that a4)40 W
10780 26601 MT
(points outside the scope of a \050to b\051, and therefore,)
30 W( the path is resolved.  In this case, information is lost,)31 W
10780 27706 MT
(since in the result, a1 and a4 happen to have the same value, but they are not conflated.)SH
10080 30185 MT
(The reverse of relocate is insert-fd, which inserts a total FD within a larger)
201 W( total FD.  The function also)200 W
8280 31562 MT
(performs analysis of all the paths found within the inserted FD to adjust them to their new environment.)SH
9 /Courier AF
10839 33247 MT
(\050insert-fd fd total subfd-path\051)SH
10839 35143 MT
(Insert Fd into TOTAL at location subfd-path.)SH
10839 37039 MT
(Example:)SH
10839 37987 MT
(\050insert-fd '\050\050a {b}\051 \050b 1\051 \050c {^ b}\051\051)SH
16779 38935 MT
('\050\050b 2\051 \050c \050\050x 1\051\051\051\051)SH
16779 39883 MT
({c}\051)SH
10839 40831 MT
(=>)SH
10839 41779 MT
(\050\050b 2\051)SH
11379 42727 MT
(\050c \050\050x1 1\051)
SH( <------)
3780 W( NOTE the inserted FD is unified with the)SH
28119 43675 MT
(existing sub-fd)SH
13539 44623 MT
(\050a {c b}\051)
SH( <------)
2160 W( NOTE updated path.)SH
13539 45571 MT
(\050b 1\051)SH
13539 46519 MT
(\050c {c b}\051\051\051\051  <------ NOTE relative path is resolved)SH
42480 15580 50 10440 47866 BX BX1
10 /Times-Roman AF
10080 50345 MT
(The main features of this function are illustrated by the example:)SH
/Symbol SF
10070 51798 MT
(\267)SH
/Times-Roman SF
10780 XM
(The new FD is unified with the existing sub-fd at location subfd-path in)
12 W( the total FD \050so the FD \050\050x1 1\051\051)13 W
10780 52903 MT
(is enriched with the new FD\051.)SH
/Symbol SF
10070 54661 MT
(\267)SH
/Times-Roman SF
10780 XM
(Paths in the)
237 W( inserted FD are adjusted to their new environment.  Absolute paths are prefixed by)236 W
10780 55766 MT
(subfd-path, and relative paths are resolved and made absolute)
36 W( relative to the new root \050)37 W
/Times-Italic SF
(e.g.)SH
/Times-Roman SF
(, \050c {^ b}\051 is)37 W
10780 56871 MT
(resolved to \050c {c b}\051.)SH
14 /Times-Bold AF
8280 60689 MT
(14.3. FD Normalization)SH
10 /Times-Roman AF
10080 62066 MT
(The FD)
156 W( accessors and relocation functions, top-gdp, insert-fd and relocate, only work when the FDs are in)155 W
8280 63443 MT
(normal form.)
88 W( Normal)
427 W( form is intuitively the ``shortest notation'' of an FD.  For example, the normal form of \050\050a)89 W
8280 64820 MT
(\050\050a1 1\051\051\051 \050a \050\050a2 2\051\051\051)
85 W( \050{a a3} 3\051\051 is \050\050a \050\050a1 1\051 \050a2 2\051 \050a3 3\051\051\051\051.  A normal form also does not contain disjunctions.)84 W
8280 66197 MT
(The intention is to)
45 W( define a normal form for input FDs, with no extra nils, maximal factorization of features and no)46 W
8280 67574 MT
(disjunctions.)SH
10080 70053 MT
(The function normalize-fd takes as input an)
8 W( arbitrary FD and puts it in normal form.  It is abstractely defined as:)7 W
8280 71430 MT
(\050normalize-fd fd\051 = \050u)
69 W( nil fd\051, since the unification function u returns an FD in normal form, and resolves disjunc-)70 W
ES
%%Page: 98 99
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(98)SH
6120 11486 MT
(tions.)SH
9 /Courier AF
8679 13171 MT
(\050normalize-fd fd\051)SH
8679 15067 MT
(Example:)SH
8679 16015 MT
(\050normalize-fd '\050\050a \050\050a1 1\051\051\051)SH
17319 16963 MT
(\050a \050\050alt \050\050\050a1 2\051\051)SH
22719 17911 MT
(\050\050a2 2\051\051\051\051\051\051)SH
17319 18859 MT
(\050a nil\051)SH
17319 19807 MT
(\050{a a3} 3\051\051\051)SH
8679 21703 MT
(-->)SH
8679 23599 MT
(\050a \050\050a1 1\051)SH
10839 24547 MT
(\050a2 2\051)SH
10839 25495 MT
(\050a3 3\051\051\051)SH
42480 13870 50 8280 26080 BX BX1
14 /Times-Bold AF
6120 29898 MT
(14.4. Lists of FDs)SH
10 /Times-Roman AF
7920 31275 MT
(The functions list-to-fd and)
19 W( top-fd-to-list convert between lists of FDs and the FD encoding of lists discussed in)18 W
6120 32652 MT
(Chapter 8.)SH
9 /Courier AF
8679 35285 MT
(\050list-to-fd '\050 \050\050a1 1\051\051 2 \050\050x1 1\051 \050x2 2\051\051 \051\051)SH
8679 36233 MT
(-> \050\050car \050\050a1 1\051\051\051)SH
10839 37181 MT
(\050cdr \050\050car 2\051)SH
14079 38129 MT
(\050cdr \050\050car \050\050x1 1\051 \050x2 2\051\051\051)SH
17319 39077 MT
(\050cdr none\051\051\051\051\051\051)SH
8679 40973 MT
(\050top-fd-to-list '\050\050car 1\051 \050cdr \050\050car 2\051 \050cdr none\051\051\051\051\051)SH
8679 41921 MT
(-> \0501 2\051)SH
8679 43817 MT
(\050top-fd-to-list \050list-to-fd <l>\051\051)SH
8679 44765 MT
(-> <l>)SH
42480 12736 50 8280 46112 BX BX1
ES
%%Page: 99 100
BS
0 SI
10 /Times-Roman AF
54080 4286 MT
(99)SH
16 /Times-Bold AF
8280 11872 MT
(15. Reference Manual)SH
10 /Times-Roman AF
10080 13249 MT
(For the sake of completeness, this chapter)
45 W( includes a list of all the functions, variables and switches that a user)46 W
8280 14626 MT
(of FUF can manipulate. They are grouped under 8 categories. In each category, the list is sorted alphabetically:)SH
10280 15965 MT
(1.)SH
11280 XM
(Unification functions)SH
10280 17723 MT
(2.)SH
11280 XM
(Checking)SH
10280 19481 MT
(3.)SH
11280 XM
(Tracing)SH
10280 21239 MT
(4.)SH
11280 XM
(Complexity)SH
10280 22997 MT
(5.)SH
11280 XM
(Manipulation of the dictionary)SH
10280 24755 MT
(6.)SH
11280 XM
(Linearization and Morphology)SH
10280 26513 MT
(7.)SH
11280 XM
(Manipulation of FDs as Data-structures)SH
10280 28271 MT
(8.)SH
11280 XM
(Fine-tuning of the unifier)SH
14 /Times-Bold AF
8280 32089 MT
(15.1. Unification functions)SH
12 SS 
8280 35792 MT
(15.1.1.)SH
/Times-Roman SF
11880 XM
(*lexical-categories*)SH
10 /Times-Bold AF
10080 37169 MT
(Type:)SH
/Times-Roman SF
12830 XM
(variable)SH
/Times-Bold SF
8280 38546 MT
(Description:)SH
/Times-Roman SF
13847 XM
(The)SH
/Courier SF
15692 XM
(*lexical-categories*)SH
/Times-Roman SF
27982 XM
(variable is a list of category names. These categories are)
40 W( those that)39 W
8280 39923 MT
(are sent to the morphology component without being unified.)SH
/Times-Bold SF
8280 41300 MT
(Standard Value:)SH
/Courier SF
15614 XM
(\050verb noun adj prep conj relpro adv punctuation modal\051)SH
12 /Times-Bold AF
8280 45003 MT
(15.1.2.)SH
/Times-Roman SF
11880 XM
(*u-grammar*)SH
10 /Times-Bold AF
10080 46380 MT
(Type:)SH
/Times-Roman SF
12830 XM
(variable)SH
/Times-Bold SF
8280 47757 MT
(Description:)SH
/Times-Roman SF
13839 XM
(The)SH
/Courier SF
15676 XM
(*u-grammar*)SH
/Times-Roman SF
22558 XM
(variable contains a Functional Unification Grammar. It is the)
32 W( default value to all)33 W
8280 49134 MT
(the functions expecting a grammar as argument. It is a valid form if)SH
/Courier SF
35553 XM
(grammar-p)SH
/Times-Roman SF
41203 XM
(accepts it.)SH
12 /Times-Bold AF
8280 52837 MT
(15.1.3.)SH
/Times-Roman SF
11880 XM
(*cat-attribute*)SH
10 /Times-Bold AF
10080 54214 MT
(Type:)SH
/Times-Roman SF
12830 XM
(variable)SH
/Times-Bold SF
8280 55591 MT
(Standard value:)SH
/Times-Roman SF
15392 XM
(cat)SH
/Times-Bold SF
8280 56968 MT
(Description:)SH
/Times-Roman SF
14339 XM
(The)SH
/Courier SF
16676 XM
(*cat-attribute*)SH
/Times-Roman SF
26458 XM
(variable contains a symbol.  It is the)
532 W( default value for the)531 W
/Courier SF
8280 58345 MT
(cat-attribute)SH
/Times-Roman SF
16330 XM
(argument to all the unification functions.)SH
10080 60824 MT
(The)SH
/Courier SF
11965 XM
(CAT)SH
/Times-Roman SF
14095 XM
(parameter is used to identify constituents in an fd when the)80 W
/Courier SF
38834 XM
(cset)SH
/Times-Roman SF
41565 XM
(attribute is not present.  Through)81 W
8280 62201 MT
(this mechanism, the unifier implements a breadth-first top-down traversal of the structures being generated.)SH
10080 64680 MT
(By default, the)35 W
/Courier SF
16351 XM
(CAT)SH
/Times-Roman SF
18436 XM
(parameter is equal to the symbol)34 W
/Courier SF
31916 XM
(cat)SH
/Times-Roman SF
(. It)
318 W( is however possible to specifiy another value for)34 W
8280 66057 MT
(this parameter.  As a consequence, it is possible to traverse the same)
240 W( fd structure and to assign the role of)241 W
8280 67434 MT
(constituents to different sub-structures by adjusting the value)
84 W( of this parameter.  This feature is particularly useful)83 W
8280 68811 MT
(when an fd is being processed through a pipe-line of grammars.)SH
ES
%%Page: 100 101
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(100)SH
12 /Times-Bold AF
6120 11623 MT
(15.1.4.)SH
/Times-Roman SF
9720 XM
(u)SH
10 /Times-Bold AF
7920 13000 MT
(Type:)SH
/Times-Roman SF
10670 XM
(function)SH
/Times-Bold SF
6120 14377 MT
(Calling form:)SH
/Times-Roman SF
12175 XM
(\050)SH
/Courier SF
(u)SH
/Times-Italic SF
13358 XM
(fd1 fd2)SH
/Courier SF
16414 XM
(&optional)SH
/Times-Italic SF
22064 XM
(limit success)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
6120 15754 MT
(Arguments:)SH
/Times-Roman SF
11730 XM
(p)SH
/Symbol SF
7910 17207 MT
(\267)SH
/Courier SF
8620 XM
(fd1)SH
/Times-Roman SF
10670 XM
(and)SH
/Courier SF
12364 XM
(fd2)SH
/Times-Roman SF
14414 XM
(are arbitrary FDs.)SH
/Courier SF
21995 XM
(fd1)SH
/Times-Roman SF
24045 XM
(cannot contain non-deterministic constructs,)SH
/Courier SF
42015 XM
(fd2)SH
/Times-Roman SF
44065 XM
(can.)SH
/Symbol SF
7910 18965 MT
(\267)SH
/Courier SF
8620 XM
(limit)SH
/Times-Roman SF
11870 XM
(is a number.  The default value is 1000.)SH
/Symbol SF
7910 20723 MT
(\267)SH
/Courier SF
8620 XM
(success)SH
/Times-Roman SF
13108 XM
(is a function of three arguments. It must be defined as:)38 W
/Courier SF
35866 XM
(\050defun x \050fd)
38 W( fail frame\051)39 W
8620 21828 MT
(...\051)SH
/Times-Roman SF
11355 XM
(where fd is an fd, fail)
85 W( is a continuation \050a function\051 and frame is an object of type frame.  The)84 W
8620 22933 MT
(default value is the function)SH
/Courier SF
20035 XM
(default-continuation)SH
/Times-Roman SF
(.)SH
/Times-Bold SF
6120 24310 MT
(Description:)SH
/Courier SF
11667 XM
(u)SH
/Times-Roman SF
12537 XM
(unifies)SH
/Times-Italic SF
15529 XM
(fd1)SH
/Times-Roman SF
17077 XM
(with)SH
/Times-Italic SF
19125 XM
(fd2)SH
/Times-Roman SF
20673 XM
(and passes 3 values to the)20 W
/Courier SF
31347 XM
(success)SH
/Times-Roman SF
35817 XM
(continuation: a)
20 W( resulting fd, a continuation)21 W
6120 25687 MT
(to call if more results)
72 W( are needed and a ``stack-frame'' containing information needed to run the continuation.  By)71 W
6120 27064 MT
(default,)SH
/Courier SF
9397 XM
(default-continuation)SH
/Times-Roman SF
21647 XM
(just returns the unified fd.)SH
/Courier SF
32507 XM
(u)SH
/Times-Roman SF
33357 XM
(is a low-level function.)SH
7920 29543 MT
(It is possible to limit)
29 W( the time the unifier will devote to a particular call.  The)30 W
/Courier SF
39313 XM
(:limit)SH
/Times-Roman SF
43193 XM
(keyword available in all)30 W
6120 30920 MT
(unification functions specifies the maximum number of backtracking points)
18 W( that can be allocated to a particular call.)17 W
6120 32297 MT
(Using this feature it is possible to perform ``fuzzy'')
191 W( unification.  \050Note that the appropriateness of a fuzzy or)192 W
6120 33674 MT
(incomplete unification relies on the particular control strategy used of breadth-first top-down expansion.\051)SH
12 /Times-Bold AF
6120 37377 MT
(15.1.5.)SH
/Times-Roman SF
9720 XM
(u-disjunctions)SH
10 /Times-Bold AF
7920 38754 MT
(Type:)SH
/Times-Roman SF
10670 XM
(function)SH
/Times-Bold SF
6120 40131 MT
(Calling form:)SH
/Times-Roman SF
12175 XM
(\050)SH
/Courier SF
(u-disjunctions)SH
/Times-Italic SF
21158 XM
(fd1 fd2)SH
/Courier SF
24214 XM
(&key)SH
/Times-Italic SF
26864 XM
(limit failure success)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
6120 41508 MT
(Arguments:)SH
/Symbol SF
7910 42961 MT
(\267)SH
/Courier SF
8620 XM
(fd1)SH
/Times-Roman SF
10820 XM
(and)SH
/Courier SF
12664 XM
(fd2)SH
/Times-Roman SF
14864 XM
(are arbitrary FDs.  Both)150 W
/Courier SF
25390 XM
(fd1)SH
/Times-Roman SF
27590 XM
(and)SH
/Courier SF
29433 XM
(fd2)SH
/Times-Roman SF
31632 XM
(can contain non-deterministic constructs, like)149 W
/Courier SF
8620 44066 MT
(alt)SH
/Times-Roman SF
(,)SH
/Courier SF
10920 XM
(ralt)SH
/Times-Roman SF
13570 XM
(and)SH
/Courier SF
15264 XM
(opt)SH
/Times-Roman SF
(.)SH
/Symbol SF
7910 45824 MT
(\267)SH
/Courier SF
8620 XM
(limit)SH
/Times-Roman SF
11870 XM
(is a number.  The default value is 1000.)SH
/Symbol SF
7910 47582 MT
(\267)SH
/Courier SF
8620 XM
(failure)SH
/Times-Roman SF
13161 XM
(is a function of one argument.)
91 W( It)
433 W( must be defined as:)92 W
/Courier SF
35959 XM
(\050defun x \050msg\051 ...\051)92 W
/Times-Roman SF
47977 XM
(where)SH
8620 48687 MT
(msg can be safely ignored.)SH
/Symbol SF
7910 50445 MT
(\267)SH
/Courier SF
8620 XM
(success)SH
/Times-Roman SF
13109 XM
(is a)
39 W( function of three arguments. It must be defined as:)38 W
/Courier SF
35868 XM
(\050defun x \050fd fail frame\051)38 W
8620 51550 MT
(...\051)SH
/Times-Roman SF
11354 XM
(where fd is an fd, fail is a continuation \050a function\051 and frame is an)
84 W( object of type frame.  The)85 W
8620 52655 MT
(default value is the function)SH
/Courier SF
20035 XM
(default-continuation)SH
/Times-Roman SF
(.)SH
/Times-Bold SF
7920 55134 MT
(Description:)SH
/Courier SF
13575 XM
(u-disjunctions)SH
/Times-Roman SF
22353 XM
(unifies)SH
/Times-Italic SF
25453 XM
(fd1)SH
/Times-Roman SF
27109 XM
(with)SH
/Times-Italic SF
29265 XM
(fd2)SH
/Times-Roman SF
30921 XM
(and passes 3 values to the)128 W
/Courier SF
42243 XM
(success)SH
/Times-Roman SF
46821 XM
(continuation: a)127 W
6120 56511 MT
(resulting fd, a continuation to call if more results are needed and a ``stack-frame'' containing information needed)
28 W( to)29 W
6120 57888 MT
(run the continuation.  By default,)12 W
/Courier SF
19691 XM
(default-continuation)SH
/Times-Roman SF
31953 XM
(just returns the unified fd.)12 W
/Courier SF
42885 XM
(u-disjunctions)SH
/Times-Roman SF
51547 XM
(is a)12 W
6120 59265 MT
(low-level function.  It is the only unification function accepting disjunctions in the input.)
39 W( For)
330 W( all other functions, if)40 W
6120 60642 MT
(the input contains disjunctions, it should first be normalized by calling the)
44 W( function)43 W
/Courier SF
40189 XM
(normalize-fd)SH
/Times-Roman SF
47682 XM
(. The)
336 W( search)43 W
6120 62019 MT
(for a unification works as follows:  first one fd compatible with)10 W
/Courier SF
31848 XM
(fd1)SH
/Times-Roman SF
33908 XM
(is unified \050as)
10 W( in)11 W
/Courier SF
40394 XM
(normalize)SH
/Times-Roman SF
(, in a blind search)11 W
6120 63396 MT
(manner. Then,)
416 W( this fd is unified with)83 W
/Courier SF
21894 XM
(fd2)SH
/Times-Roman SF
(. If)
416 W( all tries with)83 W
/Courier SF
31108 XM
(fd2)SH
/Times-Roman SF
33240 XM
(fail, then the unifier backtracks and tries to find)82 W
6120 64773 MT
(another fd compatible with)SH
/Courier SF
17174 XM
(fd1)SH
/Times-Roman SF
(. Therefore,)
250 W( the choices in)SH
/Courier SF
29915 XM
(fd1)SH
/Times-Roman SF
31965 XM
(are in general buried very deep in the search tree.)SH
7920 67252 MT
(Refer to paragraph 15.1.4 for an explanation of the limit argument.)SH
ES
%%Page: 101 102
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(101)SH
12 /Times-Bold AF
8280 11623 MT
(15.1.6.)SH
/Times-Roman SF
11880 XM
(uni)SH
10 /Times-Bold AF
10080 13000 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function)SH
/Times-Bold SF
8280 14377 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(uni)SH
/Times-Italic SF
16718 XM
(input-fd)SH
/Courier SF
20135 XM
(&key)SH
/Times-Italic SF
22785 XM
(grammar non-interactive limit cat-attribute)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 15754 MT
(Arguments:)SH
/Symbol SF
10070 17207 MT
(\267)SH
/Courier SF
10780 XM
(input-fd)SH
/Times-Roman SF
15830 XM
(is an input fd. It must be recognized by)SH
/Courier SF
31717 XM
(fd-p)SH
/Times-Roman SF
(. It)
250 W( must not contain disjunctions.)SH
/Symbol SF
10070 18965 MT
(\267)SH
/Courier SF
10780 XM
(grammar)SH
/Times-Roman SF
15230 XM
(is a FUG. It must be recognized by)SH
/Courier SF
29478 XM
(grammar-p)SH
/Times-Roman SF
(. By default, it is)SH
/Courier SF
41795 XM
(*u-grammar*)SH
/Times-Roman SF
(.)SH
/Symbol SF
10070 20723 MT
(\267)SH
/Courier SF
10780 XM
(non-interactive)SH
/Times-Roman SF
20030 XM
(is a flag. It is)SH
/Courier SF
25474 XM
(nil)SH
/Times-Roman SF
27524 XM
(by default.)SH
/Symbol SF
10070 22481 MT
(\267)SH
/Courier SF
10780 XM
(limit)SH
/Times-Roman SF
14030 XM
(is a number.  It is 10000 by default.)SH
/Symbol SF
10070 24239 MT
(\267)SH
/Courier SF
10780 XM
(cat-attribute)SH
/Times-Roman SF
18830 XM
(is a symbol.  It has the value of)SH
/Courier SF
31551 XM
(*cat-attribute*)SH
/Times-Roman SF
40801 XM
(by default.)SH
/Times-Bold SF
8280 25616 MT
(Description:)SH
/Courier SF
14017 XM
(uni)SH
/Times-Roman SF
16277 XM
(unifies)SH
/Times-Italic SF
19459 XM
(input-fd)SH
/Times-Roman SF
23086 XM
(with)SH
/Times-Italic SF
25324 XM
(grammar)SH
/Times-Roman SF
29506 XM
(and linearizes the resulting fd. It)
210 W( prints the result and some)211 W
8280 26993 MT
(statistics if)18 W
/Times-Italic SF
12872 XM
(non-interactive)SH
/Times-Roman SF
19250 XM
(is)SH
/Courier SF
20185 XM
(nil)SH
/Times-Roman SF
(. It returns no value.)18 W
/Times-Italic SF
30379 XM
(grammar)SH
/Times-Roman SF
34369 XM
(is always considered)
18 W( as indexed on the feature)17 W
/Courier SF
53280 XM
(cat)SH
/Times-Roman SF
8280 28370 MT
(or of the)46 W
/Courier SF
12056 XM
(cat-attribute)SH
/Times-Roman SF
20152 XM
(argument. If)46 W
/Times-Italic SF
25437 XM
(input-fd)SH
/Times-Roman SF
28900 XM
(contains no feature)46 W
/Courier SF
36897 XM
(cat)SH
/Times-Roman SF
38993 XM
(the unification fails.)
46 W( \050cf.)47 W
/Courier SF
49066 XM
(unif)SH
/Times-Roman SF
51763 XM
(if this is)47 W
8280 29747 MT
(the case.\051  If the input contains disjunctions, it should be normalized before being used \050cf)SH
/Courier SF
44552 XM
(normalize)SH
/Times-Roman SF
(\051.)SH
10080 32226 MT
(Refer to paragraph 5.11 for)
59 W( an explanation of the)58 W
/Courier SF
30434 XM
(cat-attribute)SH
/Times-Roman SF
38542 XM
(argument. Refer)
366 W( to paragraph 15.1.4 for)58 W
8280 33603 MT
(an explanation of the)SH
/Courier SF
16945 XM
(limit)SH
/Times-Roman SF
20195 XM
(argument.)SH
12 /Times-Bold AF
8280 37306 MT
(15.1.7.)SH
/Times-Roman SF
11880 XM
(uni-string)SH
10 /Times-Bold AF
10080 38683 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function)SH
/Times-Bold SF
8280 40060 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(uni-string)SH
/Times-Italic SF
20918 XM
(input-fd)SH
/Courier SF
24335 XM
(&key)SH
/Times-Italic SF
26985 XM
(grammar non-interactive limit cat-attribute)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 41437 MT
(Arguments:)SH
/Symbol SF
10070 42890 MT
(\267)SH
/Courier SF
10780 XM
(input-fd)SH
/Times-Roman SF
15830 XM
(is an input fd. It must be recognized by)SH
/Courier SF
31717 XM
(fd-p)SH
/Times-Roman SF
(. It)
250 W( must not contain disjunctions.)SH
/Symbol SF
10070 44648 MT
(\267)SH
/Courier SF
10780 XM
(grammar)SH
/Times-Roman SF
15230 XM
(is a FUG. It must be recognized by)SH
/Courier SF
29478 XM
(grammar-p)SH
/Times-Roman SF
(. By default, it is)SH
/Courier SF
41795 XM
(*u-grammar*)SH
/Times-Roman SF
(.)SH
/Symbol SF
10070 46406 MT
(\267)SH
/Courier SF
10780 XM
(non-interactive)SH
/Times-Roman SF
20030 XM
(is a flag. It is)SH
/Courier SF
25474 XM
(nil)SH
/Times-Roman SF
27524 XM
(by default.)SH
/Symbol SF
10070 48164 MT
(\267)SH
/Courier SF
10780 XM
(limit)SH
/Times-Roman SF
14030 XM
(is a number.  It is 10000 by default.)SH
/Symbol SF
10070 49922 MT
(\267)SH
/Courier SF
10780 XM
(cat-attribute)SH
/Times-Roman SF
18830 XM
(is a symbol.  It has the value of)SH
/Courier SF
31551 XM
(*cat-attribute*)SH
/Times-Roman SF
40801 XM
(by default.)SH
/Times-Bold SF
8280 51299 MT
(Description:)SH
/Courier SF
13887 XM
(uni-string)SH
/Times-Roman SF
20217 XM
(works exactly like)80 W
/Courier SF
28039 XM
(uni)SH
/Times-Roman SF
30169 XM
(except that it returns the)
80 W( generated string as a lisp string and)81 W
8280 52676 MT
(does not print it.)SH
12 /Times-Bold AF
8280 56379 MT
(15.1.8.)SH
/Times-Roman SF
11880 XM
(uni-fd)SH
10 /Times-Bold AF
10080 57756 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function)SH
/Times-Bold SF
8280 59133 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(uni-fd)SH
/Times-Italic SF
18518 XM
(input-fd)SH
/Times-Roman SF
21935 XM
(&key)SH
/Times-Italic SF
24407 XM
(grammar non-interactive limit cat-attribute)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 60510 MT
(Arguments:)SH
/Symbol SF
10070 61963 MT
(\267)SH
/Courier SF
10780 XM
(input-fd)SH
/Times-Roman SF
15830 XM
(is an input fd. It must be recognized by)SH
/Courier SF
31717 XM
(fd-p)SH
/Times-Roman SF
(.)SH
/Symbol SF
10070 63721 MT
(\267)SH
/Courier SF
10780 XM
(grammar)SH
/Times-Roman SF
15230 XM
(is a FUG. It must be recognized by)SH
/Courier SF
29478 XM
(grammar-p)SH
/Times-Roman SF
(. By default, it is)SH
/Courier SF
41795 XM
(*u-grammar*)SH
/Times-Roman SF
(.)SH
/Symbol SF
10070 65479 MT
(\267)SH
/Courier SF
10780 XM
(non-interactive)SH
/Times-Roman SF
20030 XM
(is a flag. It is)SH
/Courier SF
25474 XM
(nil)SH
/Times-Roman SF
27524 XM
(by default.)SH
/Times-Bold SF
8280 66856 MT
(Description:)SH
/Courier SF
13927 XM
(uni-fd)SH
/Times-Roman SF
17897 XM
(unifies)SH
/Times-Italic SF
20988 XM
(input-fd)SH
/Times-Roman SF
24524 XM
(with)SH
/Times-Italic SF
26671 XM
(grammar)SH
/Times-Roman SF
30762 XM
(and returns the resulting total fd. The result is determined.)119 W
/Courier SF
8280 68233 MT
(uni-fd)SH
/Times-Roman SF
12192 XM
(prints the)
62 W( same statistics as)63 W
/Courier SF
23589 XM
(uni)SH
/Times-Roman SF
25702 XM
(if)SH
/Times-Italic SF
26626 XM
(non-interactive)SH
/Times-Roman SF
33049 XM
(is)SH
/Courier SF
34029 XM
(nil)SH
/Times-Roman SF
(.)SH
/Times-Italic SF
36705 XM
(grammar)SH
/Times-Roman SF
40740 XM
(is always considered as indexed on)63 W
8280 69610 MT
(the feature)149 W
/Courier SF
13076 XM
(cat-attribute)SH
/Times-Roman SF
(. If)149 W
/Times-Italic SF
22590 XM
(input-fd)SH
/Times-Roman SF
26156 XM
(contains no feature)149 W
/Courier SF
34462 XM
(cat)SH
/Times-Roman SF
36661 XM
(the unification fails. \050cf.)149 W
/Courier SF
47143 XM
(unif)SH
/Times-Roman SF
49941 XM
(if this is the)148 W
8280 70987 MT
(case.\051)SH
ES
%%Page: 102 103
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(102)SH
7920 11486 MT
(Refer to paragraph 5.11 for an explanation of the)58 W
/Courier SF
28270 XM
(cat-attribute)SH
/Times-Roman SF
36378 XM
(argument. Refer)
366 W( to paragraph 15.1.4 for)59 W
6120 12863 MT
(an explanation of the)SH
/Courier SF
14785 XM
(limit)SH
/Times-Roman SF
18035 XM
(argument.)SH
12 /Times-Bold AF
6120 16566 MT
(15.1.9.)SH
/Times-Roman SF
9720 XM
(unif)SH
10 /Times-Bold AF
7920 17943 MT
(Type:)SH
/Times-Roman SF
10670 XM
(function)SH
/Times-Bold SF
6120 19320 MT
(Calling form:)SH
/Times-Roman SF
12175 XM
(\050)SH
/Courier SF
(unif)SH
/Times-Italic SF
15158 XM
(input-fd)SH
/Courier SF
18575 XM
(&key)SH
/Times-Italic SF
21225 XM
(grammar)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
6120 20697 MT
(Arguments:)SH
/Symbol SF
7910 22150 MT
(\267)SH
/Courier SF
8620 XM
(input-fd)SH
/Times-Roman SF
13670 XM
(is an input fd. It must be recognized by)SH
/Courier SF
29557 XM
(fd-p)SH
/Times-Roman SF
(.)SH
/Symbol SF
7910 23908 MT
(\267)SH
/Courier SF
8620 XM
(grammar)SH
/Times-Roman SF
13070 XM
(is a FUG. It must be recognized by)SH
/Courier SF
27318 XM
(grammar-p)SH
/Times-Roman SF
(. By default, it is)SH
/Courier SF
39635 XM
(*u-grammar*)SH
/Times-Roman SF
(.)SH
/Times-Bold SF
7920 26387 MT
(Description:)SH
/Courier SF
13447 XM
(unif)SH
/Times-Roman SF
16097 XM
(unifies)SH
/Times-Italic SF
19069 XM
(input-fd)SH
/Times-Roman SF
22486 XM
(with)SH
/Times-Italic SF
24514 XM
(grammar)SH
/Times-Roman SF
28486 XM
(and returns the resulting total fd. The result is determined.)SH
7920 28866 MT
(If)SH
/Times-Italic SF
8903 XM
(input-fd)SH
/Times-Roman SF
12387 XM
(contains no feature)67 W
/Courier SF
20447 XM
(cat)SH
/Times-Roman SF
(,)SH
/Courier SF
22814 XM
(unif)SH
/Times-Roman SF
25531 XM
(tries all the categories returned by)66 W
/Courier SF
39757 XM
(list-cats)SH
/Times-Roman SF
45473 XM
(until one returns a)66 W
6120 30243 MT
(successful unification.)SH
/Courier SF
7920 32722 MT
(unif)SH
/Times-Roman SF
10570 XM
(checks)SH
/Times-Italic SF
13541 XM
(input-fd)SH
/Times-Roman SF
16958 XM
(with)SH
/Courier SF
18986 XM
(fd-p)SH
/Times-Roman SF
21636 XM
(and it checks)SH
/Times-Italic SF
27107 XM
(grammar)SH
/Times-Roman SF
31079 XM
(with)SH
/Courier SF
33107 XM
(grammar-p)SH
/Times-Roman SF
(.)SH
12 /Times-Bold AF
6120 36425 MT
(15.1.10.)SH
/Times-Roman SF
10320 XM
(u-exhaust)SH
10 /Times-Bold AF
7920 37802 MT
(Type:)SH
/Times-Roman SF
10670 XM
(function)SH
/Times-Bold SF
6120 39179 MT
(Calling form:)SH
/Times-Roman SF
12175 XM
(\050)SH
/Courier SF
(u-exhaust)SH
/Times-Italic SF
18158 XM
(fd1 fd2)SH
/Courier SF
21214 XM
(&key)SH
/Times-Italic SF
23864 XM
(test limit)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
6120 40556 MT
(Arguments:)SH
/Symbol SF
7910 42009 MT
(\267)SH
/Courier SF
8620 XM
(fd1)SH
/Times-Roman SF
10670 XM
(and)SH
/Courier SF
12364 XM
(fd2)SH
/Times-Roman SF
14414 XM
(are fds. They must be recognized by)SH
/Courier SF
29188 XM
(fd-p)SH
/Times-Roman SF
(.)SH
/Courier SF
32338 XM
(fd1)SH
/Times-Roman SF
34388 XM
(cannot contain disjunctions.)SH
/Symbol SF
7910 43767 MT
(\267)SH
/Courier SF
8620 XM
(test)SH
/Times-Roman SF
11270 XM
(is a lisp expression.  It is)SH
/Courier SF
21381 XM
(T)SH
/Times-Roman SF
22231 XM
(by default.)SH
/Symbol SF
7910 45525 MT
(\267)SH
/Courier SF
8620 XM
(limit)SH
/Times-Roman SF
11870 XM
(is a number.  It is 10000 by default.)SH
/Times-Bold SF
6120 46902 MT
(Description:)SH
/Times-Roman SF
11745 XM
(Unifier exhaust. Takes 2 functional descriptions and returns the list of all possible unifications)
98 W( until)99 W
/Courier SF
6120 48279 MT
(test)SH
/Times-Roman SF
8819 XM
(is satisfied.)49 W
/Courier SF
13966 XM
(Test)SH
/Times-Roman SF
16665 XM
(is a)
49 W( lisp expression which is evaluated after each possible unification is found.  In)48 W
/Courier SF
50270 XM
(test)SH
/Times-Roman SF
(,)SH
6120 49656 MT
(refer to the list being built as fug3::result. This function does NOT recurse on sub-constituents. It is at)
4 W( the same level)5 W
6120 51033 MT
(as)SH
/Courier SF
7260 XM
(u)SH
/Times-Roman SF
8167 XM
(or)SH
/Courier SF
9307 XM
(u-disjunctions)SH
/Times-Roman SF
18014 XM
(\050low-level function\051.  If)57 W
/Courier SF
27934 XM
(test)SH
/Times-Roman SF
30641 XM
(is)SH
/Courier SF
31615 XM
(nil)SH
/Times-Roman SF
(, this function will generate)
57 W( all possible unifica-)56 W
6120 52410 MT
(tions of)SH
/Courier SF
9398 XM
(fd1)SH
/Times-Roman SF
11448 XM
(and)SH
/Courier SF
13142 XM
(fd2)SH
/Times-Roman SF
(.)SH
7920 54889 MT
(Refer to paragraph 15.1.4 for an explanation of the)SH
/Courier SF
28498 XM
(limit)SH
/Times-Roman SF
31748 XM
(argument.)SH
12 /Times-Bold AF
6120 58592 MT
(15.1.11.)SH
/Times-Roman SF
10320 XM
(u-exhaust-top)SH
10 /Times-Bold AF
7920 59969 MT
(Type:)SH
/Times-Roman SF
10670 XM
(function)SH
/Times-Bold SF
6120 61346 MT
(Calling form:)SH
/Times-Roman SF
12175 XM
(\050)SH
/Courier SF
(u-exhaust-top)SH
/Times-Italic SF
20558 XM
(input)SH
/Courier SF
22864 XM
(&key)SH
/Times-Italic SF
25514 XM
(grammar non-interactive test limit)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
6120 62723 MT
(Arguments:)SH
/Symbol SF
7910 64176 MT
(\267)SH
/Courier SF
8620 XM
(input)SH
/Times-Roman SF
11870 XM
(is an fd. It must be recognized by)SH
/Courier SF
25451 XM
(fd-p)SH
/Times-Roman SF
(. It cannot contain disjunctions.)SH
/Symbol SF
7910 65934 MT
(\267)SH
/Courier SF
8620 XM
(grammar)SH
/Times-Roman SF
13070 XM
(is a FUG.  It must be recognized by)SH
/Courier SF
27568 XM
(grammar-p)SH
/Times-Roman SF
(. By)
250 W( default it is)SH
/Courier SF
39885 XM
(*u-grammar*)SH
/Times-Roman SF
(.)SH
/Symbol SF
7910 67692 MT
(\267)SH
/Courier SF
8620 XM
(non-interactive)SH
/Times-Roman SF
17950 XM
(is a flag.  If it is nil, statistics are printed after each unification.  Otherwise)
80 W( the)81 W
8620 68797 MT
(funtion works silently.  The default value is nil.)SH
/Symbol SF
7910 70555 MT
(\267)SH
/Courier SF
8620 XM
(test)SH
/Times-Roman SF
11270 XM
(is a lisp expression.  It is)SH
/Courier SF
21381 XM
(T)SH
/Times-Roman SF
22231 XM
(by default.)SH
ES
%%Page: 103 104
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(103)SH
/Symbol SF
10070 11600 MT
(\267)SH
/Courier SF
10780 XM
(limit)SH
/Times-Roman SF
14030 XM
(is a number.  It is 10000 by default.)SH
/Times-Bold SF
8280 12977 MT
(Description:)SH
/Times-Roman SF
13879 XM
(Unifier exhaust with recursion. This function works like)72 W
/Courier SF
37201 XM
(u-exhaust)SH
/Times-Roman SF
42922 XM
(except that it also recurses on)71 W
8280 14354 MT
(the sub-constituents of the input.  It keeps producing fds until)17 W
/Courier SF
33299 XM
(test)SH
/Times-Roman SF
35966 XM
(evaluates to)
17 W( a non-nil.)18 W
/Courier SF
45387 XM
(test)SH
/Times-Roman SF
48055 XM
(is evaluated in an)18 W
8280 15731 MT
(environment where)34 W
/Courier SF
16346 XM
(fug3::result)SH
/Times-Roman SF
23830 XM
(is bound to the list of all fds found so far.  If)34 W
/Courier SF
42214 XM
(test)SH
/Times-Roman SF
44897 XM
(is)SH
/Courier SF
45847 XM
(nil)SH
/Times-Roman SF
(, this function will)33 W
8280 17108 MT
(generate all possible unifications of)SH
/Courier SF
22750 XM
(input)SH
/Times-Roman SF
26000 XM
(and)SH
/Courier SF
27694 XM
(grammar)SH
/Times-Roman SF
(.)SH
10080 19587 MT
(Refer to paragraph 15.1.4 for an explanation of the)SH
/Courier SF
30658 XM
(limit)SH
/Times-Roman SF
33908 XM
(argument.)SH
12 /Times-Bold AF
8280 23290 MT
(15.1.12.)SH
/Times-Roman SF
12480 XM
(uni-num)SH
10 /Times-Bold AF
10080 24667 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function)SH
/Times-Bold SF
8280 26044 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(uni-num)SH
/Times-Italic SF
19118 XM
(input n)SH
/Courier SF
22174 XM
(&key)SH
/Times-Italic SF
24824 XM
(grammar limit)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 27421 MT
(Arguments:)SH
/Symbol SF
10070 28874 MT
(\267)SH
/Courier SF
10780 XM
(input)SH
/Times-Roman SF
14030 XM
(is an fd. It must be recognized by)SH
/Courier SF
27611 XM
(fd-p)SH
/Times-Roman SF
(. It cannot contain disjunctions.)SH
/Symbol SF
10070 30632 MT
(\267)SH
/Courier SF
10780 XM
(n)SH
/Times-Roman SF
11630 XM
(is an integer.)SH
/Symbol SF
10070 32390 MT
(\267)SH
/Courier SF
10780 XM
(grammar)SH
/Times-Roman SF
15230 XM
(is a FUG.  It must be recognized by)SH
/Courier SF
29728 XM
(grammar-p)SH
/Times-Roman SF
(. By)
250 W( default it is)SH
/Courier SF
42045 XM
(*u-grammar*)SH
/Times-Roman SF
(.)SH
/Symbol SF
10070 34148 MT
(\267)SH
/Courier SF
10780 XM
(limit)SH
/Times-Roman SF
14030 XM
(is a number.  It is 10000 by default.)SH
/Times-Bold SF
8280 35525 MT
(Description:)SH
/Times-Roman SF
13904 XM
(Unifies input with grammar and backtracks n)
97 W( times.  Each time, the result is processed as per)98 W
/Courier SF
53030 XM
(uni)SH
/Times-Roman SF
(.)SH
8280 36902 MT
(Refer to paragraph 15.1.4 for an explanation of the)SH
/Courier SF
28858 XM
(limit)SH
/Times-Roman SF
32108 XM
(argument.)SH
14 /Times-Bold AF
8280 40720 MT
(15.2. Checking)SH
12 SS 
8280 44423 MT
(15.2.1.)SH
/Times-Roman SF
11880 XM
(fd-syntax)SH
10 /Times-Bold AF
10080 45800 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function)SH
/Times-Bold SF
8280 47177 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(fd-syntax)
250 MX(&optional)SH
/Times-Italic SF
25968 XM
(fd)SH
/Courier SF
26996 XM
(&key)SH
/Times-Italic SF
29646 XM
(print-warnings print-messages)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 48554 MT
(Arguments:)SH
/Symbol SF
10070 50007 MT
(\267)SH
/Courier SF
10780 XM
(fd)SH
/Times-Roman SF
12230 XM
(is a list of pairs. It is)SH
/Courier SF
20619 XM
(*u-grammar*)SH
/Times-Roman SF
27469 XM
(by default.)SH
/Symbol SF
10070 51765 MT
(\267)SH
/Courier SF
10780 XM
(print-warnings)SH
/Times-Roman SF
19430 XM
(is a flag. It is nil by default.)SH
/Symbol SF
10070 53523 MT
(\267)SH
/Courier SF
10780 XM
(print-messages)SH
/Times-Roman SF
19430 XM
(is a flag. It is nil by default.)SH
/Times-Bold SF
8280 54900 MT
(Description:)SH
/Courier SF
13812 XM
(fd-syntax)SH
/Times-Roman SF
19467 XM
(verifies that)4 W
/Times-Italic SF
24474 XM
(fd)SH
/Times-Roman SF
25506 XM
(is a valid fd. If it is, it returns)4 W
/Courier SF
37458 XM
(T)SH
/Times-Roman SF
(. Otherwise, it prints helpful messages and)4 W
8280 56277 MT
(returns)SH
/Courier SF
11319 XM
(nil)SH
/Times-Roman SF
(. If)13 W
/Times-Italic SF
14561 XM
(print-warnings)SH
/Times-Roman SF
20825 XM
(is non-)13 W
/Courier SF
(nil)SH
/Times-Roman SF
25651 XM
(it also print warnings for all the paths it encounters in the grammar.  This)13 W
8280 57654 MT
(is useful when you suspect that one path is invalid or pointing to a bad)
142 W( location.  If)141 W
/Times-Italic SF
44135 XM
(print-messages)SH
/Times-Roman SF
50581 XM
(is)SH
/Courier SF
51639 XM
(nil)SH
/Times-Roman SF
(, no)141 W
8280 59031 MT
(diagnostic messages are printed, and the function just returns)67 W
/Courier SF
33546 XM
(T)SH
/Times-Roman SF
34463 XM
(or)SH
/Courier SF
35613 XM
(nil)SH
/Times-Roman SF
(. If)
384 W( it is non-)67 W
/Courier SF
(nil)SH
/Times-Roman SF
(, diagnostic messages are)67 W
8280 60408 MT
(printed.)SH
10080 62887 MT
(*****NOTE: The following table has not been updated for Version 5.2******)SH
24078 64896 MT
(Diagnostics detected by)SH
/Courier SF
33882 XM
(fd-syntax)SH
44796 50 9282 65514 LH BX1
/Times-Roman SF
18787 66599 MT
(message)SH
40990 XM
(condition)SH
44796 50 9282 67217 LH BX1
-1703 50 31680 67217 LV BX1
33879 68302 MT
(An fd must)
90 W( be either a legal leaf \050symbol, num-)89 W
32079 69407 MT
(ber, string, character or)
14 W( array\051, a path or a valid list of)15 W
11481 70512 MT
(Unknown type: ~s.)SH
32079 XM
(pairs.)SH
44796 7319 50 9282 71130 BX BX1
-3913 50 31680 71130 LV BX1
ES
%%Page: 104 105
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(104)SH
16627 11885 MT
(message)SH
38830 XM
(condition)SH
44796 50 7122 12503 LH BX1
-1703 50 29520 12503 LV BX1
9321 13588 MT
(Unknow type: ~s.  Should be)
85 W( a pair or a tracing)84 W
31719 XM
(Within a list of pairs fd, all elements must)
200 W( be)201 W
7521 14693 MT
(flag.)SH
29919 XM
(either pairs or tracing flags.)SH
44796 50 7122 15311 LH BX1
9321 16396 MT
(~A is a tracing flag.  It cannot be)
206 W( used as an)205 W
7521 17501 MT
(attribute in ~A.)SH
31719 XM
(Tracing flags are not legal attributes in a pair.)SH
44796 50 7122 18119 LH BX1
9321 19204 MT
(The attribute of a pair must)
202 W( be a symbol or a)203 W
7521 20309 MT
(path: ~s.)SH
31719 XM
(Other types are forbidden.)SH
44796 50 7122 20927 LH BX1
9321 22012 MT
(An alt/ralt pair must have)
210 W( at most 4 args: \050alt)209 W
31719 XM
(The disjunction construct)
410 W( being checked has)411 W
7521 23117 MT
({trace} {index} {demo} \050fd1 ... fdn\051\051.)SH
29919 XM
(more than 4 arguments.)SH
44796 50 7122 23735 LH BX1
9321 24820 MT
(An alt/ralt pair must have)
210 W( at most 4 args: \050alt)209 W
31719 XM
(The disjunction)
5 W( construct being checked has only)4 W
7521 25925 MT
({trace} {index} {demo} \050fd1)
157 W( ... fdn\051\051.  There is no)158 W
29919 XM
(4 arguments, but one of)
17 W( the arguments is not properly)18 W
7521 27030 MT
(trace/index/demo flag in this pair.)SH
29919 XM
(formed.)SH
44796 50 7122 27648 LH BX1
9321 28733 MT
(An alt/ralt pair must have)
210 W( at most 4 args: \050alt)209 W
7521 29838 MT
({trace} {index} {demo} \050fd1 ... fdn\051\051.  There are)
96 W( no)97 W
31719 XM
(The disjunction construct being checked has)
4 W( only)5 W
7521 30943 MT
(/index and demo/trace and demo/trace and index)360 W
29919 XM
(3 arguments, but one of the)
18 W( arguments is not properly)17 W
7521 32048 MT
(flags in this pair.)SH
29919 XM
(formed.)SH
44796 50 7122 32666 LH BX1
9321 33751 MT
(This alt/ralt pair must have one value: \050alt \050fd1)
15 W( ...)16 W
7521 34856 MT
(fdn\051\051. There)
396 W( is no valid trace, index)
73 W( or demo flag in)72 W
31719 XM
(No valid modifier is)
190 W( found in the current con-)191 W
7521 35961 MT
(this pair.)SH
29919 XM
(struct, and yet it has more than one value.)SH
44796 50 7122 36579 LH BX1
9321 37664 MT
(Value of alt/ralt must be a list of at least one)208 W
7521 38769 MT
(branch: ~s.)SH
31719 XM
(A \050alt \050\051\051 pair is invalid.)SH
44796 50 7122 39387 LH BX1
9321 40472 MT
(Value of special attribute ALT/RALT must be a)79 W
31719 XM
(One of the fds in the branches of the)
91 W( pair is not)90 W
7521 41577 MT
(list of valid FDs.)SH
29919 XM
(valid.)SH
44796 50 7122 42195 LH BX1
9321 43280 MT
(An OPT)
190 W( pair must have at most 2 args: \050OPT)191 W
31719 XM
(The OPT pair being checked has)
212 W( more than 2)211 W
7521 44385 MT
(trace fd\051.)SH
29919 XM
(arguments, as in \050opt t a b\051.)SH
44796 50 7122 45003 LH BX1
31719 46088 MT
(A valid tracing flag must)
42 W( be either a symbol or a)41 W
29919 47193 MT
(form \050trace on <symbol>\051.)
361 W( The)
974 W( construct being)362 W
9321 48298 MT
(This OPT pair must have)
73 W( at most 1 value: \050OPT)74 W
29919 XM
(checked has the form \050opt f1 f2 ...\051 where)
67 W( f1 is not a)66 W
7521 49403 MT
(fd\051. \050There is no valid tracing flag in this pair.\051)SH
29919 XM
(valid tracing flag.)SH
44796 50 7122 50021 LH BX1
9321 51106 MT
(Value of OPT must be a valid FD: ~s)SH
31719 XM
(The fd part of the OPT is not a valid fd.)SH
44796 50 7122 51724 LH BX1
9321 52809 MT
(An FSET pair must be)
440 W( of the form \050ATT)441 W
7521 53914 MT
(VALUE\051: ~s.)SH
31719 XM
(The FSET pair has more than one value.)SH
44796 50 7122 54532 LH BX1
9321 55617 MT
(Value of)
56 W( special attribute FSET must be a list of)55 W
7521 56722 MT
(atoms: ~s)SH
31719 XM
(One of the elements of the list is not a symbol.)SH
44796 50 7122 57340 LH BX1
9321 58425 MT
(A CSET pair must be of the form)
489 W( \050ATT)490 W
7521 59530 MT
(VALUE\051: ~s)SH
31719 XM
(The CSET pair has more than one value.)SH
44796 50 7122 60148 LH BX1
9321 61233 MT
(Value of special attribute CSET must be a)
43 W( list of)42 W
31719 XM
(One of)
29 W( the elements of the list is not a symbol or)30 W
7521 62338 MT
(symbols or valid paths: ~s)SH
29919 XM
(a path.)SH
44796 50 7122 62956 LH BX1
9321 64041 MT
(A PATTERN pair)
233 W( must be of the form \050ATT)232 W
7521 65146 MT
(VALUE\051: ~s)SH
31719 XM
(The PATTERN pair can have only two values.)SH
44796 50 7122 65764 LH BX1
/Courier SF
31719 66849 MT
(pattern)SH
/Times-Roman SF
36325 XM
(accepts a flat list of atoms, paths or)155 W
9321 67954 MT
(Value of special attribute PATTERN)
23 W( should be a)24 W
29919 XM
(mergeable constituents.)
242 W( A mergeable constituent is)243 W
7521 69059 MT
(list of paths or mergeable atoms.)SH
29919 XM
(marked \050* c\051.)SH
44796 58877 50 7122 69677 BX BX1
-57174 50 29520 69677 LV BX1
ES
%%Page: 105 106
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(105)SH
18787 11885 MT
(message)SH
40990 XM
(condition)SH
44796 50 9282 12503 LH BX1
-1703 50 31680 12503 LV BX1
11481 13588 MT
(A SPECIAL pair must be of the)
288 W( form \050ATT)287 W
8 SS 
50959 14348 MT
(15)SH
10 SS 
9681 14693 MT
(VALUE\051: ~s)SH
33879 XM
(Special attributes can have only one value.)SH
44796 50 9282 15311 LH BX1
33879 16396 MT
(External-spec can be simply the symbol)766 W
11481 17501 MT
(An EXTERNAL pair must be of)
73 W( the form \050ATT)72 W
/Courier SF
32079 XM
(external)SH
/Times-Roman SF
38344 XM
(or a construct)1214 W
/Courier SF
47679 XM
(#\050external)SH
/Times-Roman SF
9681 18606 MT
(external-spec\051: ~s)SH
/Courier SF
32079 XM
(<fctn>\051)SH
/Times-Roman SF
(.)SH
44796 50 9282 19224 LH BX1
11481 20309 MT
(--- Warning: The argument of external must be)
38 W( a)39 W
33879 XM
(In a)266 W
/Courier SF
36188 XM
(#\050external <fctn>\051)266 W
/Times-Roman SF
(, <fctn> is)
266 W( not)265 W
9681 21414 MT
(function.)SH
32079 XM
(recognized as a defined function.)SH
44796 50 9282 22032 LH BX1
11481 23117 MT
(An UNDER specification must be an array)
10 W( of the)11 W
33879 XM
(An UNDER value has)
101 W( been found that does not)100 W
9681 24222 MT
(form #\050UNDER symbol\051: ~s)SH
32079 XM
(have the proper form.)SH
44796 50 9282 24840 LH BX1
11481 25925 MT
(The argument of an UNDER)
115 W( specification must)116 W
33879 XM
(In a)376 W
/Times-Bold SF
36408 XM
(#\050under <x>\051)376 W
/Times-Roman SF
(, <x> must)
376 W( be a symbol)375 W
9681 27030 MT
(be a symbol: ~s)SH
32079 XM
(defined in a type hierarchy.)SH
44796 50 9282 27648 LH BX1
11481 28733 MT
(--- Warning:)
245 W( The argument of under does not)246 W
33879 XM
(In a)376 W
/Times-Bold SF
36408 XM
(#\050under <x>\051)376 W
/Times-Roman SF
(, <x> must)
376 W( be a symbol)375 W
9681 29838 MT
(have specializations defined.  Use)2005 W
32079 XM
(defined in a type)
221 W( hierarchy.  If the type hierarchy)222 W
/Courier SF
9681 30943 MT
(\050define-feature-type ~s \050spec1 ...)400 W
/Times-Roman SF
32079 XM
(does not exist, it can be defined with)
683 W( the)682 W
/Courier SF
9681 32048 MT
(specn\051\051)SH
/Times-Roman SF
(.)SH
/Courier SF
32079 XM
(define-feature-type)SH
/Times-Roman SF
43729 XM
(function.)SH
44796 50 9282 32666 LH BX1
33879 33751 MT
(The form being)
86 W( checked has more than two ele-)87 W
11481 34856 MT
(A pair must be of the form \050ATT VALUE\051)SH
32079 XM
(ments.)SH
44796 50 9282 35474 LH BX1
11481 36559 MT
(A value should be a valid fd.)SH
33879 XM
(In a pair \050att value\051, value is not a valid fd.)SH
44796 26377 50 9282 37177 BX BX1
-24674 50 31680 37177 LV BX1
12 /Times-Bold AF
8280 40880 MT
(15.2.2.)SH
/Times-Roman SF
11880 XM
(fd-sem)SH
10 /Times-Bold AF
10080 42257 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function)SH
/Times-Bold SF
8280 43634 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(fd-sem)
250 MX(&optional)SH
/Times-Italic SF
24168 XM
(fd grammar-p)SH
/Courier SF
30001 XM
(&key)SH
/Times-Italic SF
32651 XM
(print-messages print-warnings)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 45011 MT
(Arguments:)SH
/Symbol SF
10070 46464 MT
(\267)SH
/Courier SF
10780 XM
(fd)SH
/Times-Roman SF
12230 XM
(is a syntactically valid fd. It must be recognized by)SH
/Courier SF
32866 XM
(fd-p)SH
/Times-Roman SF
(. It is)SH
/Courier SF
37544 XM
(*u-grammar*)SH
/Times-Roman SF
44394 XM
(by default.)SH
/Symbol SF
10070 48222 MT
(\267)SH
/Courier SF
10780 XM
(grammar-p)SH
/Times-Roman SF
16430 XM
(is a flag. It is)SH
/Courier SF
21874 XM
(T)SH
/Times-Roman SF
22724 XM
(by default.)SH
/Symbol SF
10070 49980 MT
(\267)SH
/Courier SF
10780 XM
(print-messages)SH
/Times-Roman SF
19430 XM
(is a flag.  It is)SH
/Courier SF
25124 XM
(T)SH
/Times-Roman SF
25974 XM
(by default.)SH
/Symbol SF
10070 51738 MT
(\267)SH
/Courier SF
10780 XM
(print-warnings)SH
/Times-Roman SF
19430 XM
(is a flag.  It is)SH
/Courier SF
25124 XM
(T)SH
/Times-Roman SF
25974 XM
(by default.)SH
/Times-Bold SF
8280 53115 MT
(Description:)SH
/Courier SF
13928 XM
(fd-sem)SH
/Times-Roman SF
17899 XM
(verifies that)121 W
/Times-Italic SF
23140 XM
(fd)SH
/Times-Roman SF
24289 XM
(is a semantically valid fd. If it is, it returns)121 W
/Courier SF
42720 XM
(T)SH
/Times-Roman SF
(. Otherwise, it prints)
121 W( helpful)120 W
8280 54492 MT
(messages and returns)12 W
/Courier SF
17064 XM
(nil)SH
/Times-Roman SF
(. If)276 W
/Times-Italic SF
20569 XM
(grammar-p)SH
/Times-Roman SF
25387 XM
(is non-)13 W
/Courier SF
(nil)
263 MX(fd-sem)SH
/Times-Roman SF
34076 XM
(expects)SH
/Times-Italic SF
37338 XM
(fd)SH
/Times-Roman SF
38379 XM
(to be a grammar. It allows disjunctions in)13 W
/Times-Italic SF
8280 55869 MT
(fd)SH
/Times-Roman SF
(. In this case,)164 W
/Courier SF
15213 XM
(fd-sem)SH
/Times-Roman SF
19227 XM
(returns 3 values if)164 W
/Times-Italic SF
27326 XM
(fd)SH
/Times-Roman SF
28518 XM
(is a valid grammar:)164 W
/Courier SF
37173 XM
(T)SH
/Times-Roman SF
(, the number of)
164 W( traced alternatives in the)163 W
8280 57246 MT
(grammar, and the number of indexed alternatives.)SH
10080 59725 MT
(If)SH
/Times-Italic SF
11020 XM
(grammar-p)SH
/Times-Roman SF
15849 XM
(is)SH
/Courier SF
16790 XM
(nil)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
19114 XM
(fd)SH
/Times-Roman SF
20166 XM
(is considered as an input fd.  Disjunctions are)
24 W( not allowed. In any case, only one value)25 W
8280 61102 MT
(is returned \050)SH
/Courier SF
(T)SH
/Times-Roman SF
13962 XM
(or)SH
/Courier SF
15045 XM
(nil)SH
/Times-Roman SF
(\051.)SH
10080 63581 MT
(*****NOTE: The following table has not been updated for Version 5.2******)SH
24978 65590 MT
(Diagnostics detected by)SH
/Courier SF
34782 XM
(fd-sem)SH
44796 1703 50 9282 66208 BX BX1
10800 50 8280 69428 UL
6 /Times-Roman AF
9080 70767 MT
(15)SH
8 SS 
9680 71076 MT
(Special attributes \050user defined types\051 can also issue user-defined)
49 W( syntax messages through the use of syntax-checker functions.  Cf section)50 W
8280 72000 MT
(on user-defined types for details.)SH
ES
%%Page: 106 107
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(106)SH
16627 11885 MT
(message)SH
38830 XM
(condition)SH
44796 50 7122 12503 LH BX1
-1703 50 29520 12503 LV BX1
/Times-Italic SF
31719 13588 MT
(grammar-p)SH
/Times-Roman SF
36735 XM
(is)SH
/Courier SF
37863 XM
(nil)SH
/Times-Roman SF
40124 XM
(and a)
211 W( disjunction has been)210 W
9321 14693 MT
(--- Warning: Disjunctions in input FD: ~s)SH
29919 XM
(found in)SH
/Times-Italic SF
33530 XM
(fd)SH
/Times-Roman SF
(.)SH
44796 50 7122 15311 LH BX1
9321 16396 MT
(--- Warning: PATTERN)
86 W( or CSET should not be)87 W
/Times-Italic SF
31719 XM
(grammar-p)SH
/Times-Roman SF
36540 XM
(is)SH
/Courier SF
37473 XM
(nil)SH
/Times-Roman SF
39539 XM
(and a)16 W
/Courier SF
41958 XM
(pattern)SH
/Times-Roman SF
46423 XM
(or)SH
/Courier SF
47521 XM
(cset)SH
/Times-Roman SF
50186 XM
(has)SH
7521 17501 MT
(placed in input.)SH
29919 XM
(been found in)SH
/Times-Italic SF
35668 XM
(fd)SH
/Times-Roman SF
(.)SH
44796 50 7122 18119 LH BX1
9321 19204 MT
(--- Warning: ANY or GIVEN should not)
325 W( be)326 W
/Times-Italic SF
31719 XM
(grammar-p)SH
/Times-Roman SF
36765 XM
(is)SH
/Courier SF
37923 XM
(nil)SH
/Times-Roman SF
40214 XM
(and a)241 W
/Courier SF
43083 XM
(any)SH
/Times-Roman SF
45373 XM
(or)SH
/Courier SF
46696 XM
(given)SH
/Times-Roman SF
50186 XM
(has)SH
7521 20309 MT
(placed in input.)SH
29919 XM
(been found in)SH
/Times-Italic SF
35668 XM
(fd)SH
/Times-Roman SF
(.)SH
44796 50 7122 20927 LH BX1
9321 22012 MT
(--- Warning: EXTERNAL or UNDER should)
4 W( not)5 W
/Times-Italic SF
31719 XM
(grammar-p)SH
/Times-Roman SF
36597 XM
(is)SH
/Courier SF
37587 XM
(nil)SH
/Times-Roman SF
39710 XM
(and a)72 W
/Courier SF
42242 XM
(external)SH
/Times-Roman SF
47364 XM
(or)SH
/Courier SF
48519 XM
(under)SH
/Times-Roman SF
7521 23117 MT
(be placed in input.)SH
29919 XM
(has been found in)SH
/Times-Italic SF
37251 XM
(fd)SH
/Times-Roman SF
(.)SH
44796 50 7122 23735 LH BX1
31719 24820 MT
(An attribute has been found with 2)
317 W( different)318 W
29919 25925 MT
(atomic values in the same branch of a)
197 W( disjunction.)196 W
9321 27030 MT
(Contradicting values for attribute ~s.)SH
29919 XM
(\050for example, \050\050a 1\051 \050a 2\051\051\051.)SH
44796 50 7122 27648 LH BX1
31719 28733 MT
(A branch in a disjunctive construct)
301 W( has been)302 W
9321 29838 MT
(This branch is contradictory: ~s)SH
29919 XM
(found with a contradictory value.)SH
44796 19656 50 7122 30456 BX BX1
-17953 50 29520 30456 LV BX1
7920 32935 MT
(When)SH
/Courier SF
10643 XM
(fd-sem)SH
/Times-Roman SF
14578 XM
(finds a problem)
85 W( in a grammar, it returns the path to the problem.  Paths within grammars are)84 W
6120 34312 MT
(different from paths in regular fds because of the presence of disjunctions.  Paths have the same)
41 W( syntax, except that)42 W
6120 35689 MT
(to go through an alt or ralt construct, additional information must be)
126 W( provided.  The following syntax is used to)125 W
6120 37066 MT
(denote the traversal of an fd with disjunctions:)SH
9 /Courier AF
8679 39699 MT
(PATH :=)
2700 W( { att-spec* })SH
8679 41595 MT
(ATT-SPEC :=)
540 W( symbol | alt-spec | ralt-spec | opt-spec)SH
8679 43491 MT
(ALT-SPEC :=)
540 W( \050alt <index> {<branch>}\051)SH
8679 45387 MT
(RALT-SPEC := \050ralt <index> {<branch>}\051)SH
8679 47283 MT
(OPT-SPEC :=)
540 W( \050opt <index>\051)SH
42480 10840 50 8280 48630 BX BX1
10 /Times-Roman AF
7920 51109 MT
(Both <index> and <branch> must be numbers.  The <index> information refers to the index of the alt, ralt)
78 W( or)79 W
6120 52486 MT
(opt pair within its parent node.  That is,)
121 W( given that a list of pairs can contain several alts at the same level, it is)120 W
6120 53863 MT
(necessary to distinguish between them.)
7 W( The)
265 W( <index> information gives the position of the pair in the list, with index)8 W
6120 55240 MT
(0 refering to the first pair.  If it is necessary to go)
6 W( further down an alt or ralt pair, then it is necessary to identify what)5 W
6120 56617 MT
(branch must be followed.  This information is given by the <branch> index.  Not that a specifier)14 W
/Courier SF
45106 XM
(\050alt <index>\051)14 W
/Times-Roman SF
6120 57994 MT
(without a branch index MUST necessary be the last one in a path and refers to the)
109 W( whole alt pair.  The function)108 W
/Courier SF
6120 59371 MT
(alt-gdp)SH
/Times-Roman SF
10932 XM
(is used to traverse an fd with disjunctions using these)
362 W( extended paths as input. The function)363 W
/Courier SF
6120 60748 MT
(get-error-pair)SH
/Times-Roman SF
14770 XM
(returns the first pair where)SH
/Courier SF
25628 XM
(fd-syntax)SH
/Times-Roman SF
31278 XM
(would find an error.)SH
12 /Times-Bold AF
6120 64451 MT
(15.2.3.)SH
/Times-Roman SF
9720 XM
(fd-p)SH
10 /Times-Bold AF
7920 65828 MT
(Type:)SH
/Times-Roman SF
10670 XM
(function)SH
/Times-Bold SF
6120 67205 MT
(Calling form:)SH
/Times-Roman SF
12175 XM
(\050)SH
/Courier SF
(fd-p)SH
/Times-Italic SF
15158 XM
(input-fd)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
6120 68582 MT
(Arguments:)SH
/Symbol SF
7910 70035 MT
(\267)SH
/Times-Italic SF
8620 XM
(input-fd)SH
/Times-Roman SF
12037 XM
(is an fd with no disjunctions.)SH
/Times-Bold SF
6120 71412 MT
(Description:)SH
/Times-Roman SF
11647 XM
(checks that)SH
/Times-Italic SF
16368 XM
(input-fd)SH
/Times-Roman SF
19785 XM
(is both syntactically and semantically a valid fd.)SH
ES
%%Page: 107 108
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(107)SH
8280 11486 MT
(NOTE: Do not use fd-p on grammars.)SH
12 /Times-Bold AF
8280 15189 MT
(15.2.4.)SH
/Times-Roman SF
11880 XM
(grammar-p)SH
10 /Times-Bold AF
10080 16566 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function)SH
/Times-Bold SF
8280 17943 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(grammar-p)
250 MX(&optional)SH
/Times-Italic SF
25968 XM
(fd print-messages print-warnings)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 19320 MT
(Arguments:)SH
/Symbol SF
10070 20773 MT
(\267)SH
/Courier SF
10780 XM
(fd)SH
/Times-Roman SF
12230 XM
(is a FUG. It is)SH
/Courier SF
18119 XM
(*u-grammar*)SH
/Times-Roman SF
24969 XM
(by default.)SH
/Symbol SF
10070 22531 MT
(\267)SH
/Courier SF
10780 XM
(print-messages)SH
/Times-Roman SF
19430 XM
(is a flag. It is)SH
/Courier SF
24874 XM
(T)SH
/Times-Roman SF
25724 XM
(by default.)SH
/Symbol SF
10070 24289 MT
(\267)SH
/Courier SF
10780 XM
(print-warnings)SH
/Times-Roman SF
19430 XM
(is a flag. It is)SH
/Courier SF
24874 XM
(nil)SH
/Times-Roman SF
26924 XM
(by default.)SH
/Times-Bold SF
8280 25666 MT
(Description:)SH
/Courier SF
13870 XM
(grammar-p)SH
/Times-Roman SF
19583 XM
(verifies that)63 W
/Times-Italic SF
24708 XM
(fd)SH
/Times-Roman SF
25799 XM
(is a valid grammar, both syntactically and semantically. If it is, it)
63 W( prints)62 W
8280 27043 MT
(some statistics and returns)SH
/Courier SF
19057 XM
(T)SH
/Times-Roman SF
(. Otherwise,)
250 W( it prints helpful messages and returns)SH
/Courier SF
40182 XM
(nil)SH
/Times-Roman SF
(.)SH
10080 29522 MT
(If)SH
/Times-Italic SF
10996 XM
(print-messages)SH
/Times-Roman SF
17301 XM
(is)SH
/Courier SF
18218 XM
(nil)SH
/Times-Roman SF
20268 XM
(no statistics are printed.)SH
10080 32001 MT
(If)SH
/Times-Italic SF
11033 XM
(print-warnings)SH
/Times-Roman SF
17321 XM
(is non-)37 W
/Courier SF
(nil)SH
/Times-Roman SF
22195 XM
(warnings are printed)
37 W( for all the paths encountered in the grammar.  This is useful)38 W
8280 33378 MT
(when you suspect that one path is invalid or pointing to a bad location.)SH
10080 35857 MT
(NOTE: do not use)SH
/Courier SF
17635 XM
(grammar-p)SH
/Times-Roman SF
23285 XM
(on input fds.)SH
12 /Times-Bold AF
8280 39560 MT
(15.2.5.)SH
/Times-Roman SF
11880 XM
(get-error-pair)SH
10 /Times-Bold AF
10080 40937 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function.)SH
/Times-Bold SF
8280 42314 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(get-error-pair)SH
/Times-Italic SF
23318 XM
(fd)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 43691 MT
(Arguments:)SH
/Symbol SF
10070 45144 MT
(\267)SH
/Courier SF
10780 XM
(fd)SH
/Times-Roman SF
12230 XM
(is an fd.)SH
/Times-Bold SF
8280 46521 MT
(Description:)SH
/Courier SF
14009 XM
(get-error-pair)SH
/Times-Roman SF
22861 XM
(checks the syntax of an fd.  If the syntax)
202 W( is not correct, it returns the pair)201 W
8280 47898 MT
(containing the first offending constituent of)SH
/Courier SF
25945 XM
(fd)SH
/Times-Roman SF
(.)SH
12 /Times-Bold AF
8280 51601 MT
(15.2.6.)SH
/Times-Roman SF
11880 XM
(normalize-fd)SH
10 /Times-Bold AF
10080 52978 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function.)SH
/Times-Bold SF
8280 54355 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(normalize-fd)SH
/Times-Italic SF
22118 XM
(fd)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 55732 MT
(Arguments:)SH
/Symbol SF
10070 57185 MT
(\267)SH
/Courier SF
10780 XM
(fd)SH
/Times-Roman SF
12230 XM
(is an fd.)SH
/Times-Bold SF
8280 58562 MT
(Description:)SH
/Courier SF
13973 XM
(normalize-fd)SH
/Times-Roman SF
21589 XM
(prepares an fd that can contain disjunctions to be used)
166 W( as input to the standard)167 W
8280 59939 MT
(unification procedures \050that do not accept)
7 W( disjunctions,)6 W
/Times-Italic SF
30546 XM
(i.e.)SH
/Times-Roman SF
(, all except)6 W
/Courier SF
36396 XM
(u-disjunctions)SH
/Times-Roman SF
(\051. If)262 W
/Courier SF
46813 XM
(fd)SH
/Times-Roman SF
48269 XM
(contains disjunc-)6 W
8280 61316 MT
(tions, normalize will)
203 W( return one disjunction-free fd compatible with)204 W
/Courier SF
37333 XM
(fd)SH
/Times-Roman SF
(. It)
658 W( is best understood as basically an)204 W
8280 62693 MT
(equivalent to the)
313 W( operation)312 W
/Courier SF
20473 XM
(\050u nil fd\051)312 W
/Times-Roman SF
(. If)874 W
/Courier SF
29699 XM
(fd)SH
/Times-Roman SF
31461 XM
(is not semantically correct \050it contains contradictions\051,)312 W
/Courier SF
8280 64070 MT
(normalize)SH
/Times-Roman SF
13930 XM
(will return)SH
/Courier SF
18374 XM
(:fail)SH
/Times-Roman SF
(.)SH
10080 66549 MT
(Normalize is also useful to put an fd in normal form with respect to the following constraint:)SH
ES
%%Page: 108 109
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(108)SH
9 /Courier AF
8679 11761 MT
(The fd \050\050a \050\050x 1\051\051\051 \050a \050\050y 2\051\051\051\051 is)SH
12459 13657 MT
(\050\050a \050\050x 1\051)SH
15159 14605 MT
(\050y 2\051\051\051\051)SH
8679 16501 MT
(in normal form.)SH
42480 6286 50 8280 17086 BX BX1
14 /Times-Bold AF
6120 20904 MT
(15.3. Tracing)SH
10 /Times-Roman AF
7920 22281 MT
(*****NOTE: This Section has not yet been updated for Version 5.2******)SH
7920 24760 MT
(*****Certain functions are missing*****)SH
12 /Times-Bold AF
6120 28463 MT
(15.3.1.)SH
/Times-Roman SF
9720 XM
(*all-trace-off*)SH
10 /Times-Bold AF
7920 29840 MT
(Type:)SH
/Times-Roman SF
10670 XM
(variable.)SH
/Times-Bold SF
6120 31217 MT
(Description:)SH
/Times-Roman SF
11673 XM
(The)SH
/Courier SF
13504 XM
(*all-trace-off*)SH
/Times-Roman SF
22780 XM
(variable contains a flag that is recognized by the unifier and terminates)
26 W( the)27 W
6120 32594 MT
(printing of all tracing messages. It must be placed in a valid position for a tracing flag.)SH
/Times-Bold SF
6120 33971 MT
(Standard Value:)SH
/Times-Roman SF
13454 XM
(%TRACE-OFF%)SH
12 /Times-Bold AF
6120 37674 MT
(15.3.2.)SH
/Times-Roman SF
9720 XM
(*all-trace-on*)SH
10 /Times-Bold AF
7920 39051 MT
(Type:)SH
/Times-Roman SF
10670 XM
(variable.)SH
/Times-Bold SF
6120 40428 MT
(Description:)SH
/Times-Roman SF
11802 XM
(The)SH
/Courier SF
13762 XM
(*all-trace-on*)SH
/Times-Roman SF
22567 XM
(variable contains a flag that is recognized by the unifier and undoes)
155 W( the)154 W
6120 41805 MT
(effect of the *all-trace-off* flag, that is, it reenables all tracing messages.)
30 W( It)
312 W( must be placed in a valid position for a)31 W
6120 43182 MT
(tracing flag.)SH
/Times-Bold SF
6120 44559 MT
(Standard Value:)SH
/Times-Roman SF
13454 XM
(%TRACE-ON%)SH
12 /Times-Bold AF
6120 48262 MT
(15.3.3.)SH
/Times-Roman SF
9720 XM
(*trace-determine*)SH
10 /Times-Bold AF
7920 49639 MT
(Type:)SH
/Times-Roman SF
10670 XM
(variable.)SH
/Times-Bold SF
6120 51016 MT
(Description:)SH
/Times-Roman SF
11845 XM
(The)SH
/Courier SF
13848 XM
(*trace-determine*)SH
/Times-Roman SF
24496 XM
(is a switch enabling the printing of tracing messages on the deter-)198 W
6120 52393 MT
(mination stage. It indicates which)47 W
/Courier SF
20076 XM
(TEST)SH
/Times-Roman SF
22773 XM
(expressions are evaluated.  When it is on)
47 W( and the determination stage fails)48 W
6120 53770 MT
(in the context of a)78 W
/Courier SF
13981 XM
(uni)SH
/Times-Roman SF
16109 XM
(call, then the partially)
78 W( found sentence is linearized and printed.  Cf)77 W
/Courier SF
43920 XM
(trace-determine)SH
/Times-Roman SF
6120 55147 MT
(for the user-level interface to this variable.)SH
/Times-Bold SF
6120 56524 MT
(Standard Value:)SH
/Courier SF
13454 XM
(T)SH
12 /Times-Bold AF
6120 60227 MT
(15.3.4.)SH
/Times-Roman SF
9720 XM
(*trace-marker*)SH
10 /Times-Bold AF
7920 61604 MT
(Type:)SH
/Times-Roman SF
10670 XM
(variable.)SH
/Times-Bold SF
6120 62981 MT
(Description:)SH
/Times-Roman SF
11740 XM
(The)SH
/Courier SF
13638 XM
(*trace-marker*)SH
/Times-Roman SF
22382 XM
(variable contains a character. It is used to determine valid tracing flags: if)94 W
6120 64358 MT
(the first character of the name of a symbol is *trace-marker*, the symbol is a valid tracing-flag.)SH
/Times-Bold SF
6120 65735 MT
(Standard Value:)SH
/Courier SF
13454 XM
(#\134%)SH
ES
%%Page: 109 110
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(109)SH
12 /Times-Bold AF
8280 11623 MT
(15.3.5.)SH
/Times-Roman SF
11880 XM
(*top*)SH
10 /Times-Bold AF
10080 13000 MT
(Type:)SH
/Times-Roman SF
12830 XM
(variable.)SH
/Times-Bold SF
8280 14377 MT
(Description:)SH
/Times-Roman SF
14048 XM
(The)SH
/Courier SF
16094 XM
(*top*)SH
/Times-Roman SF
19585 XM
(variable is a switch enabling the printing of extensive)
241 W( debugging messages on the)240 W
8280 15754 MT
(backtracking behavior of the unifier. Should be used for development only.)SH
/Times-Bold SF
8280 17131 MT
(Standard Value:)SH
/Courier SF
15614 XM
(nil)SH
12 /Times-Bold AF
8280 20834 MT
(15.3.6.)SH
/Times-Roman SF
11880 XM
(all-tracing-flags)SH
10 /Times-Bold AF
10080 22211 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function)SH
/Times-Bold SF
8280 23588 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(all-tracing-flags &optional)SH
/Times-Italic SF
31118 XM
(grammar)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 24965 MT
(Arguments:)SH
/Symbol SF
10070 26418 MT
(\267)SH
/Times-Italic SF
10780 XM
(grammar)SH
/Times-Roman SF
14752 XM
(is a FUG.  It must be recognized by)SH
/Courier SF
29250 XM
(grammar-p)SH
/Times-Roman SF
(. By)
250 W( default, it is)SH
/Courier SF
41817 XM
(*u-grammar*)SH
/Times-Roman SF
(.)SH
/Times-Bold SF
8280 27795 MT
(Description:)SH
/Courier SF
13857 XM
(all-tracing-flags)SH
/Times-Roman SF
24357 XM
(returns a list of all the tracing flags defined in)50 W
/Times-Italic SF
43354 XM
(grammar)SH
/Times-Roman SF
(, in the order)
50 W( where)51 W
8280 29172 MT
(they are defined in the grammar.)SH
12 /Times-Bold AF
8280 32875 MT
(15.3.7.)SH
/Times-Roman SF
11880 XM
(internal-trace-off)SH
10 /Times-Bold AF
10080 34252 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function)SH
/Times-Bold SF
8280 35629 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(internal-trace-off)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 37006 MT
(Description:)SH
/Courier SF
13831 XM
(internal-trace-off)SH
/Times-Roman SF
24905 XM
(turns off the tracing of)
24 W( internal debugging information. Initially, no debug-)23 W
8280 38383 MT
(ging information is printed.)SH
12 /Times-Bold AF
8280 42086 MT
(15.3.8.)SH
/Times-Roman SF
11880 XM
(internal-trace-on)SH
10 /Times-Bold AF
10080 43463 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function)SH
/Times-Bold SF
8280 44840 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(internal-trace-on)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 46217 MT
(Description:)SH
/Courier SF
13894 XM
(internal-trace-on)SH
/Times-Roman SF
24431 XM
(turns on the tracing of internal debugging)
87 W( information. Initially, no debug-)88 W
8280 47594 MT
(ging information is printed. Should be used for development only.)SH
12 /Times-Bold AF
8280 51297 MT
(15.3.9.)SH
/Times-Roman SF
11880 XM
(trace-disable)SH
10 /Times-Bold AF
10080 52674 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function)SH
/Times-Bold SF
8280 54051 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(trace-disable)SH
/Times-Italic SF
22718 XM
(flag)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 55428 MT
(Arguments:)SH
/Symbol SF
10070 56881 MT
(\267)SH
/Courier SF
10780 XM
(flag)SH
/Times-Roman SF
13430 XM
(is a tracing flag.  A tracing flag must be an element of the result of)SH
/Courier SF
40286 XM
(all-tracing-flags)SH
/Times-Roman SF
(.)SH
/Times-Bold SF
8280 58258 MT
(Description:)SH
/Courier SF
13807 XM
(trace-disable)SH
/Times-Roman SF
21857 XM
(disables the tracing flag)SH
/Times-Italic SF
31633 XM
(flag)SH
/Times-Roman SF
(. Initially,)
250 W( all tracing flags are enabled.)SH
12 /Times-Bold AF
8280 61961 MT
(15.3.10.)SH
/Times-Roman SF
12480 XM
(trace-disable-all)SH
10 /Times-Bold AF
10080 63338 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function)SH
/Times-Bold SF
8280 64715 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(trace-disable-all)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 66092 MT
(Description:)SH
/Courier SF
13807 XM
(trace-disable-all)SH
/Times-Roman SF
24257 XM
(disables all tracing flags.  Initially, all tracing flags are enabled.)SH
ES
%%Page: 110 111
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(110)SH
12 /Times-Bold AF
6120 11623 MT
(15.3.11.)SH
/Times-Roman SF
10320 XM
(trace-disable-match)SH
10 /Times-Bold AF
7920 13000 MT
(Type:)SH
/Times-Roman SF
10670 XM
(function)SH
/Times-Bold SF
6120 14377 MT
(Calling form:)SH
/Times-Roman SF
12175 XM
(\050)SH
/Courier SF
(trace-disable-match)SH
/Times-Italic SF
24158 XM
(string)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
6120 15754 MT
(Arguments:)SH
/Symbol SF
7910 17207 MT
(\267)SH
/Times-Italic SF
8620 XM
(string)SH
/Times-Roman SF
11204 XM
(is a string.)SH
/Times-Bold SF
6120 18584 MT
(Description:)SH
/Courier SF
11864 XM
(trace-disable-match)SH
/Times-Roman SF
23731 XM
(disables all tracing flags whose)
217 W( names contain)216 W
/Times-Italic SF
43994 XM
(string)SH
/Times-Roman SF
46794 XM
(as a substring.)216 W
6120 19961 MT
(Initially, all tracing flags are enabled.)SH
12 /Times-Bold AF
6120 23664 MT
(15.3.12.)SH
/Times-Roman SF
10320 XM
(trace-enable)SH
10 /Times-Bold AF
7920 25041 MT
(Type:)SH
/Times-Roman SF
10670 XM
(function)SH
/Times-Bold SF
6120 26418 MT
(Calling form:)SH
/Times-Roman SF
12175 XM
(\050)SH
/Courier SF
(trace-enable)SH
/Times-Italic SF
19958 XM
(flag)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
6120 27795 MT
(Arguments:)SH
/Symbol SF
7910 29248 MT
(\267)SH
/Courier SF
8620 XM
(flag)SH
/Times-Roman SF
11270 XM
(is a tracing flag.  A tracing flag must be an element of the result of)SH
/Courier SF
38126 XM
(all-tracing-flags)SH
/Times-Roman SF
(.)SH
/Times-Bold SF
6120 30625 MT
(Description:)SH
/Courier SF
11647 XM
(trace-enable)SH
/Times-Roman SF
19097 XM
(enables the tracing flag)SH
/Times-Italic SF
28650 XM
(flag)SH
/Times-Roman SF
(. Initially,)
250 W( all tracing flags are enabled.)SH
12 /Times-Bold AF
6120 34328 MT
(15.3.13.)SH
/Times-Roman SF
10320 XM
(trace-enable-all)SH
10 /Times-Bold AF
7920 35705 MT
(Type:)SH
/Times-Roman SF
10670 XM
(function)SH
/Times-Bold SF
6120 37082 MT
(Calling form:)SH
/Times-Roman SF
12175 XM
(\050)SH
/Courier SF
(trace-enable-all)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
6120 38459 MT
(Description:)SH
/Courier SF
11647 XM
(trace-enable-all)SH
/Times-Roman SF
21497 XM
(enables all tracing flags.  Initially, all tracing flags are enabled.)SH
12 /Times-Bold AF
6120 42162 MT
(15.3.14.)SH
/Times-Roman SF
10320 XM
(trace-enable-match)SH
10 /Times-Bold AF
7920 43539 MT
(Type:)SH
/Times-Roman SF
10670 XM
(function)SH
/Times-Bold SF
6120 44916 MT
(Calling form:)SH
/Times-Roman SF
12175 XM
(\050)SH
/Courier SF
(trace-enable-match)SH
/Times-Italic SF
23558 XM
(string)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
6120 46293 MT
(Arguments:)SH
/Symbol SF
7910 47746 MT
(\267)SH
/Times-Italic SF
8620 XM
(string)SH
/Times-Roman SF
11204 XM
(is a string.)SH
/Times-Bold SF
6120 49123 MT
(Description:)SH
/Courier SF
11772 XM
(trace-enable-match)SH
/Times-Roman SF
22947 XM
(enables all tracing flags whose names contain)125 W
/Times-Italic SF
42346 XM
(string)SH
/Times-Roman SF
45056 XM
(as a substring.  In-)126 W
6120 50500 MT
(itially, all tracing flags are enabled.)SH
12 /Times-Bold AF
6120 54203 MT
(15.3.15.)SH
/Times-Roman SF
10320 XM
(trace-off)SH
10 /Times-Bold AF
7920 55580 MT
(Type:)SH
/Times-Roman SF
10670 XM
(function)SH
/Times-Bold SF
6120 56957 MT
(Calling form:)SH
/Times-Roman SF
12175 XM
(\050)SH
/Courier SF
(trace-off)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
6120 58334 MT
(Description:)SH
/Courier SF
11698 XM
(trace-off)SH
/Times-Roman SF
17399 XM
(turns off tracing.  If)
51 W( no argument is provided, all tracing is turned off.  Initially, tracing)50 W
6120 59711 MT
(is off.)SH
12 /Times-Bold AF
6120 63414 MT
(15.3.16.)SH
/Times-Roman SF
10320 XM
(trace-on)SH
10 /Times-Bold AF
7920 64791 MT
(Type:)SH
/Times-Roman SF
10670 XM
(function)SH
/Times-Bold SF
6120 66168 MT
(Calling form:)SH
/Times-Roman SF
12175 XM
(\050)SH
/Courier SF
(trace-on)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
6120 67545 MT
(Description:)SH
/Courier SF
11647 XM
(trace-on)SH
/Times-Roman SF
16697 XM
(turns on tracing.)SH
7920 70024 MT
(Initially, tracing is off.)SH
ES
%%Page: 111 112
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(111)SH
12 /Times-Bold AF
8280 11623 MT
(15.3.17.)SH
/Times-Roman SF
12480 XM
(trace-determine)SH
10 /Times-Bold AF
10080 13000 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function)SH
/Times-Bold SF
8280 14377 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(trace-determine &key)SH
/Times-Italic SF
26918 XM
(on)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 15754 MT
(Description:)SH
/Courier SF
13807 XM
(trace-determine)SH
/Times-Roman SF
23057 XM
(turns on and off tracing for the determination stage.)SH
10080 18233 MT
(When tracing is on for the determination stage,)
19 W( a message is printed indicating the location of the)20 W
/Courier SF
49574 XM
(any)SH
/Times-Roman SF
51644 XM
(found or)20 W
8280 19610 MT
(the failed)18 W
/Courier SF
12315 XM
(test)SH
/Times-Roman SF
(. In)
286 W( addition, if the top-level function called is)18 W
/Courier SF
33782 XM
(uni)SH
/Times-Roman SF
(, the partially unified fd)
18 W( is linearized and printed)17 W
8280 20987 MT
(to show the progression of the unifier.)SH
12 /Times-Bold AF
8280 24690 MT
(15.3.18.)SH
/Times-Roman SF
12480 XM
(trace-bk-class)SH
10 /Times-Bold AF
10080 26067 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function)SH
/Times-Bold SF
8280 27444 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(trace-bk-class &optional)SH
/Times-Italic SF
29318 XM
(on)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 28821 MT
(Description:)SH
/Courier SF
13807 XM
(trace-bk-class)SH
/Times-Roman SF
22457 XM
(turns on and off tracing of the special bk-class backtracking behavior.)SH
10080 31300 MT
(When tracing is on for)
115 W( bk-class, a message is printed whenever a path of a bk-class category is caught by a)116 W
8280 32677 MT
(backtracking point of the corresponding class. In addition, the number of frames that have been)
82 W( skipped thanks to)81 W
8280 34054 MT
(the bk-class specification is printed.  Examples of trace are provided in the section on bk-class.)SH
12 /Times-Bold AF
8280 37757 MT
(15.3.19.)SH
/Times-Roman SF
12480 XM
(trace-category)SH
10 /Times-Bold AF
10080 39134 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function)SH
/Times-Bold SF
8280 40511 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(trace-category)SH
/Times-Italic SF
23318 XM
(cat)SH
/Courier SF
24790 XM
(&optional)SH
/Times-Italic SF
30440 XM
(on-off)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 41888 MT
(Arguments:)SH
/Courier SF
13879 XM
(cat)SH
/Times-Roman SF
16168 XM
(can be either a symbol \050the name of a category\051, or the symbol)239 W
/Courier SF
44547 XM
(:all)SH
/Times-Roman SF
47436 XM
(specifying that all)239 W
8280 43265 MT
(categories are to be traced, or a list)
7 W( of symbols \050names of categories\051.  If)6 W
/Courier SF
37508 XM
(on-off)SH
/Times-Roman SF
41364 XM
(is non-nil, the specified categories)6 W
8280 44642 MT
(are traced, if it is)SH
/Courier SF
15278 XM
(nil)SH
/Times-Roman SF
(, they are untraced.)SH
/Times-Bold SF
8280 46019 MT
(Description:)SH
/Courier SF
13807 XM
(trace-category)SH
/Times-Roman SF
22457 XM
(turns on and off tracing for all or certain categories.)SH
10080 48498 MT
(When a category is traced, the unifier)
10 W( emits a message each time it starts unifying a constituent of that category.)11 W
8280 49875 MT
(When :all is)
69 W( used, all categories are traced.  This is particularly useful to identify in what constituent the unifier is)68 W
8280 51252 MT
(failing and to follow the top-down breadth-first traversal of the constituents during)
38 W( unification.  A usefule sequence)39 W
8280 52629 MT
(of calls is:)SH
9 /Courier AF
10839 55262 MT
(\050trace-on\051)SH
10839 56210 MT
(\050trace-disable-all\051)SH
10839 57158 MT
(\050trace-category :all\051)SH
42480 5152 50 10440 58505 BX BX1
10 /Times-Roman AF
10080 60984 MT
(This sequence will trace the progression of the unifier at the level of the constituents, as in)
181 W( the following)180 W
8280 62361 MT
(example:)SH
ES
%%Page: 112 113
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(112)SH
9 /Courier AF
8679 12709 MT
(> \050uni a3\051)SH
8679 13657 MT
(>STARTING CAT DISCOURSE-SEGMENT AT LEVEL {})SH
8679 15553 MT
(>STARTING CAT UTTERANCE AT LEVEL {DIRECTIVE})SH
8679 17449 MT
(>STARTING CAT CLAUSE AT LEVEL {DIRECTIVE PC})SH
8679 19345 MT
(>STARTING CAT NP AT LEVEL {DIRECTIVE PC OBJECT})SH
8679 21241 MT
(>STARTING CAT NP AT LEVEL {DIRECTIVE PC IOBJECT})SH
8679 23137 MT
(>STARTING CAT NP AT LEVEL {DIRECTIVE PC SUBJECT})SH
8679 25033 MT
(>STARTING CAT LEXICAL-ENTRY AT LEVEL {DIRECTIVE PC VERB-CONCEPT})SH
8679 26929 MT
(>STARTING CAT NP AT LEVEL {DIRECTIVE PC OBJECT})SH
8679 28825 MT
(>STARTING CAT NP AT LEVEL {DIRECTIVE PC SUBJECT})SH
8679 30721 MT
(>STARTING CAT NP AT LEVEL {DIRECTIVE PC BENEF})SH
8679 32617 MT
(>STARTING CAT LEXICAL-ENTRY AT LEVEL {DIRECTIVE PC VERB-CONCEPT})SH
8679 34513 MT
(>STARTING CAT VERB-GROUP AT LEVEL {DIRECTIVE PC VERB})SH
8679 36409 MT
(>STARTING CAT PP AT LEVEL {DIRECTIVE PC DATIVE})SH
8679 38305 MT
(>STARTING CAT DET AT LEVEL {DIRECTIVE PC OBJECT DETERMINER})SH
8679 41149 MT
([Used 108 backtracking points - 57 wrong branches - 103 undos])SH
8679 42097 MT
(John takes a book from Mary.)SH
42480 32644 50 8280 43444 BX BX1
14 /Times-Bold AF
6120 47262 MT
(15.4. Complexity)SH
12 SS 
6120 50965 MT
(15.4.1.)SH
/Times-Roman SF
9720 XM
(avg-complexity)SH
10 /Times-Bold AF
7920 52342 MT
(Type:)SH
/Times-Roman SF
10670 XM
(function)SH
/Times-Bold SF
6120 53719 MT
(Calling form:)SH
/Times-Roman SF
12175 XM
(\050)SH
/Courier SF
(avg-complexity &optional)SH
/Times-Italic SF
27158 XM
(grammar with-index rough-avg)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
6120 55096 MT
(Arguments:)SH
/Symbol SF
7910 56549 MT
(\267)SH
/Courier SF
8620 XM
(grammar)SH
/Times-Roman SF
13070 XM
(is a grammar. It must be recognized by)SH
/Courier SF
28928 XM
(grammar-p)SH
/Times-Roman SF
(. It)
250 W( is)SH
/Courier SF
36856 XM
(*u-grammar*)SH
/Times-Roman SF
43706 XM
(by default.)SH
/Symbol SF
7910 58307 MT
(\267)SH
/Courier SF
8620 XM
(with-index)SH
/Times-Roman SF
14870 XM
(is a flag. It is)SH
/Courier SF
20314 XM
(T)SH
/Times-Roman SF
21164 XM
(by default.)SH
/Symbol SF
7910 60065 MT
(\267)SH
/Courier SF
8620 XM
(rough-avg)SH
/Times-Roman SF
14270 XM
(is a flag. It is)SH
/Courier SF
19714 XM
(nil)SH
/Times-Roman SF
21764 XM
(by default.)SH
/Times-Bold SF
6120 61442 MT
(Description:)SH
/Courier SF
11674 XM
(avg-complexity)SH
/Times-Roman SF
20351 XM
(computes a measure of the average complexity of a grammar. It)
27 W( tries to compute)28 W
6120 62819 MT
(an "average" number of branches tried when the input to unification contains no constraint.)SH
7920 65298 MT
(When)SH
/Times-Italic SF
10582 XM
(with-index)SH
/Times-Roman SF
15078 XM
(is)SH
/Courier SF
16019 XM
(T)SH
/Times-Roman SF
(, all indexed)
24 W( alts are considered as single branches, when it is)23 W
/Courier SF
41670 XM
(nil)SH
/Times-Roman SF
(, they are considered as)23 W
6120 66675 MT
(regular)SH
/Courier SF
9202 XM
(alt)SH
/Times-Roman SF
(s.)SH
7920 69154 MT
(When)SH
/Times-Italic SF
10623 XM
(rough-avg)SH
/Times-Roman SF
15104 XM
(is)SH
/Courier SF
16086 XM
(nil)SH
/Times-Roman SF
(, the average of)
65 W( an)66 W
/Courier SF
25821 XM
(alt)SH
/Times-Roman SF
27937 XM
(is the sum of the complexity of the first half of the branches.)66 W
6120 70531 MT
(When it is)SH
/Courier SF
10481 XM
(T)SH
/Times-Roman SF
(, the average is half the sum of the complexity of all branches.)SH
ES
%%Page: 113 114
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(113)SH
12 /Times-Bold AF
8280 11623 MT
(15.4.2.)SH
/Times-Roman SF
11880 XM
(complexity)SH
10 /Times-Bold AF
10080 13000 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function)SH
/Times-Bold SF
8280 14377 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(complexity &optional)SH
/Times-Italic SF
26918 XM
(grammar with-index)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 15754 MT
(Arguments:)SH
/Symbol SF
10070 17207 MT
(\267)SH
/Courier SF
10780 XM
(grammar)SH
/Times-Roman SF
15230 XM
(is a grammar. It must be recognized by)SH
/Courier SF
31088 XM
(grammar-p)SH
/Times-Roman SF
(. It)
250 W( is)SH
/Courier SF
39016 XM
(*u-grammar*)SH
/Times-Roman SF
45866 XM
(by default.)SH
/Symbol SF
10070 18965 MT
(\267)SH
/Courier SF
10780 XM
(with-index)SH
/Times-Roman SF
17030 XM
(is a flag. It is)SH
/Courier SF
22474 XM
(T)SH
/Times-Roman SF
23324 XM
(by default.)SH
/Times-Bold SF
8280 20342 MT
(Description:)SH
/Courier SF
13822 XM
(complexity)SH
/Times-Roman SF
20087 XM
(computes a measure of the complexity of a grammar. It tries to compute)
15 W( the worst case)14 W
8280 21719 MT
(number of branches tried when the input to)
21 W( unification contains no constraint. The number it returns is equivalent to)22 W
8280 23096 MT
(the number of branches the grammar would have in disjunctive normal form.)SH
10080 25575 MT
(When)SH
/Times-Italic SF
12742 XM
(with-index)SH
/Times-Roman SF
17238 XM
(is)SH
/Courier SF
18179 XM
(T)SH
/Times-Roman SF
(, all indexed)
24 W( alts are considered as single branches, when it is)23 W
/Courier SF
43830 XM
(nil)SH
/Times-Roman SF
(, they are considered as)23 W
8280 26952 MT
(regular)SH
/Courier SF
11362 XM
(alt)SH
/Times-Roman SF
(s.)SH
14 /Times-Bold AF
8280 30770 MT
(15.5. Manipulation of the Dictionary)SH
12 SS 
8280 34473 MT
(15.5.1.)SH
/Times-Roman SF
11880 XM
(*dictionary*)SH
10 /Times-Bold AF
10080 35850 MT
(Type:)SH
/Times-Roman SF
12830 XM
(variable)SH
/Times-Bold SF
8280 37227 MT
(Description:)SH
/Times-Roman SF
13912 XM
(The)SH
/Courier SF
15822 XM
(*dictionary*)SH
/Times-Roman SF
23377 XM
(variable is a hash-table containing different types of entries. Each entry con-)105 W
8280 38604 MT
(tains information on irregular morphological words.)SH
10080 41083 MT
(The current dictionary contains entries for verbs, nouns and pronouns. It is defined in file LEXICON.L)SH
10080 43562 MT
(The entries contain the following properties:)SH
/Symbol SF
10070 45015 MT
(\267)SH
/Times-Roman SF
10780 XM
(verb : present-third-person-singular past present-participle past-participle)SH
/Symbol SF
10070 46773 MT
(\267)SH
/Times-Roman SF
10780 XM
(noun : plural)SH
/Symbol SF
10070 48531 MT
(\267)SH
/Times-Roman SF
10780 XM
(pronoun : subjective objective possessive reflexive.)SH
12 /Times-Bold AF
8280 52234 MT
(15.5.2.)SH
/Times-Roman SF
11880 XM
(lexfetch)SH
10 /Times-Bold AF
10080 53611 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function)SH
/Times-Bold SF
8280 54988 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(lexfetch)SH
/Times-Italic SF
19718 XM
(key property)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 56365 MT
(Arguments:)SH
/Symbol SF
10070 57818 MT
(\267)SH
/Times-Italic SF
10780 XM
(key)SH
/Times-Roman SF
12362 XM
(is a non-inflected ``root'' form of a word. It must be a string.)SH
/Symbol SF
10070 59576 MT
(\267)SH
/Times-Italic SF
10780 XM
(property)SH
/Times-Roman SF
14474 XM
(is one of the properties defined in *dictionary* for the part-of-speech of the word.)SH
/Times-Bold SF
8280 60953 MT
(Description:)SH
/Courier SF
14245 XM
(lexfetch)SH
/Times-Roman SF
19389 XM
(fetches the inflected form of the)
94 W( word)93 W
/Times-Italic SF
35402 XM
(key)SH
/Times-Roman SF
37077 XM
(from the hash-table)93 W
/Courier SF
45382 XM
(*dictionary*.)SH
/Times-Roman SF
53525 XM
(The)SH
8280 62330 MT
(properties accessible are those defined in)SH
/Courier SF
24942 XM
(*dictionary*)SH
/Times-Roman SF
(.)SH
12 /Times-Bold AF
8280 66033 MT
(15.5.3.)SH
/Times-Roman SF
11880 XM
(lexstore)SH
10 /Times-Bold AF
10080 67410 MT
(Type:)SH
/Times-Roman SF
12830 XM
(function)SH
/Times-Bold SF
8280 68787 MT
(Calling form:)SH
/Times-Roman SF
14335 XM
(\050)SH
/Courier SF
(lexstore)SH
/Times-Italic SF
19718 XM
(key property value)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 70164 MT
(Arguments:)SH
/Symbol SF
10070 71617 MT
(\267)SH
/Times-Italic SF
10780 XM
(key)SH
/Times-Roman SF
12362 XM
(is a non-inflected ``root'' form of a word. It must be a string.)SH
ES
%%Page: 114 115
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(114)SH
/Symbol SF
7910 11600 MT
(\267)SH
/Times-Italic SF
8620 XM
(property)SH
/Times-Roman SF
12314 XM
(is one of the properties defined in *dictionary* for the part-of-speech of the word.)SH
/Symbol SF
7910 13358 MT
(\267)SH
/Times-Italic SF
8620 XM
(value)SH
/Times-Roman SF
11036 XM
(is the inflected form of)SH
/Times-Italic SF
20451 XM
(key)SH
/Times-Roman SF
22033 XM
(for)SH
/Times-Italic SF
23449 XM
(property)SH
/Times-Roman SF
(. It must be a string.)SH
/Times-Bold SF
6120 14735 MT
(description:)SH
/Courier SF
11833 XM
(lexstore)SH
/Times-Roman SF
16934 XM
(stores the inflected form)51 W
/Times-Italic SF
27136 XM
(value)SH
/Times-Roman SF
29603 XM
(of the word)51 W
/Times-Italic SF
34616 XM
(key)SH
/Times-Roman SF
36249 XM
(in the hash-table)51 W
/Courier SF
43263 XM
(*dictionary*.)SH
/Times-Roman SF
51365 XM
(The)SH
6120 16112 MT
(properties accessible are those defined in)SH
/Courier SF
22782 XM
(*dictionary*)SH
/Times-Roman SF
(.)SH
14 /Times-Bold AF
6120 19930 MT
(15.6. Linearization and Morphology)SH
12 SS 
6120 23633 MT
(15.6.1.)SH
/Times-Roman SF
9720 XM
(call-linearizer)SH
10 /Times-Bold AF
7920 25010 MT
(type:)SH
/Times-Roman SF
10336 XM
(function)SH
/Times-Bold SF
6120 26387 MT
(calling form:)SH
/Times-Roman SF
11897 XM
(\050)SH
/Courier SF
(call-linearizer)SH
/Times-Italic SF
21480 XM
(fd)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
6120 27764 MT
(arguments:)SH
/Symbol SF
7910 29217 MT
(\267)SH
/Times-Italic SF
8620 XM
(fd)SH
/Times-Roman SF
9648 XM
(is a unified determined total fd. It must be accepted by)SH
/Courier SF
31700 XM
(fd-p)SH
/Times-Roman SF
(.)SH
/Times-Bold SF
6120 30594 MT
(description:)SH
/Courier SF
11583 XM
(call-linearizer)SH
/Times-Roman SF
20935 XM
(takes a complete determined fd in input and returns a string corresponding to)101 W
6120 31971 MT
(the linearization of the fd.)SH
12 /Times-Bold AF
6120 35674 MT
(15.6.2.)SH
/Times-Roman SF
9720 XM
(gap)SH
10 /Times-Bold AF
7920 37051 MT
(type:)SH
/Times-Roman SF
10336 XM
(feature.)SH
/Times-Bold SF
6120 38428 MT
(description:)SH
/Times-Roman SF
11573 XM
(if a constituent contains the feature gap, it is)
92 W( not realized in the surface \050it is a gap, still holding the)93 W
6120 39805 MT
(place of an invisible constituent in the structure\051.  It is used for implementing long-distance dependencies.)SH
12 /Times-Bold AF
6120 43508 MT
(15.6.3.)SH
/Times-Roman SF
9720 XM
(morphology-help)SH
10 /Times-Bold AF
7920 44885 MT
(type:)SH
/Times-Roman SF
10336 XM
(function.)SH
/Times-Bold SF
6120 46262 MT
(calling form)SH
/Times-Roman SF
(:)SH
/Courier SF
11842 XM
(\050morphology-help\051)SH
/Times-Bold SF
6120 47639 MT
(description:)SH
/Times-Roman SF
11481 XM
(gives on-line help on what the morphology component can do.)SH
14 /Times-Bold AF
6120 51457 MT
(15.7. Manipulation of FDs as Data-structures)SH
12 SS 
6120 55160 MT
(15.7.1.)SH
/Times-Roman SF
9720 XM
(fd-intersection)SH
10 /Times-Bold AF
7920 56537 MT
(type:)SH
/Times-Roman SF
10336 XM
(function)SH
/Times-Bold SF
6120 57914 MT
(calling form:)SH
/Times-Roman SF
11897 XM
(\050)SH
/Courier SF
(fd-intersection)SH
/Times-Italic SF
21480 XM
(fd1 fd2)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
6120 59291 MT
(arguments:)SH
/Symbol SF
7910 60744 MT
(\267)SH
/Times-Italic SF
8620 XM
(fd1)SH
/Times-Roman SF
10182 XM
(and)SH
/Times-Italic SF
11910 XM
(fd2)SH
/Times-Roman SF
13472 XM
(are valid fds \050recognized by)34 W
/Courier SF
25055 XM
(fd-p)SH
/Times-Roman SF
(\051. They represent lists as fds, using constituents)34 W
/Courier SF
46892 XM
(car)SH
/Times-Roman SF
48976 XM
(and)SH
/Courier SF
8620 61849 MT
(cdr)SH
/Times-Roman SF
(, and are terminated by a)SH
/Courier SF
20556 XM
(\050cdr none\051)SH
/Times-Roman SF
(.)SH
/Times-Bold SF
6120 63226 MT
(description:)SH
/Courier SF
11548 XM
(fd-intersection)SH
/Times-Roman SF
20865 XM
(computes the intersection of two lists represented)
67 W( as fds, and returns the result)68 W
6120 64603 MT
(as a regular lisp list.)SH
ES
%%Page: 115 116
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(115)SH
12 /Times-Bold AF
8280 11623 MT
(15.7.2.)SH
/Times-Roman SF
11880 XM
(fd-member)SH
10 /Times-Bold AF
10080 13000 MT
(type:)SH
/Times-Roman SF
12496 XM
(function)SH
/Times-Bold SF
8280 14377 MT
(calling form:)SH
/Times-Roman SF
14057 XM
(\050)SH
/Courier SF
(fd-member)SH
/Times-Italic SF
20040 XM
(elt fdlist)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 15754 MT
(arguments:)SH
/Symbol SF
10070 17207 MT
(\267)SH
/Times-Italic SF
10780 XM
(elt)SH
/Times-Roman SF
12030 XM
(is any value acceptable as a value to an \050attribute value\051 pair.)SH
/Symbol SF
10070 18965 MT
(\267)SH
/Times-Italic SF
10780 XM
(fdlist)SH
/Times-Roman SF
13083 XM
(is a)
52 W( valid fd \050recognized by)51 W
/Courier SF
24554 XM
(fd-p)SH
/Times-Roman SF
(\051. It represents a list as an fd, using constituents)51 W
/Courier SF
46684 XM
(car)SH
/Times-Roman SF
48785 XM
(and)SH
/Courier SF
50530 XM
(cdr)SH
/Times-Roman SF
(,)SH
10780 20070 MT
(and is terminated by a)SH
/Courier SF
19862 XM
(\050cdr none\051)SH
/Times-Roman SF
(.)SH
/Times-Bold SF
8280 21447 MT
(description:)SH
/Courier SF
13747 XM
(fd-member)SH
/Times-Roman SF
19503 XM
(works as the lisp function)106 W
/Courier SF
30560 XM
(member)SH
/Times-Roman SF
34517 XM
(but on a list represented by an fd. It returns a list)107 W
8280 22824 MT
(represented by an fd.)SH
12 /Times-Bold AF
8280 26527 MT
(15.7.3.)SH
/Times-Roman SF
11880 XM
(fd-to-list)SH
10 /Times-Bold AF
10080 27904 MT
(type:)SH
/Times-Roman SF
12496 XM
(function)SH
/Times-Bold SF
8280 29281 MT
(calling form:)SH
/Times-Roman SF
14057 XM
(\050)SH
/Courier SF
(fd-to-list)SH
/Times-Italic SF
20640 XM
(fdlist)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 30658 MT
(arguments:)SH
/Symbol SF
10070 32111 MT
(\267)SH
/Times-Italic SF
10780 XM
(fdlist)SH
/Times-Roman SF
13083 XM
(is a)
52 W( valid fd \050recognized by)51 W
/Courier SF
24554 XM
(fd-p)SH
/Times-Roman SF
(\051. It represents a list as an fd, using constituents)51 W
/Courier SF
46684 XM
(car)SH
/Times-Roman SF
48785 XM
(and)SH
/Courier SF
50530 XM
(cdr)SH
/Times-Roman SF
(,)SH
10780 33216 MT
(and is terminated by a)SH
/Courier SF
19862 XM
(\050cdr none\051)SH
/Times-Roman SF
(.)SH
/Times-Bold SF
8280 34593 MT
(description:)SH
/Courier SF
13641 XM
(fd-to-list)SH
/Times-Roman SF
19891 XM
(converts a list from an fd representation to a lisp representation.)SH
12 /Times-Bold AF
8280 38296 MT
(15.7.4.)SH
/Times-Roman SF
11880 XM
(gdp)SH
10 /Times-Bold AF
10080 39673 MT
(type:)SH
/Times-Roman SF
12496 XM
(function)SH
/Times-Bold SF
8280 41050 MT
(calling form:)SH
/Times-Roman SF
14057 XM
(\050)SH
/Courier SF
(gdp)SH
/Times-Italic SF
16440 XM
(fd path)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 42427 MT
(arguments:)SH
/Symbol SF
10070 43880 MT
(\267)SH
/Times-Italic SF
10780 XM
(fd)SH
/Times-Roman SF
11808 XM
(is a valid fd \050recognized by)SH
/Courier SF
22972 XM
(fd-p)SH
/Times-Roman SF
(\051.)SH
/Symbol SF
10070 45638 MT
(\267)SH
/Times-Italic SF
10780 XM
(path)SH
/Times-Roman SF
12808 XM
(is a valid path \050that is a flat list of constituent names, starting with 0 or more ^\051)SH
/Times-Bold SF
8280 47015 MT
(description:)SH
/Courier SF
13756 XM
(gdp)SH
/Times-Roman SF
15921 XM
(goes down)
115 W( the path)116 W
/Times-Italic SF
24383 XM
(path)SH
/Times-Roman SF
26527 XM
(\050hence its name: godownpath\051 and returns the fd found at the end of)116 W
/Times-Italic SF
8280 48392 MT
(path)SH
/Times-Roman SF
(. It is the only function that should be used to access sub-parts of an fd.)SH
/Courier SF
38721 XM
(gdp)SH
/Times-Roman SF
40771 XM
(always returns a valid fd.)SH
2777 50 40771 48592 UL
/Courier SF
10080 50871 MT
(gdp)SH
/Times-Roman SF
12175 XM
(works only if the special variable *input* is accessible and bound to the total fd containing)45 W
/Times-Italic SF
49502 XM
(fd)SH
/Times-Roman SF
(. In)
340 W( normal)44 W
8280 52248 MT
(environments, the function)SH
/Courier SF
19279 XM
(top-gdp)SH
/Times-Roman SF
23729 XM
(should be used instead.)SH
10080 54727 MT
(if)SH
/Times-Italic SF
10941 XM
(path)SH
/Times-Roman SF
12969 XM
(leads to a non-existent sub-fd,)SH
/Courier SF
25245 XM
(gdp)SH
/Times-Roman SF
27295 XM
(returns:)SH
/Symbol SF
10070 56180 MT
(\267)SH
/Courier SF
10780 XM
(none)SH
/Times-Roman SF
(: if)
50 W( the fd cannot be extended to include such a sub-fd \050that's when we meet an atom on the way)51 W
10780 57285 MT
(down\051)SH
/Symbol SF
10070 59043 MT
(\267)SH
/Courier SF
10780 XM
(any)SH
/Times-Roman SF
12855 XM
(: if the fd must be extended to include such a sub-fd \050and exactly this sub-fd, that is only when the)24 W
10780 60148 MT
(value is any\051)SH
/Symbol SF
10070 61906 MT
(\267)SH
/Courier SF
10780 XM
(nil)SH
/Times-Roman SF
12830 XM
(: otherwise \050that is, an unrestricted fd\051.)SH
12 /Times-Bold AF
8280 65609 MT
(15.7.5.)SH
/Times-Roman SF
11880 XM
(gdpp)SH
10 /Times-Bold AF
10080 66986 MT
(type:)SH
/Times-Roman SF
12496 XM
(function)SH
/Times-Bold SF
8280 68363 MT
(calling form:)SH
/Times-Roman SF
14057 XM
(\050)SH
/Courier SF
(gdpp)SH
/Times-Italic SF
17040 XM
(fd path frame)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 69740 MT
(arguments:)SH
/Symbol SF
10070 71193 MT
(\267)SH
/Times-Italic SF
10780 XM
(fd)SH
/Times-Roman SF
11808 XM
(is a valid fd \050recognized by)SH
/Courier SF
22972 XM
(fd-p)SH
/Times-Roman SF
(\051.)SH
ES
%%Page: 116 117
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(116)SH
/Symbol SF
7910 11600 MT
(\267)SH
/Times-Italic SF
8620 XM
(path)SH
/Times-Roman SF
10648 XM
(is a valid path \050that is a flat list of constituent names, starting with 0 or more ^\051)SH
/Symbol SF
7910 13358 MT
(\267)SH
/Times-Italic SF
8620 XM
(frame)SH
/Times-Roman SF
11203 XM
(is a structure of type)SH
/Courier SF
19618 XM
(frame)SH
/Times-Roman SF
(. By)
250 W( default it is)SH
/Courier SF
29535 XM
(dummy-frame)SH
/Times-Roman SF
(, an empty frame.)SH
/Times-Bold SF
6120 14735 MT
(description:)SH
/Courier SF
11539 XM
(gdpp)SH
/Times-Roman SF
14247 XM
(goes down the path)58 W
/Times-Italic SF
22478 XM
(path)SH
/Times-Roman SF
24564 XM
(\050hence its name: godownpathpair\051 and returns the)
58 W( pair whose value is)59 W
6120 16112 MT
(the fd found at the end of)22 W
/Times-Italic SF
16633 XM
(path)SH
/Times-Roman SF
(. It is)
22 W( the function that should be used to work as the basis to the)21 W
/Courier SF
44664 XM
(setf)SH
/Times-Roman SF
47335 XM
(of)SH
/Courier SF
48439 XM
(gdp)SH
/Times-Roman SF
(, to set)21 W
6120 17489 MT
(values to parts of an fd.)72 W
/Courier SF
16189 XM
(gdpp)SH
/Times-Roman SF
18911 XM
(always returns a pair whose)
72 W( second is a valid fd, and is never a path or)73 W
/Courier SF
48485 XM
(none)SH
/Times-Roman SF
51208 XM
(if)SH
/Times-Italic SF
52142 XM
(fd)SH
/Times-Roman SF
6120 18866 MT
(cannot e extended to include)10 W
/Times-Italic SF
17862 XM
(path)SH
/Times-Roman SF
(.)SH
/Courier SF
20150 XM
(\050gdpp *input* nil\051)10 W
/Times-Roman SF
31230 XM
(returns the pair)9 W
/Courier SF
37561 XM
(\050*top* *input*\051)9 W
/Times-Roman SF
46829 XM
(\050where *input*)9 W
6120 20243 MT
(refers to the total fd\051.)SH
/Courier SF
7920 22722 MT
(gdpp)SH
/Times-Roman SF
10584 XM
(works only if the special variable *input* is accessible and bound to the total fd containing)15 W
/Times-Italic SF
47431 XM
(fd)SH
/Times-Roman SF
(. In)
280 W( normal)15 W
6120 24099 MT
(environments, the function)SH
/Courier SF
17119 XM
(top-gdpp)SH
/Times-Roman SF
22169 XM
(should be used instead.)SH
7920 26578 MT
(if)SH
/Times-Italic SF
8802 XM
(path)SH
/Times-Roman SF
10851 XM
(leads to a non-existent sub-fd,)20 W
/Courier SF
23227 XM
(gdpp)SH
/Times-Roman SF
25897 XM
(extends \050by physical modification\051)20 W
/Times-Italic SF
40142 XM
(fd)SH
/Times-Roman SF
41190 XM
(to include a path down to the)20 W
8714 50 30825 26778 UL
6120 27955 MT
(required)SH
/Times-Italic SF
9764 XM
(path)SH
/Times-Roman SF
11854 XM
(if possible, or the function returns)62 W
/Courier SF
26030 XM
(none)SH
/Times-Roman SF
(. When)
374 W( the fd is modified)
62 W( physically,)63 W
/Times-Italic SF
44260 XM
(frame)SH
/Times-Roman SF
46906 XM
(is updated \050the)63 W
6120 29332 MT
(field)SH
/Times-Italic SF
8203 XM
(undo)SH
/Times-Roman SF
(\051 to keep track of the modification.)SH
12 /Times-Bold AF
6120 33035 MT
(15.7.6.)SH
/Times-Roman SF
9720 XM
(top-gdp)SH
10 /Times-Bold AF
7920 34412 MT
(type:)SH
/Times-Roman SF
10336 XM
(function)SH
/Times-Bold SF
6120 35789 MT
(calling form:)SH
/Times-Roman SF
11897 XM
(\050)SH
/Courier SF
(top-gdp)SH
/Times-Italic SF
16680 XM
(fd path)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
6120 37166 MT
(arguments:)SH
/Symbol SF
7910 38619 MT
(\267)SH
/Times-Italic SF
8620 XM
(fd)SH
/Times-Roman SF
9648 XM
(is an fd.)SH
/Symbol SF
7910 40377 MT
(\267)SH
/Times-Italic SF
8620 XM
(path)SH
/Times-Roman SF
10648 XM
(is a valid path structure.)SH
/Times-Bold SF
6120 41754 MT
(description:)SH
/Times-Roman SF
11612 XM
(works like)131 W
/Courier SF
16318 XM
(gdp)SH
/Times-Roman SF
18499 XM
(but considering fd as the total fd.)
131 W( Can)
511 W( therefore be used even if)130 W
/Courier SF
46015 XM
(*input*)SH
/Times-Roman SF
50595 XM
(is not)130 W
6120 43131 MT
(bound in the current environment. This is the user-level function to access constituents of fds.  .)SH
12 /Times-Bold AF
6120 46834 MT
(15.7.7.)SH
/Times-Roman SF
9720 XM
(top-gdpp)SH
10 /Times-Bold AF
7920 48211 MT
(type:)SH
/Times-Roman SF
10336 XM
(function)SH
/Times-Bold SF
6120 49588 MT
(calling form:)SH
/Times-Roman SF
11897 XM
(\050)SH
/Courier SF
(top-gdpp)SH
/Times-Italic SF
17280 XM
(fd path)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
6120 50965 MT
(arguments:)SH
/Symbol SF
7910 52418 MT
(\267)SH
/Times-Italic SF
8620 XM
(fd)SH
/Times-Roman SF
9648 XM
(is an fd.)SH
/Symbol SF
7910 54176 MT
(\267)SH
/Times-Italic SF
8620 XM
(path)SH
/Times-Roman SF
10648 XM
(is a valid path structure.)SH
/Times-Bold SF
6120 55553 MT
(description:)SH
/Times-Roman SF
11581 XM
(works like)100 W
/Courier SF
16225 XM
(gdpp)SH
/Times-Roman SF
18975 XM
(but considering fd as the total)
100 W( fd.  Can therefore be used even if)101 W
/Courier SF
46073 XM
(*input*)SH
/Times-Roman SF
50624 XM
(is not)101 W
6120 56930 MT
(bound in the current environment. This is the user-level function to access pairs in fds.  .)SH
12 /Times-Bold AF
6120 60633 MT
(15.7.8.)SH
/Times-Roman SF
9720 XM
(alt-gdp)SH
10 /Times-Bold AF
7920 62010 MT
(type:)SH
/Times-Roman SF
10336 XM
(function)SH
/Times-Bold SF
6120 63387 MT
(calling form:)SH
/Times-Roman SF
11897 XM
(\050)SH
/Courier SF
(alt-gdp)SH
/Times-Italic SF
16680 XM
(fd path)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
6120 64764 MT
(arguments:)SH
/Symbol SF
7910 66217 MT
(\267)SH
/Times-Italic SF
8620 XM
(fd)SH
/Times-Roman SF
9648 XM
(is an fd.)SH
/Symbol SF
7910 67975 MT
(\267)SH
/Times-Italic SF
8620 XM
(path)SH
/Times-Roman SF
10648 XM
(is a valid path structure with disjunction specifiers.)SH
/Times-Bold SF
6120 69352 MT
(description:)SH
/Times-Roman SF
11617 XM
(works like)136 W
/Courier SF
16333 XM
(gdp)SH
/Times-Roman SF
18519 XM
(but works even if fd contains disjunctions \050)136 W
/Courier SF
(alt)SH
/Times-Roman SF
(,)SH
/Courier SF
39211 XM
(ralt)SH
/Times-Roman SF
41997 XM
(or)SH
/Courier SF
43216 XM
(opt)SH
/Times-Roman SF
45401 XM
(constructs\051. paths)520 W
6120 70729 MT
(when disjunctions are allowed are different from paths in regular fds.  They have the same syntax, except)
32 W( that to go)33 W
ES
%%Page: 117 118
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(117)SH
8280 11486 MT
(through an)165 W
/Courier SF
13165 XM
(alt)SH
/Times-Roman SF
15380 XM
(or)SH
/Courier SF
16628 XM
(ralt)SH
/Times-Roman SF
19443 XM
(construct, additional information must be)
165 W( provided.  The following syntax is used to)164 W
8280 12863 MT
(denote the traversal of an fd with disjunctions:)SH
9 /Courier AF
10839 15496 MT
(path :=)
2700 W( { att-spec* })SH
10839 17392 MT
(att-spec :=)
540 W( symbol | alt-spec | ralt-spec | opt-spec)SH
10839 19288 MT
(alt-spec :=)
540 W( \050alt <index> {<branch>}\051)SH
10839 21184 MT
(ralt-spec := \050ralt <index> {<branch>}\051)SH
10839 23080 MT
(opt-spec :=)
540 W( \050opt <index>\051)SH
42480 10840 50 10440 24427 BX BX1
10 /Times-Roman AF
8280 25837 MT
(Both <index> and <branch> must be numbers.  The <index>)
74 W( information refers to the index of the)75 W
/Courier SF
49147 XM
(alt)SH
/Times-Roman SF
(,)SH
/Courier SF
51522 XM
(ralt)SH
/Times-Roman SF
54247 XM
(or)SH
/Courier SF
8280 27214 MT
(opt)SH
/Times-Roman SF
10429 XM
(pair within its parent node.  That is, given that a list of pairs)
99 W( can contain several alts at the same level, it is)98 W
8280 28591 MT
(necessary to distinguish between them.)
7 W( The)
265 W( <index> information gives the position of the pair in the list, with index)8 W
8280 29968 MT
(0 refering to the first pair.  If it is necessary to go)
6 W( further down an alt or ralt pair, then it is necessary to identify what)5 W
8280 31345 MT
(branch must be followed.  This information is given by the <branch> index.  Not that a specifier)14 W
/Courier SF
47266 XM
(\050alt <index>\051)14 W
/Times-Roman SF
8280 32722 MT
(without a branch index must necessary be the last one in a path and refers to the whole)SH
/Courier SF
43162 XM
(alt)SH
/Times-Roman SF
45212 XM
(pair.)SH
10080 35201 MT
(This function is less robust than)44 W
/Courier SF
23344 XM
(gdp)SH
/Times-Roman SF
(, it does not check for cycles,)
44 W( does not check for fsets violations and does)43 W
8280 36578 MT
(not check for user-defined special types.)SH
12 /Times-Bold AF
8280 40281 MT
(15.7.9.)SH
/Times-Roman SF
11880 XM
(list-to-fd)SH
10 /Times-Bold AF
10080 41658 MT
(type:)SH
/Times-Roman SF
12496 XM
(function)SH
/Times-Bold SF
8280 43035 MT
(calling form:)SH
/Times-Roman SF
14057 XM
(\050)SH
/Courier SF
(list-to-fd)SH
/Times-Italic SF
20640 XM
(list)SH
/Times-Roman SF
(\051)SH
/Times-Bold SF
8280 44412 MT
(arguments:)SH
/Symbol SF
10070 45865 MT
(\267)SH
/Times-Italic SF
10780 XM
(list)SH
/Times-Roman SF
12253 XM
(is a regular lisp list.)SH
/Times-Bold SF
8280 47242 MT
(description:)SH
/Courier SF
13641 XM
(list-to-fd)SH
/Times-Roman SF
19891 XM
(converts a list from a a lisp representation to an fd representation.)SH
10080 49721 MT
(Note: the notation)
30 W( {l ~3 a} refers to the third element of the list l if l is a list in fd form.  That is, the path {l ~3)31 W
8280 51098 MT
(a} is equivalent to {l cdr cdr car a}.)SH
14 /Times-Bold AF
8280 54916 MT
(15.8. fine tuning of the unifier)SH
12 SS 
8280 58619 MT
(15.8.1.)SH
/Times-Roman SF
11880 XM
(*any-at-unification*)SH
10 /Times-Bold AF
10080 59996 MT
(type:)SH
/Times-Roman SF
12496 XM
(variable)SH
/Times-Bold SF
8280 61373 MT
(description:)SH
/Times-Roman SF
13884 XM
(if)SH
/Courier SF
14988 XM
(*any-at-unification*)SH
/Times-Roman SF
27481 XM
(is)SH
/Courier SF
28641 XM
(nil)SH
/Times-Roman SF
(, and the unifier encounters a pair \050attribute)243 W
/Courier SF
49963 XM
(any)SH
/Times-Roman SF
(\051 in the)242 W
8280 62750 MT
(grammar, and no feature)16 W
/Courier SF
18424 XM
(attribute)SH
/Times-Roman SF
24090 XM
(exists in the input, the unification succeeds)
16 W( and the input is enriched with the)17 W
8280 64127 MT
(pair \050attribute)71 W
/Courier SF
14143 XM
(any)SH
/Times-Roman SF
(\051. Only at the determination stage, it is checked whether)71 W
/Courier SF
39260 XM
(any)SH
/Times-Roman SF
(s remain in)
71 W( the total fd. If it is the)70 W
8280 65504 MT
(case, the unification fails, and the unifier backtracks.)SH
10080 67983 MT
(if)SH
/Courier SF
11106 XM
(*any-at-unification*)SH
/Times-Roman SF
23521 XM
(is non-)165 W
/Courier SF
(nil)SH
/Times-Roman SF
(, the test to decide whether)
165 W( the feature attribute exists or not is)166 W
8280 69360 MT
(performed immediately on the non-determined fd. The result may be incorrect, but)
90 W( it is much faster. The result is)89 W
8280 70737 MT
(assured to be correct if the feature tested is one)
120 W( that is never instantiated by the grammar, and is expected to be)121 W
ES
%%Page: 118 119
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(118)SH
6120 11486 MT
(provided in the input.)SH
/Times-Bold SF
6120 12863 MT
(standard value: t)SH
12 SS 
6120 16566 MT
(15.8.2.)SH
/Times-Roman SF
9720 XM
(*use-given*)SH
10 /Times-Bold AF
7920 17943 MT
(type:)SH
/Times-Roman SF
10336 XM
(variable)SH
/Times-Bold SF
6120 19320 MT
(description:)SH
/Times-Roman SF
11552 XM
(if)SH
/Courier SF
12484 XM
(*use-given*)SH
/Times-Roman SF
19405 XM
(is)SH
/Courier SF
20393 XM
(t)SH
/Times-Roman SF
(,)SH
/Courier SF
21564 XM
(given)SH
/Times-Roman SF
24885 XM
(and)SH
/Courier SF
26650 XM
(under)SH
/Times-Roman SF
29971 XM
(constructs have their usual semantics.  If it)
71 W( is)70 W
/Courier SF
48828 XM
(nil)SH
/Times-Roman SF
(, then)70 W
/Courier SF
6120 20697 MT
(given)SH
/Times-Roman SF
9370 XM
(is considered as a normal symbol and a construct)SH
/Courier SF
29228 XM
(#\050under s\051)SH
/Times-Roman SF
35478 XM
(is considered equivalent to simply)SH
/Courier SF
49394 XM
(s)SH
/Times-Roman SF
(.)SH
/Times-Bold SF
6120 22074 MT
(standard value:)SH
/Courier SF
13065 XM
(t)SH
12 /Times-Bold AF
6120 25777 MT
(15.8.3.)SH
/Times-Roman SF
9720 XM
(*use-any*)SH
10 /Times-Bold AF
7920 27154 MT
(type:)SH
/Times-Roman SF
10336 XM
(variable)SH
/Times-Bold SF
6120 28531 MT
(description:)SH
/Times-Roman SF
12143 XM
(if)SH
/Courier SF
13666 XM
(*use-any*)SH
/Times-Roman SF
19978 XM
(is)SH
/Courier SF
21557 XM
(t)SH
/Times-Roman SF
(,)SH
/Courier SF
23320 XM
(any)SH
/Times-Roman SF
26033 XM
(constructs have their usual semantics \050as determined by)663 W
/Courier SF
6120 29908 MT
(*any-at-unification*)SH
/Times-Roman SF
(\051. If)
250 W( it is)SH
/Courier SF
21842 XM
(nil)SH
/Times-Roman SF
(, then)SH
/Courier SF
26114 XM
(any)SH
/Times-Roman SF
28164 XM
(is considered as a normal symbol.)SH
/Times-Bold SF
6120 31285 MT
(standard value:)SH
/Courier SF
13065 XM
(t)SH
12 /Times-Bold AF
6120 34988 MT
(15.8.4.)SH
/Times-Roman SF
9720 XM
(*keep-cset*)SH
10 /Times-Bold AF
7920 36365 MT
(type:)SH
/Times-Roman SF
10336 XM
(variable)SH
/Times-Bold SF
6120 37742 MT
(description:)SH
/Times-Roman SF
11482 XM
(if)SH
/Courier SF
12344 XM
(*keep-cset*)SH
/Times-Roman SF
19195 XM
(is)SH
/Courier SF
20113 XM
(nil)SH
/Times-Roman SF
(, the)
1 W( determination stage removes all the)SH
/Courier SF
38356 XM
(cset)SH
/Times-Roman SF
41006 XM
(features from the total fd. If it)SH
6120 39119 MT
(is)SH
/Courier SF
7037 XM
(t)SH
/Times-Roman SF
7887 XM
(it keeps them.)SH
/Times-Bold SF
6120 40496 MT
(standard value:)SH
/Courier SF
13065 XM
(nil)SH
12 /Times-Bold AF
6120 44199 MT
(15.8.5.)SH
/Times-Roman SF
9720 XM
(*keep-none*)SH
10 /Times-Bold AF
7920 45576 MT
(type:)SH
/Times-Roman SF
10336 XM
(variable)SH
/Times-Bold SF
6120 46953 MT
(description:)SH
/Times-Roman SF
11491 XM
(if)SH
/Courier SF
12362 XM
(*keep-none*)SH
/Times-Roman SF
19222 XM
(is)SH
/Courier SF
20149 XM
(nil)SH
/Times-Roman SF
(, the determination stage removes all the pairs whose value is)10 W
/Courier SF
46833 XM
(none)SH
/Times-Roman SF
49493 XM
(from the)11 W
6120 48330 MT
(total fd. If it is)SH
/Courier SF
12120 XM
(t)SH
/Times-Roman SF
12970 XM
(it keeps them.)SH
/Times-Bold SF
6120 49707 MT
(standard value:)SH
/Courier SF
13065 XM
(t)SH
12 /Times-Bold AF
6120 53410 MT
(15.8.6.)SH
/Times-Roman SF
9720 XM
(*agenda-policy*)SH
10 /Times-Bold AF
7920 54787 MT
(type:)SH
/Times-Roman SF
10336 XM
(variable)SH
/Times-Bold SF
6120 56164 MT
(description:)SH
/Times-Roman SF
11481 XM
(can be either)SH
/Courier SF
16840 XM
(:force)SH
/Times-Roman SF
20690 XM
(or)SH
/Courier SF
21773 XM
(:keep)SH
/Times-Roman SF
(. Determines)
250 W( what to do with frozen alts at the end of unification:)SH
/Symbol SF
7910 57617 MT
(\267)SH
/Times-Roman SF
8620 XM
(if)SH
/Courier SF
9481 XM
(:keep)SH
/Times-Roman SF
(: keep)
250 W( them unevaluated in result)SH
/Symbol SF
7910 59375 MT
(\267)SH
/Times-Roman SF
8620 XM
(if)SH
/Courier SF
9481 XM
(:force)SH
/Times-Roman SF
(: force their evaluation at determination time.)SH
6120 60752 MT
(the value should only be :keep in situations where several grammars are used in a pipeline)
130 W( architecture, and the)129 W
6120 62129 MT
(frozen decisions are passed along from one stage to the next.)SH
/Times-Bold SF
6120 63506 MT
(standard value:)SH
/Courier SF
13065 XM
(:force)SH
ES
%%Page: 119 120
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(119)SH
16 /Times-Bold AF
27834 11872 MT
(Appendix I)SH
22790 13280 MT
(Installation of the Package)SH
14 SS 
8280 17098 MT
(I.1. Finding the Files)SH
10 /Times-Roman AF
10080 18475 MT
(You need to find)
96 W( out on which machine and under which directory the system is available. You also need to)97 W
8280 19852 MT
(know how to run common lisp on that machine.)SH
10080 22331 MT
(The file fug5.l will load all the required modules.  examples are)
63 W( in the files gr0, gr1 and up for the grammars,)62 W
8280 23708 MT
(and in files ir0, ir1, ...  and up for the inputs. the examples are of increasing complexity.)SH
9 /Courier AF
10839 25393 MT
(to try the examples, type:)SH
16779 27289 MT
(lisp> \050load "gr0"\051)SH
16779 28237 MT
(t)SH
16779 29185 MT
(lisp> \050load "ir0"\051)SH
16779 30133 MT
(t)SH
42480 6286 50 10440 30718 BX BX1
14 /Times-Bold AF
8280 34536 MT
(I.2. Porting to a New Machine)SH
10 /Times-Roman AF
10080 35913 MT
(The program is contained in 29 files of)
40 W( source and 37 files of examples. All the source files should be grouped)41 W
8280 37290 MT
(in a directory, that we will call here)SH
/Courier SF
22749 XM
($fug5)SH
/Times-Roman SF
(, and the example files in a subdirectory of)SH
/Courier SF
43079 XM
($fug5)SH
/Times-Roman SF
46329 XM
(called)SH
/Courier SF
48967 XM
(examples)SH
/Times-Roman SF
(.)SH
10080 39769 MT
(Once this is done, you probably need to edit the)
22 W( file fug5.l.  This file loads all the required modules and defines)21 W
8280 41146 MT
(a few functions useful for)
92 W( compiling or loading the package.  In the file fug5.l, the function)93 W
/Courier SF
46573 XM
(require)SH
/Times-Roman SF
51116 XM
(is used to)93 W
8280 42523 MT
(load all submodules.)208 W
/Courier SF
17404 XM
(require)SH
/Times-Roman SF
22062 XM
(takes as first argument the name of a module, and accepts a second optional)207 W
8 SS 
30055 43555 MT
(16)SH
10 SS 
8280 43900 MT
(argument, the name of the file containing that module.)SH
10080 46379 MT
(You must change the second arguments of all the)22 W
/Courier SF
30247 XM
(require)SH
/Times-Roman SF
34719 XM
(statements in file)
22 W( fug5.l and update there the name)21 W
8280 47756 MT
(of the directory, from)SH
/Courier SF
17139 XM
($fug5)SH
/Times-Roman SF
20389 XM
(to the name of your directory.)SH
10080 50235 MT
(You also need to edit the first line of)
23 W( the functions)24 W
/Courier SF
30695 XM
(compile-fug5)SH
/Times-Roman SF
38169 XM
(and)SH
/Courier SF
39887 XM
(reload-fug5)SH
/Times-Roman SF
46761 XM
(and change there the)24 W
8280 51612 MT
(name of the directory from)SH
/Courier SF
19305 XM
($fug5)SH
/Times-Roman SF
22555 XM
(to the new name.)SH
10080 54091 MT
(When the file fug5.l is updated, load it in your common-lisp environment and follow these 4 steps:)SH
9 /Courier AF
10839 55776 MT
(\050load "$fug5/fug5"\051)SH
10839 57672 MT
(\050in-package "FUG5"\051)SH
10839 59568 MT
(\050compile-fug5\051)SH
10839 61464 MT
(\050reload-fug5\051)SH
42480 7234 50 10440 62049 BX BX1
10 /Times-Roman AF
10080 64528 MT
(Note to UNIX users: if you run Common Lisp under UNIX, and your version of Lisp can read)
110 W( environment)109 W
8280 65905 MT
(variables and expands such variables in file names \050for example,)123 W
/Courier SF
35587 XM
(\050load "~userx/file1"\051)123 W
/Times-Roman SF
48683 XM
(is a valid)
123 W( state-)124 W
8280 67282 MT
(ment, or)10 W
/Courier SF
11883 XM
(\050load "$var/file2"\051)10 W
/Times-Roman SF
(\051, then you don't need to edit the file)
10 W( fug5.l.  All you need to do is to define the)9 W
10800 50 8280 69428 UL
6 SS 
9080 70767 MT
(16)SH
8 SS 
9680 71076 MT
(on Common Lisp II, the function)6 W
/Courier SF
20490 XM
(require)SH
/Times-Roman SF
24056 XM
(is generally not supported anymore.  Most)
6 W( of the commercial implementations of Common Lisp,)7 W
8280 72000 MT
(however, still have a form of require available.)SH
ES
%%Page: 120 121
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(120)SH
6120 11486 MT
(environment variable ")62 W
/Courier SF
(fug5)SH
/Times-Roman SF
(" to be the complete pathname of the directory containing the source files.)
62 W( If)
376 W( you use)63 W
6120 12863 MT
(Lucid Common Lisp or Franz Inc's Allegro)
19 W( Common Lisp, init files are provided in the system to redefine)18 W
/Courier SF
49363 XM
(load)SH
/Times-Roman SF
52031 XM
(so)SH
6120 14240 MT
(that it can recognize shell variables.  These files are named lisp-init.l and lisp-init-acl.l respectively.)SH
7920 16719 MT
(Once this installation is done, all you need to)
164 W( do to load the package is)165 W
/Courier SF
38829 XM
(\050load "$fug5/fug5"\051)165 W
/Times-Roman SF
50809 XM
(\050with)SH
/Courier SF
6120 18096 MT
($fug5/)SH
/Times-Roman SF
9970 XM
(replaced by the name of your directory if you are not under unix\051.)SH
14 /Times-Bold AF
6120 21914 MT
(I.3. Packages)SH
10 /Times-Roman AF
7920 23291 MT
(*****NOTE: This section has not been updated for Version 5.2 *****)SH
7920 25770 MT
(*****Precise information can be obtained by inspecting file fug5.l in the distribution******)SH
7920 28249 MT
(The whole package is loaded in package)SH
/Courier SF
24332 XM
('fug5)SH
/Times-Roman SF
(. The easiest way to access it is to type:)SH
9 /Courier AF
8679 29934 MT
(\050in-package "FUG5"\051)
SH( ;;)
1080 W( note the upper-case)SH
8679 31830 MT
(or)SH
8679 33726 MT
(\050use-package "FUG5"\051)SH
42480 5338 50 8280 34311 BX BX1
10 /Times-Roman AF
7920 36790 MT
(The following)
170 W( symbols are exported from package 'fug5 \050they are the external symbols of the package, cf)169 W
6120 38167 MT
([Steele 84, Chapter 11, pp171-192]\051:)SH
ES
%%Page: 121 122
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(121)SH
24931 11885 MT
(external symbols of package fug5)SH
44796 50 9282 12503 LH BX1
19814 13588 MT
(file)SH
41212 XM
(symbols)SH
44796 50 9282 14206 LH BX1
-1703 50 31680 14206 LV BX1
/Courier SF
32079 15229 MT
(fd-p)SH
32079 16334 MT
(fd-syntax)SH
32079 17439 MT
(fd-sem)SH
32079 18544 MT
(grammar-p)SH
/Times-Roman SF
11481 19649 MT
(checker.l)SH
/Courier SF
32079 XM
(get-error-pair)SH
44796 50 9282 20267 LH BX1
32079 21290 MT
(complexity)SH
/Times-Roman SF
11481 22395 MT
(complexity.l)SH
/Courier SF
32079 XM
(avg-complexity)SH
44796 50 9282 23013 LH BX1
32079 24036 MT
(*keep-cset*)SH
/Times-Roman SF
11481 25141 MT
(determine.l)SH
/Courier SF
32079 XM
(*keep-none*)SH
44796 50 9282 25759 LH BX1
/Times-Roman SF
11481 26844 MT
(external.l)SH
/Courier SF
32079 XM
(*default-external-function*)SH
44796 50 9282 27462 LH BX1
32079 28485 MT
(*any-at-unification*)SH
/Times-Roman SF
11481 29590 MT
(graph.l)SH
/Courier SF
32079 XM
(*use-given*)SH
44796 50 9282 30208 LH BX1
32079 31231 MT
(*dictionary*)SH
32079 32336 MT
(lexfetch)SH
/Times-Roman SF
11481 33441 MT
(lexicon.l)SH
/Courier SF
32079 XM
(lexstore)SH
44796 50 9282 34059 LH BX1
32079 35082 MT
(call-linearizer)SH
/Times-Roman SF
11481 36187 MT
(linearize.l)SH
/Courier SF
32079 XM
(morphology-help)SH
44796 50 9282 36805 LH BX1
32079 37828 MT
(gdp, gdpp)SH
32079 38933 MT
(top-gdp, top-gdpp)SH
/Times-Roman SF
11481 40038 MT
(path.l)SH
/Courier SF
32079 XM
(alt-gdp)SH
44796 50 9282 40656 LH BX1
32079 41679 MT
(*u-grammar*)SH
32079 42784 MT
(*lexical-categories*)SH
32079 43889 MT
(*cat-attribute*)SH
32079 44994 MT
(uni)SH
32079 46099 MT
(uni-fd)SH
32079 47204 MT
(unif)SH
32079 48309 MT
(list-cats)SH
32079 49414 MT
(u)SH
/Times-Roman SF
11481 50519 MT
(top.l)SH
/Courier SF
32079 XM
(u-disjunctions)SH
44796 50 9282 51137 LH BX1
32079 52160 MT
(trace-on)SH
32079 53265 MT
(trace-off)SH
32079 54370 MT
(internal-trace-on)SH
32079 55475 MT
(internal-trace-off)SH
32079 56580 MT
(trace-category)SH
32079 57685 MT
(trace-enable)SH
32079 58790 MT
(trace-disable)SH
32079 59895 MT
(trace-enable-all)SH
32079 61000 MT
(trace-disable-all)SH
32079 62105 MT
(trace-enable-match)SH
32079 63210 MT
(trace-disable-match)SH
32079 64315 MT
(all-tracing-flags)SH
32079 65420 MT
(*trace-marker*)SH
32079 66525 MT
(*all-trace-off*)SH
32079 67630 MT
(*all-trace-on*)SH
32079 68735 MT
(*trace-determine*)SH
/Times-Roman SF
11481 69840 MT
(trace.l)SH
/Courier SF
32079 XM
(*top*)SH
44796 50 9282 70458 LH BX1
32079 71481 MT
(define-feature-type)SH
32079 72586 MT
(define-procedural-type)SH
/Times-Roman SF
11481 73691 MT
(type.l)SH
/Courier SF
32079 XM
(reset-typed-features)SH
44796 63509 50 9282 74309 BX BX1
-60103 50 31680 74309 LV BX1
ES
%%Page: 122 123
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(122)SH
7920 11486 MT
(In addition, the following symbols are external. These are the keywords used as names in the code:)SH
20369 13495 MT
(external symbols of package fug5 \050keywords\051)SH
44796 50 7122 14113 LH BX1
17654 15198 MT
(file)SH
39052 XM
(symbols)SH
44796 50 7122 15816 LH BX1
-1703 50 29520 15816 LV BX1
/Courier SF
29919 16839 MT
(===)SH
29919 17944 MT
(* already exists in lisp)SH
29919 19049 MT
(trace already exists in user)SH
29919 20154 MT
(@)SH
29919 21259 MT
(^)SH
29919 22364 MT
(alt)SH
29919 23469 MT
(any)SH
29919 24574 MT
(cat)SH
29919 25679 MT
(control)SH
29919 26784 MT
(cset)SH
29919 27889 MT
(dots)SH
29919 28994 MT
(*done*)SH
29919 30099 MT
(gap)SH
29919 31204 MT
(given)SH
29919 32309 MT
(index)SH
29919 33414 MT
(lex)SH
29919 34519 MT
(mergeable)SH
29919 35624 MT
(none)SH
29919 36729 MT
(opt)SH
29919 37834 MT
(pattern)SH
29919 38939 MT
(pound)SH
29919 40044 MT
(punctuation)SH
/Times-Roman SF
9321 41149 MT
(top.l)SH
/Courier SF
29919 XM
(test)SH
44796 29357 50 7122 41767 BX BX1
-25951 50 29520 41767 LV BX1
/Times-Roman SF
7920 44246 MT
(All these symbols are documented for reference in section 15.  If you use)
31 W( the package fug5 in another package,)32 W
6120 45623 MT
(only these symbols will be imported.)SH
ES
%%Page: 123 124
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(123)SH
16 /Times-Bold AF
27523 11872 MT
(Appendix II)SH
25281 13280 MT
(Advanced Features)SH
14 SS 
8280 17098 MT
(II.1. Advanced Uses of Patterns)SH
10 /Times-Roman AF
10080 18475 MT
(In addition to constraining the ordering of constituents, the pattern unifier can be used)
17 W( to enforce the unification)16 W
8280 19852 MT
(of constituents.  The classical example is given by the)20 W
/Courier SF
30283 XM
(focus)SH
/Times-Roman SF
33553 XM
(constituent. There is good linguistic evidence that the)20 W
8280 21229 MT
(focus of a sentence tends to occur first in a sentence.  To represent this constraint,)
163 W( a grammar can include the)162 W
8280 22606 MT
(following directive:)SH
9 /Courier AF
10839 24291 MT
(\050pattern \050focus dots\051\051)SH
42480 1546 50 10440 24876 BX BX1
10 /Times-Roman AF
10080 27355 MT
(That is, a sentence should start with its focus.)
87 W( Now,)
426 W( we also know that a sentence at the active voice should)88 W
8280 28732 MT
(start with its subject, that is its)SH
/Courier SF
20670 XM
(prot)SH
/Times-Roman SF
23320 XM
(constituent. this is expressed by:)SH
9 /Courier AF
10839 30417 MT
(\050pattern \050prot ... verb ...\051\051)SH
42480 1546 50 10440 31002 BX BX1
10 /Times-Roman AF
10080 33481 MT
(If both constraints are to be satisfied, we need to say that)60 W
/Courier SF
33768 XM
(focus)SH
/Times-Roman SF
37078 XM
(and)SH
/Courier SF
38832 XM
(prot)SH
/Times-Roman SF
41541 XM
(are actually the same constituent,)59 W
8280 34858 MT
(otherwise, the 2 patterns are)
139 W( incompatible. That is, the constituents)140 W
/Courier SF
36645 XM
(focus)SH
/Times-Roman SF
40035 XM
(and)SH
/Courier SF
41869 XM
(prot)SH
/Times-Roman SF
44659 XM
(need to be unified.  This)140 W
8280 36235 MT
(mechanism would be quite expensive to implement for all constituents, and would need to meaningless)
124 W( attempts)123 W
8280 37612 MT
(most of the time.  Therefore, to allow this kind of unification to occur, the current unifier)
111 W( requires the pattern to)112 W
8280 38989 MT
(include a special directive, indicating that a constituent can be unified with other constituents to make two)
54 W( patterns)53 W
8280 40366 MT
(compatible. The notation used is:)SH
/Courier SF
21835 XM
(\050* constituent\051)SH
/Times-Roman SF
(.)SH
9 /Courier AF
10839 42051 MT
(example:)SH
10839 42999 MT
(\050pattern \050\050* focus\051 dots\051\051)SH
10839 43947 MT
(\050pattern \050prot dots verb dots\051\051)SH
42480 3442 50 10440 44532 BX BX1
10 /Times-Roman AF
10080 47011 MT
(are compatible, and)
26 W( require the unification of the constituents)27 W
/Courier SF
35150 XM
(focus)SH
/Times-Roman SF
38427 XM
(and)SH
/Courier SF
40148 XM
(prot)SH
/Times-Roman SF
(. Note)
304 W( that)27 W
/Courier SF
47350 XM
(prot)SH
/Times-Roman SF
50027 XM
(needs not be)27 W
8280 48388 MT
(``stared'' to be unified with)232 W
/Courier SF
20743 XM
(focus)SH
/Times-Roman SF
(. The notation can be)
232 W( understood as specifying that)231 W
/Courier SF
46434 XM
(focus)SH
/Times-Roman SF
49915 XM
(is a kind of)231 W
8280 49765 MT
(``meta-constituent''.)SH
10080 52244 MT
(Another advanced usage of mergeable constituents in patterns, is to infer a constraint on)
59 W( a constituent from its)60 W
8280 53621 MT
(location in the pattern.  A simple example is given here to enforce)
23 W( the decision to capitalize the first constituent of a)22 W
8280 54998 MT
(sentence \050the feature punctuation is interpreted by the linearizer as explained in Section 11.6\051:)SH
9 /Courier AF
10839 56683 MT
(\050\050pattern \050\050* first-constituent\051 dots\051\051)SH
11379 57631 MT
(\050first-constituent \050\050punctuation \050\050capitalize yes\051\051\051\051\051\051)SH
42480 2494 50 10440 58216 BX BX1
14 /Times-Bold AF
8280 62056 MT
(II.2. Advanced uses of)SH
/Times-Roman SF
21815 XM
(CSET)SH
10 SS 
10080 63433 MT
(Note that)
59 W( CSET is rarely used in small to medium grammars, and most often used when you DO NOT want a)60 W
8280 64810 MT
(sub-fd to be unified as a constituent, even though it is mentioned in a pattern or it contains a feature \050cat xx\051.)SH
10080 67289 MT
(When a CSET feature is)
145 W( specified, the order of the constituents can be important to make unification more)144 W
8280 68666 MT
(efficient. The)
504 W( unifier traverses the input fd)
127 W( breadth-first identifying constituents at each level.  Within the same)128 W
8280 70043 MT
(level, the CSET feature when present specifies in which order the constituents)
5 W( must be unified.  Therefore, if there is)4 W
8280 71420 MT
(a constituent known to be easy to)
115 W( unify, and whose value condition the unification of the brother constituents, it)116 W
ES
%%Page: 124 125
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(124)SH
6120 11486 MT
(should be unified first, and placed first in the)
36 W( CSET.  This way, the CSET feature can be used to optimize the work)35 W
6120 12863 MT
(of the unifier.)SH
9 /Courier AF
8679 14548 MT
(\050\050cat hard\051)SH
9219 15496 MT
(\050a #\051)
SH( ;)
2700 W( is hard to unify)SH
9219 16444 MT
(\050b #\051)
SH( ;)
2700 W( is hard to unify)SH
9219 17392 MT
(\050c #\051)
SH( ;)
2700 W( is easy to unify and constrains the unification of a and b)SH
9219 18340 MT
(\050cset \050c a b\051\051\051)
SH( ;)
2700 W( unify c first, then a and b.)SH
42480 5338 50 8280 18925 BX BX1
10 /Times-Roman AF
7920 21404 MT
(Explicit CSET traversal becomes very important when designing)
211 W( a large grammar such as SURGE.  The)212 W
6120 22781 MT
(incremental CSET specification discussed in Section 5.7 become then particularly important.)SH
14 /Times-Bold AF
6120 26621 MT
(II.3. Long Distance Dependencies and the)SH
/Times-Roman SF
31244 XM
(GAP)SH
/Times-Bold SF
34394 XM
(feature)SH
10 /Times-Roman AF
7920 27998 MT
(The special feature)162 W
/Courier SF
16264 XM
(gap)SH
/Times-Roman SF
18476 XM
(is used to indicate that a constituent must not be realized in the)
162 W( surface text. If a)161 W
6120 29375 MT
(constituent contains an attribute)SH
/Courier SF
19119 XM
(gap)SH
/Times-Roman SF
21169 XM
(with any non-)SH
/Courier SF
(NONE)SH
/Times-Roman SF
29374 XM
(value, the linearizer will skip it.)SH
7920 31854 MT
(This device is used to implement long-distance dependencies in grammars. For example, in a)
2 W( relative clause, the)3 W
6120 33231 MT
(relative pronoun can be viewed as the marker of the relativization, and the relative clause as)
21 W( a complete clause, with)20 W
6120 34608 MT
(one constituent elided. Thus, in)36 W
/Times-Italic SF
19105 XM
(The man whom I know)36 W
/Times-Roman SF
(, the relative clause would have the structure)36 W
/Times-Italic SF
46671 XM
(I know the man)37 W
/Times-Roman SF
6120 35985 MT
(and the constituent)SH
/Times-Italic SF
13925 XM
(the man)SH
/Times-Roman SF
17369 XM
(would be a)SH
/Courier SF
22007 XM
(gap)SH
/Times-Roman SF
(, whereas the relative pronoun)SH
/Times-Italic SF
36137 XM
(whom)SH
/Times-Roman SF
38776 XM
(would inherit its properties.)SH
14 /Times-Bold AF
6120 39825 MT
(II.4. Specifying Complex Constraints: the)SH
/Times-Roman SF
31280 XM
(TEST)SH
/Times-Bold SF
34973 XM
(and)SH
/Times-Roman SF
37579 XM
(CONTROL)SH
/Times-Bold SF
44540 XM
(Keywords)SH
10 /Courier AF
7920 41202 MT
(test)SH
/Times-Roman SF
10759 XM
(and)SH
/Courier SF
12642 XM
(control)SH
/Times-Roman SF
17281 XM
(are two ``impure'' specifications: they do not)
189 W( rely on the principle of unification to)188 W
6120 42579 MT
(prevent a successful unification of 2 FDs.)202 W
/Courier SF
24872 XM
(control)SH
/Times-Roman SF
29524 XM
(should not)
202 W( be used except under extremely special cir-)203 W
6120 43956 MT
(cumstances. For)
250 W( the time being, it can be considered a synonym of)SH
/Courier SF
33255 XM
(test)SH
/Times-Roman SF
(.)SH
/Courier SF
7920 46435 MT
(test)SH
/Times-Roman SF
10576 XM
(is used to add a complex constraint on the result of a unification.  A complex constraint refers to any Lisp)5 W
6120 47812 MT
(predicate. If at the end of the unification the predicate is satisfied when applied to the resulting fd, the unification)82 W
6120 49189 MT
(succeeds, otherwise it fails, and the unifier backtracks to find another solution.)SH
7920 51668 MT
(The special)
38 W( character '#@' is used to refer to parts of the FD in the expression of the constraints. A '#@' must)37 W
6120 53045 MT
(be followed by a valid path \050either absolute or relative\051. The expression)27 W
/Courier SF
35299 XM
(#@\050^ ^ a b\051)27 W
/Times-Roman SF
42257 XM
(is replaced by)
27 W( the value of)28 W
6120 54422 MT
(the feature refered to by that path before the predicate is evaluated.)SH
7920 56901 MT
(The order in which the)238 W
/Courier SF
18469 XM
(test)SH
/Times-Roman SF
21357 XM
(predicates will be evaluated is)
238 W( obviously not determined. Side effects are)237 W
6120 58278 MT
(therefore STRONGLY discouraged within the body of the)SH
/Courier SF
29727 XM
(test)SH
/Times-Roman SF
32377 XM
(constraints.)SH
9 /Courier AF
8679 59963 MT
(Examples:)SH
8679 60911 MT
(\050\050a 1\051)SH
9219 61859 MT
(\050test \050equal #@{a} #@{b}\051\051\051)SH
8679 63755 MT
(is equivalent to the nicer:)SH
8679 65651 MT
(\050\050a 1\051)SH
9219 66599 MT
(\050b {a}\051\051)SH
8679 68495 MT
(\050\050a 1\051)SH
9219 69443 MT
(\050test \050numberp #@{a}\051\051\051)SH
42480 11026 50 8280 70028 BX BX1
ES
%%Page: 125 126
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(125)SH
10080 11486 MT
(There is conceptually the same difference between TEST and CONTROL as there is)
232 W( between ANY and)233 W
8280 12863 MT
(GIVEN: TEST constraints are tested at determination time, whereas CONTROL)
11 W( constraints are tested as soon as the)10 W
8280 14240 MT
(unifier meets them.  CONTROL is therefore in general much)
69 W( more efficient than TEST, but the results it provides)70 W
8280 15617 MT
(are unpredictable in certain cases \050if the features tested are given a different)
11 W( value later on during the unification, the)10 W
8280 16994 MT
(result of the test could be different\051.)SH
14 /Times-Bold AF
8280 20812 MT
(II.5. Copying vs Conflation: The #{} notation)SH
10 /Times-Roman AF
10080 22189 MT
(**********Jacques: here you go*****)SH
ES
%%Page: 126 127
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(126)SH
ES
%%Page: 127 128
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(127)SH
16 /Times-Bold AF
27212 11872 MT
(Appendix III)SH
9012 13280 MT
(Non Linguistic Applications of the Unifier: FUF as a Programming)SH
28301 14688 MT
(Language)SH
10 /Times-Roman AF
10080 16065 MT
(Unification as used in the theory of functional unification grammars is a powerful mechanism)
205 W( that is not)206 W
8280 17442 MT
(restricted to linguistic domains.)
14 W( It can be viewed as a ``programming language'' of its own. Actually, it is similar by)13 W
8280 18819 MT
(many aspects to PROLOG. There)
73 W( are however some very specific features that make working with this version of)74 W
8280 20196 MT
(unification well adapted to grammars, and not so well to more classic programming tasks.)SH
14 /Times-Bold AF
8280 24014 MT
(III.1. Dealing with Lists: The Member/Append Example)SH
10 /Times-Roman AF
10080 25391 MT
(To make things clear, this implementation includes a ``grammar'' doing some list processing.)
58 W( The only opera-)57 W
8280 26768 MT
(tions presented are)22 W
/Times-Italic SF
16094 XM
(member)SH
/Times-Roman SF
19587 XM
(and)SH
/Times-Italic SF
21303 XM
(append)SH
/Times-Roman SF
(. This grammar is in the directorey)22 W
/Times-Italic SF
38510 XM
(examples)SH
/Times-Roman SF
42503 XM
(in file GR5.L. It is)
22 W( printed here)23 W
8280 28145 MT
(for easy reference for the discussion.)SH
9 /Courier AF
15159 29830 MT
('\050\050alt)SH
16779 30778 MT
(\050\050\050cat append\051)SH
17859 31726 MT
(\050alt append)SH
18399 32674 MT
(;; First branch: append\050[],Y,Y\051.)SH
18399 33622 MT
(\050\050\050x none\051)SH
19479 34570 MT
(\050z {^ y}\051)SH
19479 35518 MT
(;; This is to normalize the result of a \050cat append\051:)SH
19479 36466 MT
(;; it must contain the CAR and CDR of the result.)SH
19479 37414 MT
(\050car {^ z car}\051)SH
19479 38362 MT
(\050cdr {^ z cdr}\051\051)SH
18939 40258 MT
(;; Second branch: append\050[X/Xs],Y,[X/Z]\051:-append\050Xs,Y,Z\051.)SH
18939 41206 MT
(\050\050alt \050\050\050x \050\050car any\051\051\051\051)
SH( ;)
1080 W( this alt allows for partially)SH
22719 42154 MT
(\050\050x \050\050cdr any\051\051\051\051\051\051 ; defined lists X in input.)SH
19479 43102 MT
(;; recursive call to append)SH
19479 44050 MT
(;; with new arguments x, y and z.)SH
19479 44998 MT
(\050cset \050z\051\051)SH
19479 45946 MT
(\050z \050\050car {^ ^ x car}\051)SH
21639 46894 MT
(\050cdr \050\050cat append\051)SH
24879 47842 MT
(\050x {^ ^ ^ x cdr}\051)SH
24879 48790 MT
(\050y {^ ^ ^ y}\051\051\051\051\051)SH
19479 49738 MT
(\050car {^ z car}\051)SH
19479 50686 MT
(\050cdr {^ z cdr}\051\051\051\051\051)SH
17319 51634 MT
(\050\050\050cat member\051)SH
18399 52582 MT
(\050alt member)SH
18939 53530 MT
(\050\050\050x {^ y car}\051\051)SH
19479 54478 MT
(\050\050y \050\050cdr any\051\051\051)SH
20019 55426 MT
(\050m \050\050cat member\051)SH
22179 56374 MT
(\050x {^ ^ x}\051)SH
22179 57322 MT
(\050y {^ ^ y cdr}\051\051\051\051\051\051\051\051\051\051\051)SH
42480 29038 50 10440 57907 BX BX1
10 /Times-Roman AF
10080 60386 MT
(This grammar is actually almost equivalent to the following PROLOG program:)SH
9 /Courier AF
10839 63019 MT
(member\050X,[X|_]\051.)SH
10839 63967 MT
(member\050X,[_|Y]\051 :- member\050X,Y\051)SH
10839 65863 MT
(append\050[],Ys,Ys\051.)SH
10839 66811 MT
(append\050[X|Xs],Ys,[X|Zs]\051 :- append\050Xs,Ys,Zs\051.)SH
42480 7048 50 10440 68158 BX BX1
10 /Times-Roman AF
10080 70637 MT
(Note that the PROLOG form is much nicer! But there are reasons)
55 W( to look at the FUG version anyway. Here is)54 W
ES
%%Page: 128 129
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(128)SH
6120 11486 MT
(how it works.)SH
14 /Times-Bold AF
6120 15304 MT
(III.2. Representing Lists as FDs)SH
10 /Times-Roman AF
7920 16681 MT
(The first problem to handle lists with FUGs, is to represent lists as FDs, since FUGs can handle only FDs.)SH
7920 19160 MT
(Quite simply, lists are represented as an FD with two features, CAR and CDR \050with names ala Lisp\051.)SH
9 /Courier AF
8679 20845 MT
(The list \050a b c\051 is represented by the FD:)SH
8679 22741 MT
(\050\050car a\051)SH
9219 23689 MT
(\050cdr \050\050car b\051)SH
12459 24637 MT
(\050cdr \050\050car c\051)SH
15699 25585 MT
(\050cdr none\051\051\051\051\051\051)SH
8679 27481 MT
(The list \050a \050b c\051\051 is represented by the FD:)SH
8679 29377 MT
(\050\050car a\051)SH
9219 30325 MT
(\050cdr \050\050car \050\050car b\051)SH
15699 31273 MT
(\050cdr \050\050car c\051)SH
18939 32221 MT
(\050cdr none\051\051\051\051\051)SH
12459 33169 MT
(\050cdr none\051\051\051\051)SH
42480 13870 50 8280 33754 BX BX1
12 /Times-Bold AF
6120 37438 MT
(III.2.1. NIL and variables)SH
10 /Times-Roman AF
7920 38815 MT
(Note in the previous example that the equivalent)
21 W( of the lisp atom NIL is NONE in the FD. NIL in an FD means)22 W
6120 40192 MT
(``anything can come here'' whereas NONE means ``nothing can come here''. NIL therefore)
58 W( plays a role similar to)57 W
6120 41569 MT
(uninstantiated variables in PROLOG.)SH
9 /Courier AF
8679 43254 MT
(The PROLOG expression [a X c] can be represented by the FD:)SH
8679 45150 MT
(\050\050car a\051)
SH( \050\050car)
14580 W( a\051)SH
9219 46098 MT
(\050cdr \050\050car nil\051)
SH( \050cdr)
10800 W( \050\050cdr \050\050car c\051)SH
12459 47046 MT
(\050cdr \050\050car c\051)
SH( <==>)
4860 W( \050cdr)
7560 W( none\051\051\051\051\051\051)SH
15699 47994 MT
(\050cdr none\051\051\051\051\051\051)SH
8679 49890 MT
(The PROLOG expression [a b | Xs] can be represented by the FD:)SH
8679 51786 MT
(\050\050car a\051)SH
9219 52734 MT
(\050cdr \050\050car b\051\051\051\051)SH
42480 11026 50 8280 53319 BX BX1
12 /Times-Bold AF
6120 57003 MT
(III.2.2. The "~" notation)SH
10 /Times-Roman AF
7920 58380 MT
(The car/cdr notation for lists)
132 W( is very awkward to use. The file FDLIST.L includes a mechanism to translate)133 W
6120 59757 MT
(between the regular Lisp notation and the FD notation. It defines the macro-character "~" to indicate list values.)SH
9 /Courier AF
8679 61442 MT
(\050\050cat member\051)
SH( \050\050cat)
3780 W( member\051)SH
9219 62390 MT
(\050x a\051)
SH( <==>)
4860 W( \050x)
540 W( a\051)SH
9219 63338 MT
(\050y ~\050c b a\051\051\051)
SH( \050y)
3780 W( \050\050car c\051)SH
22719 64286 MT
(\050cdr \050\050car b\051)SH
25959 65234 MT
(\050cdr \050\050car a\051)SH
29199 66182 MT
(\050cdr none\051\051\051\051\051\051\051\051)SH
42480 6286 50 8280 66767 BX BX1
10 /Times-Roman AF
7920 69246 MT
(Note that the "~" notation can be used)
60 W( only for completely specified lists. If some elements are uninstantiated,)59 W
6120 70623 MT
(you must describe the list with the car/cdr notation.)SH
ES
%%Page: 129 130
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(129)SH
10080 11486 MT
(The ~n notation can be used)
5 W( to refer to elements of lists represented as FDs.  The path {l ~4} refers to the fourth)6 W
8280 12863 MT
(element of the list l.  It is equivalent to the path {l cdr cdr cdr car}.)SH
14 /Times-Bold AF
8280 16681 MT
(III.3. Environment and Variable Names vs. FD and Path)SH
10 /Times-Roman AF
10080 18058 MT
(The notions of environment and variable in PROLOG or LISP correspond to the notion of ``total FD'')
22 W( and path)21 W
8280 19435 MT
(in Functional Unification. What we call a ``total FD'' is the highest level FD, the one)
9 W( corresponding to the path \050\051. It)10 W
8280 20812 MT
(is the FD corresponding to the input to the unifier,)
27 W( and that will be ``determined'' at the end of unification. This FD)26 W
8280 22189 MT
(contains all the environment of a computation.)SH
10080 24668 MT
(Variables are then just places or positions within this total FD.)SH
9 /Courier AF
10839 26353 MT
(If the total FD is the FD corresponding to [a X c])SH
10839 28249 MT
(\050\050car a\051)SH
11379 29197 MT
(\050cdr \050\050cdr \050\050car c\051)SH
17859 30145 MT
(\050cdr none\051\051\051\051\051\051)SH
10839 32041 MT
(The variable X can be refered to by using the path \050cdr car\051)SH
42480 7996 50 10440 33388 BX BX1
14 /Times-Bold AF
8280 37206 MT
(III.4. Procedures vs. Categories, Arguments vs. Constituents)SH
10 /Times-Roman AF
10080 38583 MT
(A program in FUG can be viewed as a collection of procedures, each procedure)
226 W( being represented by a)227 W
8280 39960 MT
(category. In the member example of section III.1, an input containing the feature)81 W
/Times-Italic SF
41880 XM
(\050cat member\051)80 W
/Times-Roman SF
47649 XM
(will be sent to the)80 W
/Times-Italic SF
8280 41337 MT
(member)SH
/Times-Roman SF
11751 XM
(procedure.)SH
10080 43816 MT
(Procedures expect)
55 W( arguments and return results. There is no notion of input and output in unification, as far as)56 W
8280 45193 MT
(arguments are concerned. So we just consider arguments in general.)
98 W( For example, the)97 W
/Times-Italic SF
43987 XM
(member)SH
/Times-Roman SF
47555 XM
(procedure has two)97 W
8280 46570 MT
(arguments, called X and Y and represented in FUG notation by the constituents X and Y of the)SH
/Times-Italic SF
46524 XM
(\050cat member\051)SH
/Times-Roman SF
(.)SH
10080 49049 MT
(The procedure)60 W
/Times-Italic SF
16253 XM
(append)SH
/Times-Roman SF
19507 XM
(has three arguments, X, Y and Z. Z can be seen as the ``result'' of the)
60 W( procedure, or in)61 W
8280 50426 MT
(functional notation: Z = append\050X,Y\051.)SH
10080 52905 MT
(Note that, as in the corresponding PROLOG program, the FUG implementation)
184 W( of)183 W
/Times-Italic SF
45505 XM
(member)SH
/Times-Roman SF
49159 XM
(and)SH
/Times-Italic SF
51036 XM
(append)SH
/Times-Roman SF
54413 XM
(is)SH
8280 54282 MT
(non-directional. All)
448 W( of the arguments can be partially specified, and the unification enforces the)
99 W( relation existing)100 W
8280 55659 MT
(between them.)SH
14 /Times-Bold AF
8280 59477 MT
(III.5. The total FD Includes the Stack of all Computation)SH
10 /Times-Roman AF
10080 60854 MT
(One problem with the way FUG work is that there)
206 W( is no notion of ``environment'' besides the total FD.)205 W
8280 62231 MT
(Therefore, when)
213 W( a program works recursively, all the local variables that are normally stacked in an external)214 W
8280 63608 MT
(environment are stacked within the total FD. At the end, the total FD contains the whole stack of)
60 W( the computation,)59 W
8280 64985 MT
(and is pretty heavy to manipulate.)SH
10080 67464 MT
(As an example here is the result of the simple call append\050[a,b],[c,d],Z\051:)SH
ES
%%Page: 130 131
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(130)SH
9 /Courier AF
8679 11761 MT
(\050\050CAT APPEND\051)SH
9219 12709 MT
(\050X \050\050CAR A\051 \050CDR \050\050CAR B\051 \050CDR NONE\051\051\051\051\051)SH
9219 13657 MT
(\050Y \050\050CAR C\051 \050CDR \050\050CAR D\051 \050CDR NONE\051\051\051\051\051)SH
9219 14605 MT
(\050Z)SH
9759 15553 MT
(\050\050CAR A\051)SH
10299 16501 MT
(\050CDR)SH
11379 17449 MT
(\050\050CAT APPEND\051)SH
11919 18397 MT
(\050X \050\050CAR B\051 \050CDR NONE\051\051\051)SH
11919 19345 MT
(\050Y \050\050CAR C\051 \050CDR \050\050CAR D\051 \050CDR NONE\051\051\051\051\051)SH
11919 20293 MT
(\050Z)SH
12459 21241 MT
(\050\050CAR B\051)SH
12999 22189 MT
(\050CDR)SH
14079 23137 MT
(\050\050CAT APPEND\051)SH
14619 24085 MT
(\050X NONE\051)SH
14619 25033 MT
(\050Y \050\050CAR C\051 \050CDR \050\050CAR D\051 \050CDR NONE\051\051\051\051)SH
14619 25981 MT
(\050Z \050\050CAR C\051 \050CDR \050\050CAR D\051 \050CDR NONE\051\051\051\051\051)SH
14619 26929 MT
(\050CAR C\051)SH
14619 27877 MT
(\050CDR \050\050CAR D\051 \050CDR NONE\051\051\051\051\051\051\051)SH
11919 28825 MT
(\050CAR B\051)SH
11919 29773 MT
(\050CDR)SH
12999 30721 MT
(\050\050CAT APPEND\051)SH
13539 31669 MT
(\050X NONE\051)SH
13539 32617 MT
(\050Y \050\050CAR C\051 \050CDR \050\050CAR D\051 \050CDR NONE\051\051\051\051\051)SH
13539 33565 MT
(\050Z \050\050CAR C\051 \050CDR \050\050CAR D\051 \050CDR NONE\051\051\051\051\051)SH
13539 34513 MT
(\050CAR C\051)SH
13539 35461 MT
(\050CDR \050\050CAR D\051 \050CDR NONE\051\051\051\051\051\051\051\051\051)SH
9219 36409 MT
(\050CAR A\051)SH
9219 37357 MT
(\050CDR)SH
10299 38305 MT
(\050\050CAT APPEND\051)SH
10839 39253 MT
(\050X \050\050CAR B\051 \050CDR NONE\051\051\051)SH
10839 40201 MT
(\050Y \050\050CAR C\051 \050CDR \050\050CAR D\051 \050CDR NONE\051\051\051\051\051)SH
10839 41149 MT
(\050Z)SH
11379 42097 MT
(\050\050CAR B\051)SH
11919 43045 MT
(\050CDR)SH
12999 43993 MT
(\050\050CAT APPEND\051)SH
13539 44941 MT
(\050X NONE\051)SH
13539 45889 MT
(\050Y \050\050CAR C\051 \050CDR \050\050CAR D\051 \050CDR NONE\051\051\051\051\051)SH
13539 46837 MT
(\050Z\050\050CAR C\051 \050CDR \050\050CAR D\051 \050CDR NONE\051\051\051\051\051)SH
13539 47785 MT
(\050CAR C\051)SH
13539 48733 MT
(\050CDR \050\050CAR D\051 \050CDR NONE\051\051\051\051\051\051\051)SH
10839 49681 MT
(\050CAR B\051)SH
10839 50629 MT
(\050CDR)SH
11919 51577 MT
(\050\050CAT APPEND\051)SH
12459 52525 MT
(\050X NONE\051)SH
12459 53473 MT
(\050Y \050\050CAR C\051 \050CDR \050\050CAR D\051 \050CDR NONE\051\051\051\051\051)SH
12459 54421 MT
(\050Z \050\050CAR C\051 \050CDR \050\050CAR D\051 \050CDR NONE\051\051\051\051\051)SH
12459 55369 MT
(\050CAR C\051)SH
12459 56317 MT
(\050CDR \050\050CAR D\051 \050CDR NONE\051\051\051\051\051\051\051\051)SH
42480 46102 50 8280 56902 BX BX1
10 /Times-Roman AF
7920 59381 MT
(Fortunately, the only thing of interest in this FD is probably the value of the constituents CAR and CDR of Z.)SH
14 /Times-Bold AF
6120 63199 MT
(III.6. Analogy with PROLOG programs)SH
10 /Times-Roman AF
7920 64576 MT
(We have seen so far what aspects of FUGs are specific and different from other programming languages.)SH
7920 67055 MT
(A program written using a FUG is very similar to a PROLOG program:)SH
/Symbol SF
7910 68508 MT
(\267)SH
/Times-Roman SF
8620 XM
(The notion)
126 W( of success and failure in unification are equivalent to the ``yes'' and ``no'' of PROLOG)127 W
8620 69613 MT
(programs.)SH
/Symbol SF
7910 71371 MT
(\267)SH
/Times-Roman SF
8620 XM
(Simple statement)
221 W( can be combined using the connectives AND and OR: both FDs and PROLOG)220 W
ES
%%Page: 131 132
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(131)SH
10780 11486 MT
(statements make use of conjunction and disjunction.)SH
/Symbol SF
10070 13244 MT
(\267)SH
/Times-Roman SF
10780 XM
(Both notations rely heavily on unification, and refinement of partial)
83 W( descriptions to perform computa-)84 W
10780 14349 MT
(tions.)SH
14 /Times-Bold AF
8280 18167 MT
(III.7. Use of Set Values in Linguistic Applications)SH
10 /Times-Roman AF
10080 19544 MT
(This discussion of FUGs as programming languages can appear frivolous. It is actually motivated)
37 W( by the desire)36 W
8280 20921 MT
(to integrate more expressive features in linguistic grammars.)SH
10080 23400 MT
(There are many different reasons to use set values in grammatical descriptions.)
160 W( For example, to describe a)161 W
8280 24777 MT
(conjunction like ``John, Mary and Frank'' the set {John, Mary, Frank} appears)
114 W( as a good candidate. Many other)113 W
8280 26154 MT
(applications for the category of set appear quite naturally when writing a grammar.)SH
10080 28633 MT
(We want to be able to express grammatical constraints on such constructs within)
59 W( the framework of FUGs. We)60 W
8280 30010 MT
(have found the procedures)SH
/Times-Italic SF
19110 XM
(member)SH
/Times-Roman SF
22581 XM
(and)SH
/Times-Italic SF
24275 XM
(append)SH
/Times-Roman SF
27469 XM
(to be quite useful in this attempt.)SH
ES
%%Page: 132 133
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(132)SH
ES
%%Page: 133 134
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(133)SH
16 /Times-Bold AF
27256 11872 MT
(Appendix IV)SH
14589 13280 MT
(Non Standard Features of the Implementation and)SH
27592 14688 MT
(Restrictions)SH
10 /Times-Roman AF
10080 16065 MT
(The current implementation includes features not available)
110 W( in other systems working with functional unifica-)109 W
8280 17442 MT
(tion, and imposes restrictions.  This section)
63 W( lists these non-standard aspects of the implementation. For each of the)64 W
8280 18819 MT
(restriction, it is precised whether)
32 W( the checking functions)31 W
/Courier SF
31167 XM
(\050fd-p, fd-sem)31 W
/Times-Roman SF
39279 XM
(and)SH
/Courier SF
41004 XM
(grammar-p)SH
/Times-Roman SF
(\051 detect the limitation)31 W
8280 20196 MT
(or not.)SH
14 /Times-Bold AF
8280 24014 MT
(IV.1. Typed Features)SH
10 /Times-Roman AF
10080 25391 MT
(This implementation supports the definition of types of symbols as described in the section on typing.)SH
14 /Times-Bold AF
8280 29231 MT
(IV.2. The)SH
/Times-Roman SF
14270 XM
(FSET)SH
/Times-Bold SF
17886 XM
(Special Attribute and Typed Constituents)SH
10 /Times-Roman AF
10080 30608 MT
(This implementation supports the)
185 W( special attribute)186 W
/Courier SF
31470 XM
(FSET)SH
/Times-Roman SF
34306 XM
(to implement the notion of typed constituent and)186 W
8280 31985 MT
(express completeness constraints.  An fd)24 W
/Courier SF
24949 XM
(\050\050fset \050a b c\051\051 \050a)
24 W( 1\051\051)23 W
/Times-Roman SF
38541 XM
(can only have defined values \050non-)23 W
/Courier SF
(none)SH
/Times-Roman SF
8280 33362 MT
(values\051 for the attributes a, b and c.  All other attributes are considered as having value)40 W
/Courier SF
43869 XM
(none)SH
/Times-Roman SF
(. Two)331 W
/Courier SF
49224 XM
(FSET)SH
/Times-Roman SF
51915 XM
(features)SH
8280 34739 MT
(can be unified, and the result is the intersection of the two values.)SH
10080 37218 MT
(File)SH
/Courier SF
11886 XM
(test1.l)SH
/Times-Roman SF
16336 XM
(in the example directory contains examples of use of)SH
/Courier SF
37693 XM
(fset)SH
/Times-Roman SF
40343 XM
(feature.)SH
14 /Times-Bold AF
8280 41036 MT
(IV.3. User-defined Types)SH
10 /Times-Roman AF
10080 42413 MT
(User defined types with special unification procedures can be)
152 W( defined in this implementation.  Refer to the)151 W
/Courier SF
8280 43790 MT
(define-procedural-type)SH
/Times-Roman SF
21772 XM
(entry in the reference manual for details.  File)43 W
/Courier SF
40710 XM
(test2.l)SH
/Times-Roman SF
45203 XM
(in the example directory)43 W
8280 45167 MT
(contains examples of use of procedural types.)SH
14 /Times-Bold AF
8280 48985 MT
(IV.4. Limits on Disjunction in Input)SH
10 /Times-Roman AF
10080 50362 MT
(To work best, the unifier requires the input to be a simple)
43 W( FD, containing no disjunction \050)42 W
/Courier SF
(alt)SH
/Times-Roman SF
(,)SH
/Courier SF
48880 XM
(ralt)SH
/Times-Roman SF
51572 XM
(or)SH
/Courier SF
52697 XM
(opt)SH
/Times-Roman SF
(\051.)SH
8280 51739 MT
(It can contain patterns.)SH
/Courier SF
17889 XM
(test)SH
/Times-Roman SF
(s and)SH
/Courier SF
22622 XM
(control)SH
/Times-Roman SF
(s are not allowed in input.)SH
10080 54218 MT
(It is advised not to put)30 W
/Courier SF
19427 XM
(pattern)SH
/Times-Roman SF
(s,)SH
/Courier SF
24546 XM
(cset)SH
/Times-Roman SF
(s or)30 W
/Courier SF
28728 XM
(any)SH
/Times-Roman SF
(s in the input fd.  These constructs are indeed best)
30 W( viewed as)31 W
8280 55595 MT
(devices used by the grammar to realize or enforce some constraints. The input should be left as ``declarative'' as)96 W
8280 56972 MT
(possible, and therefore should not contain such constructs.)SH
10080 59451 MT
(If disjunction are found in an FD given to)222 W
/Courier SF
28993 XM
(fd-sem)SH
/Times-Roman SF
(, a warning message is printed.)222 W
/Courier SF
46534 XM
(fd-sem)SH
/Times-Roman SF
50607 XM
(also issues)223 W
8280 60828 MT
(warnings if its argument contains)SH
/Courier SF
21862 XM
(pattern)SH
/Times-Roman SF
(s or)SH
/Courier SF
27784 XM
(cset)SH
/Times-Roman SF
(s.)SH
10080 63307 MT
(It is possible to use input fds containing disjunctions in two ways: one way is to first ``normalize'' the input fd)39 W
8280 64684 MT
(and randomly choose one fd compatible with the disjunction-full fd but containing no)
194 W( disjunction at all.  The)195 W
8280 66061 MT
(function)SH
/Courier SF
12092 XM
(normalize-fd)SH
/Times-Roman SF
19771 XM
(performs this operation.)
229 W( The)
706 W( other way to use disjunctions in input is to use the)228 W
8280 67438 MT
(low-level unifier function)229 W
/Courier SF
19493 XM
(u-disjunctions)SH
/Times-Roman SF
28372 XM
(. Note)
708 W( that in general,)229 W
/Courier SF
38911 XM
(u-disjunctions)SH
/Times-Roman SF
47790 XM
(can be)
229 W( extremely)230 W
8280 68815 MT
(inefficient unless some control mechanisms are properly used.)SH
ES
%%Page: 134 135
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(134)SH
14 /Times-Bold AF
6120 11738 MT
(IV.5. Mergeable Constituents in Patterns)SH
10 /Times-Roman AF
7920 13115 MT
(An extension to the)
68 W( standard pattern unification mechanism is the use of ``mergeable constituents''. A merge-)67 W
6120 14492 MT
(able constituent in a pattern is noted)81 W
/Courier SF
21380 XM
(\050* constituent-name\051)81 W
/Times-Roman SF
(. This notation indicates)
81 W( that when unifying the)82 W
6120 15869 MT
(pattern containing it, this constituent)
107 W( can be ``merged'' or unified with another constituent that would need to be)106 W
6120 17246 MT
(placed at the same position in the pattern.)SH
7920 19725 MT
(For example, patterns)21 W
/Courier SF
16926 XM
(\050a ... b\051)21 W
/Times-Roman SF
22639 XM
(and)SH
/Courier SF
24354 XM
(\050c ... b\051)21 W
/Times-Roman SF
30067 XM
(cannot be unified, because the first position of the)
21 W( unify-)22 W
6120 21102 MT
(ing pattern would need to be both)23 W
/Courier SF
19974 XM
(a)SH
/Times-Roman SF
20847 XM
(and)SH
/Courier SF
22564 XM
(c)SH
/Times-Roman SF
(. But)
23 W( patterns)22 W
/Courier SF
28842 XM
(\050\050* a\051 ... b\051)22 W
/Times-Roman SF
36980 XM
(and)SH
/Courier SF
38696 XM
(\050c ... b\051)22 W
/Times-Roman SF
44412 XM
(can be unified, under)22 W
6120 22479 MT
(the constraint that constituents)68 W
/Courier SF
18836 XM
(a)SH
/Times-Roman SF
19754 XM
(and)SH
/Courier SF
21516 XM
(c)SH
/Times-Roman SF
22434 XM
(be unified)
68 W( \050or ``merged''\051. See also section 5.6 for a description of pattern)69 W
6120 23856 MT
(unification.)SH
14 /Times-Bold AF
6120 27674 MT
(IV.6. Indexing of Alternation)SH
10 /Times-Roman AF
7920 29051 MT
(This implementation allows indexing of)SH
/Courier SF
24170 XM
(alt)SH
/Times-Roman SF
(s. The notation used is:)SH
/Courier SF
7920 31530 MT
(\050alt {trace-flag} {\050index {...} indexed-path\051} \050branches+\051\051)SH
/Times-Roman SF
7920 34009 MT
(where each branch is a regular fd. The validity of the)351 W
/Courier SF
33219 XM
(indexed-path)SH
/Times-Roman SF
41020 XM
(is checked by)
351 W( the function)350 W
/Courier SF
6120 35386 MT
(grammar-p)SH
/Times-Roman SF
(.)SH
14 /Times-Bold AF
6120 39204 MT
(IV.7. Test and Control)SH
10 /Times-Roman AF
7920 40581 MT
(It is possible to specify arbitrary constraints on)
120 W( the result of an unification within the grammar by using the)121 W
6120 41958 MT
(constructs)SH
/Courier SF
10425 XM
(test)SH
/Times-Roman SF
13075 XM
(and)SH
/Courier SF
14769 XM
(control)SH
/Times-Roman SF
19219 XM
(described in section 4.7. The notation is:)SH
/Courier SF
7920 44437 MT
(\050TEST <lisp-expression>\051)SH
/Times-Roman SF
7920 46916 MT
(where)SH
/Times-Italic SF
10621 XM
(<lisp-expression>)SH
/Times-Roman SF
18284 XM
(is an arbitrary lisp expression,)
8 W( where certain variables can be)7 W
/Courier SF
42990 XM
(#@\050path\051)SH
/Times-Roman SF
(, and refer to)7 W
6120 48293 MT
(the value of)16 W
/Courier SF
11139 XM
(\050path\051)SH
/Times-Roman SF
15005 XM
(in the)
16 W( determined result of the unification \050see section 5.9 for a definition of the determination)17 W
6120 49670 MT
(stage of unification\051.)SH
7920 52149 MT
(Unification succeeds if the evaluation of)190 W
/Times-Italic SF
25501 XM
(<lisp-expression>)SH
/Times-Roman SF
33346 XM
(in the environment of)
190 W( the determined result is)189 W
6120 53526 MT
(non)SH
/Courier SF
(-nil)SH
/Times-Roman SF
(. If it is)SH
/Courier SF
13159 XM
(nil)SH
/Times-Roman SF
(, the unifier backtracks.)SH
/Courier SF
7920 56005 MT
(control)SH
/Times-Roman SF
12396 XM
(works in a similar way,)
26 W( except that the)27 W
/Times-Italic SF
28300 XM
(<lisp-expression>)SH
/Times-Roman SF
35982 XM
(is evaluated immediately when the unifier)27 W
6120 57382 MT
(encounters the)SH
/Courier SF
12174 XM
(control)SH
/Times-Roman SF
(, and therefore is evaluated in a non-determined fd.)SH
7920 59861 MT
(Note that both)189 W
/Courier SF
14459 XM
(test)SH
/Times-Roman SF
17298 XM
(and)SH
/Courier SF
19181 XM
(control)SH
/Times-Roman SF
23820 XM
(can be used only to enforce complex constraints but)
189 W( not to compute)188 W
6120 61238 MT
(complex results to be added in the unification.)SH
7920 63717 MT
(The function)SH
/Courier SF
13308 XM
(grammar-p)SH
/Times-Roman SF
18958 XM
(does not check that the value of)SH
/Courier SF
31872 XM
(test)SH
/Times-Roman SF
34522 XM
(and)SH
/Courier SF
36216 XM
(control)SH
/Times-Roman SF
40666 XM
(is a valid lisp-expression.)SH
ES
%%Page: 135 136
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(135)SH
14 /Times-Bold AF
8280 11760 MT
(IV.8.)SH
/Times-Roman SF
11586 XM
(GIVEN)SH
/Times-Bold SF
16290 XM
(and)SH
/Times-Roman SF
18896 XM
(UNDER)SH
10 SS 
10080 13137 MT
(The special value)19 W
/Courier SF
17385 XM
(given)SH
/Times-Roman SF
20654 XM
(and the related construct)19 W
/Courier SF
30783 XM
(under)SH
/Times-Roman SF
34052 XM
(are defined)
19 W( in this implementation.  A feature)20 W
/Courier SF
52680 XM
(\050att)SH
8280 14514 MT
(given\051)SH
/Times-Roman SF
12271 XM
(is unified with an input fd, if the input contains a real value for attribute)141 W
/Courier SF
43327 XM
(att)SH
/Times-Roman SF
45518 XM
(at the beginning of)
141 W( the)140 W
8280 15891 MT
(unification. When)
402 W( typed features are defined,)
76 W( a feature)77 W
/Courier SF
31265 XM
(\050att #\050under symb\051\051)77 W
/Times-Roman SF
43146 XM
(is unified with an input fd, if)77 W
8280 17268 MT
(the input contains a value for attribute)SH
/Courier SF
23750 XM
(att)SH
/Times-Roman SF
25800 XM
(which is)SH
/Times-Italic SF
29411 XM
(more specific)SH
/Times-Roman SF
35021 XM
(than)SH
/Courier SF
36993 XM
(symb)SH
/Times-Roman SF
39643 XM
(at the beginning of the unification.)SH
10080 19747 MT
(Note that if)3 W
/Courier SF
14894 XM
(symb)SH
/Times-Roman SF
17547 XM
(has no specializations defined in a type hierarchy, the notation)2 W
/Courier SF
42757 XM
(\050att #\050under symb\051\051)2 W
/Times-Roman SF
54413 XM
(is)SH
8280 21124 MT
(equivalent to)SH
/Courier SF
13724 XM
(\050\050att given\051 \050att symb\051\051)SH
/Times-Roman SF
(.)SH
/Courier SF
10080 23603 MT
(given)SH
/Times-Roman SF
13330 XM
(and)SH
/Courier SF
15024 XM
(under)SH
/Times-Roman SF
18274 XM
(are useful to check the presence of required features in inputs.)SH
14 /Times-Bold AF
8280 27443 MT
(IV.9.)SH
/Times-Roman SF
11586 XM
(EXTERNAL)SH
/Times-Bold SF
19323 XM
(Specifications and Macros)SH
10 /Times-Roman AF
10080 28820 MT
(The implementation supports the)69 W
/Courier SF
23800 XM
(EXTERNAL)SH
/Times-Roman SF
28919 XM
(construct which provides a form of)
69 W( delayed dynamic expression)70 W
8280 30197 MT
(of constraints and a mechanism for a macro facility in grammars.)SH
10080 32676 MT
(A feature)198 W
/Courier SF
14474 XM
(\050att #\050external <fctn>\051\051)198 W
/Times-Roman SF
29718 XM
(in a grammar is interpreted as follows: the)
198 W( unifier calls the)197 W
8280 34053 MT
(function <fctn> with one)
13 W( argument, the path at which the external feature is being unified.  The function must return)14 W
8280 35430 MT
(a valid fd <F>.  The unifier then continue unification with this returned fd instead of the as if the feature had)
60 W( been)59 W
/Courier SF
8280 36807 MT
(\050a <F>\051)SH
/Times-Roman SF
12730 XM
(in the first place.)SH
10080 39286 MT
(It is therefore possible to dynamically decide, at run-time, what constraints will be used in the grammar.)SH
14 /Times-Bold AF
8280 43126 MT
(IV.10. User-defined)SH
/Times-Roman SF
20335 XM
(CAT)SH
/Times-Bold SF
23485 XM
(Parameter)SH
10 /Times-Roman AF
10080 44503 MT
(The)SH
/Courier SF
11965 XM
(CAT)SH
/Times-Roman SF
14095 XM
(parameter is used to identify constituents in an fd when the)80 W
/Courier SF
38834 XM
(cset)SH
/Times-Roman SF
41565 XM
(attribute is not present.  Through)81 W
8280 45880 MT
(this mechanism, the unifier implements a breadth-first top-down traversal of the structures being generated.)SH
10080 48359 MT
(By default, the)35 W
/Courier SF
16351 XM
(CAT)SH
/Times-Roman SF
18436 XM
(parameter is equal to the symbol)34 W
/Courier SF
31916 XM
(cat)SH
/Times-Roman SF
(. It)
318 W( is however possible to specifiy another value for)34 W
8280 49736 MT
(this parameter.  As a consequence, it is possible to traverse the same)
240 W( fd structure and to assign the role of)241 W
8280 51113 MT
(constituents to different sub-structures by adjusting the value)
84 W( of this parameter.  This feature is particularly useful)83 W
8280 52490 MT
(when an fd is being processed through a pipe-line of grammars.)SH
14 /Times-Bold AF
8280 56308 MT
(IV.11. Resource Limited Processing)SH
10 /Times-Roman AF
10080 57685 MT
(It is possible to limit the time the unifier will devote to a particular call.  The :limit keyword available in all)98 W
8280 59062 MT
(unification functions specifies the maximum number of backtracking points)
18 W( that can be allocated to a particular call.)17 W
8280 60439 MT
(Using this feature it is possible to perform ``fuzzy'')
191 W( unification.  \050Note that the appropriateness of a fuzzy or)192 W
8280 61816 MT
(incomplete unification relies on the particular control strategy used of breadth-first top-down expansion.\051)SH
14 /Times-Bold AF
8280 65656 MT
(IV.12.)SH
/Times-Roman SF
12286 XM
(BK-CLASS)SH
/Times-Bold SF
19403 XM
(Control Specification)SH
10 /Times-Roman AF
10080 67033 MT
(The idea behind)25 W
/Courier SF
16848 XM
(bk-class)SH
/Times-Roman SF
21923 XM
(is to take advantage of the knowledge of where a failure occurs in the graph being)24 W
8280 68410 MT
(unified to filter the stack of backtracking points.  Note that a failure always happens)
10 W( at a leaf of the graph because of)11 W
8280 69787 MT
(a conflict between two atomic values.  The path leading to the point of the failure is called the ``failure address''.)SH
ES
%%Page: 136 137
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(136)SH
7920 11486 MT
(Note also that backtracking points are all associated with a disjunction construct in the grammar.)SH
7920 13965 MT
(In FUF, you can annotate each disjunction to either catch \050restart\051 or ignore \050propagate)
125 W( higher on the stack\051)124 W
6120 15342 MT
(failures occurring at certain pre-declared failure addresses.)SH
7920 17821 MT
(The details are:)SH
8120 19160 MT
(1.)SH
9120 XM
(Define classes of failure addresses as regular expressions on paths.)
SH( These)
252 W( are called the bk-classes \050for)1 W
9120 20265 MT
(backtracking classes\051.  All failures that occur at)
41 W( an address which is not a member of any bk-class are)40 W
9120 21370 MT
(treated normally by all backtracking point.)SH
8120 23128 MT
(2.)SH
9120 XM
(Annotate certain disjunctions \050and therefore the)
65 W( backtracking points they place on the stack\051 with the)66 W
9120 24233 MT
(list of classes to which they are allowed to respond:)SH
9 /Courier AF
15999 25918 MT
(\050alt \050:bk-class c1 ... cn\051 ...\051)SH
36980 1546 50 11280 26503 BX BX1
10 /Times-Roman AF
8120 28261 MT
(3.)SH
9120 XM
(During backtracking, a backtracking point checks if the failure)
10 W( address is part of a bk-class, and if it is,)9 W
9120 29366 MT
(whether it is a member of the bk-classes)
148 W( it is declared to process.  If it is, the b-point restarts the)149 W
9120 30471 MT
(computation \050by proceeding to the next alternative in the disjunction\051, otherwise)
143 W( it just ignores the)142 W
9120 31576 MT
(failure and propagates it to the rest of the stack.)SH
7920 34055 MT
(Through this mechanism, only the decisions that are ``relevant'' to the current failure need to be undone.)SH
7920 36534 MT
(In practice, this)
76 W( mechanism when it is applicable provides huge performance gains, but it is rarely applicable:)77 W
6120 37911 MT
(the problem is to define the bk-classes and it is)
70 W( a difficult task.  You need to experiment a lot with it though as in)69 W
6120 39288 MT
(general, bk-class has lots of potential.  The problem)
198 W( is deciding when it is applicable in the context of a big)199 W
6120 40665 MT
(grammar.)SH
7920 43144 MT
(Note that this mechanism relates to the ``cut'' of Prolog but it also has a big advantage: if)
141 W( the)140 W
/Courier SF
48120 XM
(bk-class)SH
/Times-Roman SF
6120 44521 MT
(annotations are done consistently \050which cannot be)
3 W( checked automatically\051, then the semantics of the grammar is not)4 W
6120 45898 MT
(modified by)
4 W( the annotation in the sense that all the results produced by the ``pure grammar'' would also be produced)3 W
6120 47275 MT
(by the grammar with the annotation.)SH
7920 49754 MT
(Note also that this mechanism is implemented in such a way that when it is not used)
74 W( in the grammar, there is)75 W
6120 51131 MT
(very little overhead in processing time.)SH
7920 53610 MT
(An example of use of bk-class is provided in grammar GR7 .)SH
14 /Times-Bold AF
6120 57428 MT
(IV.13. WAIT Control Specification)SH
10 /Times-Roman AF
7920 58805 MT
(The idea is to freeze a)
102 W( decision until enough information is gathered by the rest of the unification process to)101 W
6120 60182 MT
(make the decision efficiently.  The annotation is:)SH
9 /Courier AF
12999 61867 MT
(\050alt \050:wait \050<path1> <value1>\051 ...\051 ...\051)SH
42480 1546 50 8280 62452 BX BX1
10 /Times-Roman AF
7920 64931 MT
(When the)
90 W( unifier meets such a disjunction, it first checks if all the)91 W
/Courier SF
35654 XM
(pathi)SH
/Times-Roman SF
38995 XM
(have a value which is instantiated)91 W
6120 66308 MT
(\050)SH
/Courier SF
(valuei)SH
/Times-Roman SF
10399 XM
(is used with typed symbols\051.)
96 W( If)
440 W( they are all instantiated, it proceeds as usual.  If they are not, then the)95 W
6120 67685 MT
(disjunction is put on hold \050frozen\051 and the unification proceeds with the other constraints in the grammar.)
SH( Whenever)252 W
6120 69062 MT
(a toplevel disjunction is entered,)
169 W( the unifier checks if one of the frozen disjunctions can be thawed.  If all the)168 W
ES
%%Page: 137 138
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(137)SH
8 SS 
28808 11349 MT
(17)SH
10 SS 
8280 11694 MT
(decisions to be made are)
31 W( frozen, any one is forced.)32 W
/Courier SF
30172 XM
(Wait)SH
/Times-Roman SF
32854 XM
(is probably the most powerful of all control constructs.)32 W
8280 13071 MT
(The main benefit it provides is that it allows to order decisions dynamically based on what the input contains.)SH
14 /Times-Bold AF
8280 16889 MT
(IV.14. IGNORE Control Specifications)SH
10 /Times-Roman AF
10080 18266 MT
(The idea is)
181 W( to just ignore certain decisions when there is not enough information, there is already enough)180 W
8280 19643 MT
(information or there are not enough resources.  The 3 cases correspond to the annotations:)SH
9 /Courier AF
15159 21328 MT
(\050alt \050:ignore-when <path> ...\051 ...\051)SH
15159 22276 MT
(\050alt \050:ignore-unless <path> ...\051 ...\051)SH
15159 23224 MT
(\050alt \050:ignore-after <number>\051 ...\051)SH
42480 3442 50 10440 23809 BX BX1
10 SS 
10080 26288 MT
(Ignore-when)SH
/Times-Roman SF
17113 XM
(is triggered when the paths are already instantiated.  This)
183 W( is used when the input already)184 W
8280 27665 MT
(contains information and the grammar does not have to re-derive it.)SH
/Courier SF
10080 30144 MT
(Ignore-unless)SH
/Times-Roman SF
18214 XM
(is triggered when a path is not instantiated.  This is used when the)
84 W( input does not contain)83 W
8280 31521 MT
(enough information at all, and the grammar can just choose an arbitrary default.)SH
/Courier SF
10080 34000 MT
(Ignore-after)SH
/Times-Roman SF
17683 XM
(is triggered)
153 W( after a certain number of backtracking points have been consumed.  This in-)154 W
8280 35377 MT
(dicates that the decision encoded by the disjunction is a detail refinement that is not necessary)
47 W( to the completion of)46 W
8280 36754 MT
(the unification, but would just add to its appropriateness)
140 W( or value.)141 W
/Times-Bold SF
36684 XM
(IGNORE-AFTER IS CURRENTLY NOT)141 W
8280 38131 MT
(IMPLEMENTED)SH
/Times-Roman SF
(.)SH
10080 40610 MT
(The main problem with these annotations is that their evaluation)
157 W( depends on the order in which evaluation)156 W
8280 41987 MT
(proceeds, and that this order is not known to the grammar writer.  But in conjunction with wait, this issue is not)107 W
8280 43364 MT
(necessarily a problem as ``wait'' establishes constraints on when a decision is evaluated.)SH
10800 50 8280 66656 UL
6 SS 
9080 67995 MT
(17)SH
8 SS 
9680 68304 MT
(NOTE: These 2 issues require further)
10 W( optimization: when do you awake a frozen disjunction and which one do you force first can be decided)11 W
8280 69228 MT
(by some sort of dependency analysis, but one that can be done statically by building incrementally a complex data-structure, otw the cost)
39 W( of the)38 W
8280 70152 MT
(analysis would not be justified.)
73 W( Practically,)
348 W( the first issue is most important: it determines how much overhead is added on ALL disjunctions)74 W
8280 71076 MT
(when freeze is used.  I am experimenting currently with a ``granularity'' control system, which controls how)
50 W( often the agenda of frozen disj. is)49 W
8280 72000 MT
(checked. This)
200 W( is currently not implemented.)SH
ES
%%Page: 138 139
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(138)SH
ES
%%Page: 139 140
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(139)SH
16 /Times-Bold AF
27567 11872 MT
(Appendix V)SH
20460 13280 MT
(Changes from Version to Version)SH
14 SS 
8280 17098 MT
(V.1. New Features and Modifications in Version 3)SH
10 /Symbol AF
10070 18551 MT
(\267)SH
/Times-Roman SF
10780 XM
(Paths are now represented with curly braces instead of simple lists.)SH
10780 19656 MT
(Old notation: \050a \050^ ^ b\051\051)SH
10780 20761 MT
(New notation: \050a {^ ^ b}\051)SH
10780 21866 MT
(The emacs routine found in file src/convert.el converts from the old format to the new format.)SH
/Symbol SF
10070 23624 MT
(\267)SH
/Times-Roman SF
10780 XM
(Typed features are now allowed.)SH
/Symbol SF
10070 25382 MT
(\267)SH
/Times-Roman SF
10780 XM
(Paths can now be in the left position of a pair: \050{a} x\051 is legal.)SH
/Symbol SF
10070 27140 MT
(\267)SH
/Times-Roman SF
10780 XM
(External is introduced.)SH
/Symbol SF
10070 28898 MT
(\267)SH
/Times-Roman SF
10780 XM
(Procedural types are introduced.)SH
/Symbol SF
10070 30656 MT
(\267)SH
/Times-Roman SF
10780 XM
(Fset is introduced.)SH
14 /Times-Bold AF
8280 34474 MT
(V.2. New Features and Modification in Version 4)SH
10 /Symbol AF
10070 35927 MT
(\267)SH
/Times-Roman SF
10780 XM
(bk-class is introduced.)SH
/Symbol SF
10070 37685 MT
(\267)SH
/Times-Roman SF
10780 XM
(cset and pattern can contain paths.)SH
/Symbol SF
10070 39443 MT
(\267)SH
/Times-Roman SF
10780 XM
(ordinal and cardinal are added to the morphology.)SH
14 /Times-Bold AF
8280 43261 MT
(V.3. New Features and Modification in Version 5)SH
10 /Symbol AF
10070 44714 MT
(\267)SH
/Times-Roman SF
10780 XM
(syntax of alt is transformed with keywords :demo,)
56 W( :trace, :wait, :bk-class, :ignore-when, :ignore-unless)55 W
10780 45819 MT
(and :order acceptable in any order.  Old syntax is still recognized.)SH
/Symbol SF
10070 47577 MT
(\267)SH
/Times-Roman SF
10780 XM
(wait is introduced.)SH
/Symbol SF
10070 49335 MT
(\267)SH
/Times-Roman SF
10780 XM
(ignore-unless and ignore-when are introduced.)SH
/Symbol SF
10070 51093 MT
(\267)SH
/Times-Roman SF
10780 XM
(@ notation is changed to #@ notation \050to avoid conflict with CLASSIC\051.)SH
/Symbol SF
10070 52851 MT
(\267)SH
/Times-Roman SF
10780 XM
(^n and ~n notations are introduced)SH
/Symbol SF
10070 54609 MT
(\267)SH
/Times-Roman SF
10780 XM
(The incremental cset features are introduced \050cset \050= a ...\051 \050== b ...\051 \050+ c ...\051 \050- d ...\051\051.)SH
/Symbol SF
10070 56367 MT
(\267)SH
/Times-Roman SF
10780 XM
(The punctuation capitalize feature is recognized by the morphology/linearizer module.)SH
/Symbol SF
10070 58125 MT
(\267)SH
/Times-Roman SF
10780 XM
(The def-alt, def-conj, def-grammar syntax is introduced with :& and :!.)SH
/Symbol SF
10070 59883 MT
(\267)SH
/Times-Roman SF
10780 XM
(Def-test and test are introduced.)SH
/Symbol SF
10070 61641 MT
(\267)SH
/Times-Roman SF
10780 XM
(Trace-level is introduced, plus other minor tracing functions.)SH
/Symbol SF
10070 63399 MT
(\267)SH
/Times-Roman SF
10780 XM
(%break% feature is introduced.)SH
/Symbol SF
10070 65157 MT
(\267)SH
/Times-Roman SF
10780 XM
(Digit \050yes, no or roman\051 under ordinal and cardinal is now recognized by the morphology module.)SH
/Symbol SF
10070 66915 MT
(\267)SH
/Times-Roman SF
10780 XM
(^n~ notation is introduced.)SH
/Symbol SF
10070 68673 MT
(\267)SH
/Times-Roman SF
10780 XM
(#{} notation is introduced \050to copy paths instead of unify them\051.)SH
/Symbol SF
10070 70431 MT
(\267)SH
/Times-Roman SF
10780 XM
(Functions relocate and insert-fd are defined.)SH
ES
%%Page: 140 141
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(140)SH
13 /Times-Bold AF
26488 11671 MT
(References)SH
10 /Times-Roman AF
6120 14044 MT
([1])SH
9120 XM
(Ait-Kaci, H.)SH
/Times-Italic SF
9120 15149 MT
(A Lattice-theoretic Approach to Computation Based on a Calculus of Partially Ordered Type Structures)SH
/Times-Roman SF
(.)SH
9120 16254 MT
(PhD thesis, University of Pennsylvania, 1984.)SH
9120 17359 MT
(UMI #8505030.)SH
6120 19150 MT
([2])SH
9120 XM
(Appelt, D. E.)SH
9120 20255 MT
(TELEGRAM: A Grammar Formalism for Language Planning.)SH
9120 21360 MT
(In)SH
/Times-Italic SF
10203 XM
(Proceedings of the Eigth National Conference on Artificial Intelligence)SH
/Times-Roman SF
(, pages 595 - 9.  Karlsruhe, West)SH
10620 22465 MT
(Germany, August, 1983.)SH
6120 24256 MT
([3])SH
9120 XM
(de Kleer, J., Doyle, J., Steele, G.L.Jr, Sussman, G.J.)SH
9120 25361 MT
(Explicit Control of Reasoning.)SH
/Times-Italic SF
9120 26466 MT
(Artificial Intelligence: an MIT Perspective.)SH
/Times-Roman SF
9120 27571 MT
(MIT Press, 1979, pages 93-116.)SH
6120 29362 MT
([4])SH
9120 XM
(Elhadad, M.)SH
9120 30467 MT
(Types in Functional Unification Grammars.)SH
9120 31572 MT
(In)SH
/Times-Italic SF
10203 XM
(Proceedings of ACL'90)SH
/Times-Roman SF
(, pages .  Pittsburgh, 1990.)SH
6120 33363 MT
([5])SH
9120 XM
(Grosz, B.J., Sparck Jones, K. and Webber, B.L.)SH
/Times-Italic SF
9120 34468 MT
(Readings in Natural Language Processing.)SH
/Times-Roman SF
9120 35573 MT
(Morgan Kaufmann, Los Altos, 1986.)SH
6120 37364 MT
([6])SH
9120 XM
(Halliday, M.A.K.)SH
/Times-Italic SF
9120 38469 MT
(An Introduction to Functional Grammar.)SH
/Times-Roman SF
9120 39574 MT
(Edward Arnold, London, 1985.)SH
6120 41365 MT
([7])SH
9120 XM
(Johnson, Mark.)SH
/Times-Italic SF
9120 42470 MT
(CSLI Lecture Notes)SH
/Times-Roman SF
(. Volume)
250 W( 14:)SH
/Times-Italic SF
23009 XM
(Attribute-value Logic and the Theory of Grammar.)SH
/Times-Roman SF
9120 43575 MT
(University of Chicago Press, Chicago, Il, 1988.)SH
6120 45366 MT
([8])SH
9120 XM
(Kaplan, R.M.  and J. Bresnan.)SH
9120 46471 MT
(Lexical-functional grammar: A formal system for grammatical representation.)SH
/Times-Italic SF
9120 47576 MT
(The Mental Representation of Grammatical Relations.)SH
/Times-Roman SF
9120 48681 MT
(MIT Press, Cambridge, MA, 1982.)SH
6120 50472 MT
([9])SH
9120 XM
(Karttunen, L.)SH
9120 51577 MT
(Features and Values.)SH
9120 52682 MT
(In)SH
/Times-Italic SF
10203 XM
(Proceedings of the 10th International Conference on Computational Linguistics \050COLING 84\051)SH
/Times-Roman SF
(, pages)SH
10620 53787 MT
(28-33. ACL,)
250 W( Stanford, California, July, 1984.)SH
6120 55578 MT
([10])SH
9120 XM
(Karttunen, L.)SH
9120 56683 MT
(Structure Sharing with Binary Trees.)SH
9120 57788 MT
(In)SH
/Times-Italic SF
10203 XM
(Proceedings of the 23rd annual meeting of the ACL)SH
/Times-Roman SF
(, pages 133-137.  ACL, Chicago, 1985.)SH
6120 59579 MT
([11])SH
9120 XM
(Karttunen, L.)SH
9120 60684 MT
(D-PATR: A development Environment for Unification-Based Grammars.)SH
9120 61789 MT
(In)SH
/Times-Italic SF
10203 XM
(Proceedings of the 11th International Conference on Computational Linguistics \050COLING 86\051)SH
/Times-Roman SF
(, pages)SH
10620 62894 MT
(74-79. ACL,)
250 W( Bonn, 1986.)SH
6120 64685 MT
([12])SH
9120 XM
(Karttunen, L.)SH
/Times-Italic SF
9120 65790 MT
(D-PATR: A Development Environment for Unification-Based Grammars)SH
/Times-Roman SF
(.)SH
9120 66895 MT
(Technical Report CSLI-86-61, CSLI, August, 1986.)SH
ES
%%Page: 141 142
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(141)SH
8280 11486 MT
([13])SH
11280 XM
(Karttunen, L.)SH
11280 12591 MT
(Parsing in a Free Word Order Language.)SH
/Times-Italic SF
11280 13696 MT
(Natural Language Parsing.)SH
/Times-Roman SF
11280 14801 MT
(Cambridge University Press, Cambridge, England, 1985, pages 279-306.)SH
8280 16592 MT
([14])SH
11280 XM
(Kasper, R.)SH
11280 17697 MT
(Systemic Grammar and Functional Unification Grammar.)SH
/Times-Italic SF
11280 18802 MT
(Systemic Functional Perspectives on discourse: selected papers from the 12th International Systemic)SH
12780 19907 MT
(Workshop.)SH
/Times-Roman SF
11280 21012 MT
(Ablex, Norwood, NJ, 1987.)SH
8280 22803 MT
([15])SH
11280 XM
(Kasper, R.)SH
11280 23908 MT
(A Unification Method for Disjunctive Feature Descriptions.)SH
11280 25013 MT
(In)SH
/Times-Italic SF
12363 XM
(Proceedings of the 25th meeting of the ACL)SH
/Times-Roman SF
(, pages 235-242.  ACL, Stanford University, June, 1987.)SH
8280 26804 MT
([16])SH
11280 XM
(Kasper, R. and W. Rounds.)SH
11280 27909 MT
(A Logical Semantics for Feature Structures.)SH
11280 29014 MT
(In)SH
/Times-Italic SF
12363 XM
(Proceedings of the 24th meeting of the ACL)SH
/Times-Roman SF
(. ACL,)
250 W( Columbia University, New York, NY, June, 1986.)SH
8280 30805 MT
([17])SH
11280 XM
(Kay, M.)SH
11280 31910 MT
(Functional Grammar.)SH
11280 33015 MT
(In)SH
/Times-Italic SF
12363 XM
(Proceedings of the 5th meeting of the Berkely Linguistics Society)SH
/Times-Roman SF
(. Berkeley)
250 W( Linguistics Society, 1979.)SH
8280 34806 MT
([18])SH
11280 XM
(Kay, M.)SH
/Times-Italic SF
11280 35911 MT
(Algorithm Schemata and Data Structures in Syntactic Processing)SH
/Times-Roman SF
(.)SH
11280 37016 MT
(Technical Report CSL-80-12, Xerox Parc, October, 1980.)SH
11280 38121 MT
(Also in Readings in NLP, p35-70.)SH
8280 39912 MT
([19])SH
11280 XM
(Kay, M.)SH
11280 41017 MT
(Functional Unification Grammars: a Formalism for Machine Translation.)SH
11280 42122 MT
(In)SH
/Times-Italic SF
12363 XM
(Proceedings of the 10th International Conference on Computational Linguistics \050COLING 84\051)SH
/Times-Roman SF
(, pages)SH
12780 43227 MT
(75-78. ACL,)
250 W( Stanford University, 1984.)SH
8280 45018 MT
([20])SH
11280 XM
(Kay, M.)SH
11280 46123 MT
(Parsing in Functional Unification Grammar.)SH
/Times-Italic SF
11280 47228 MT
(Natural Language Parsing.)SH
/Times-Roman SF
11280 48333 MT
(Cambridge University Press, Cambridge, England, 1985, pages 152-178.)SH
11280 49438 MT
(Also in Reading in NLP p125-138.)SH
8280 51229 MT
([21])SH
11280 XM
(Knight, K.)SH
11280 52334 MT
(Unification: a Multidisciplinary Survey.)SH
/Times-Italic SF
11280 53439 MT
(Computing Surveys)SH
/Times-Roman SF
19335 XM
(21\0501\051:93-124, March, 1989.)SH
8280 55230 MT
([22])SH
11280 XM
(Pereira, F.C.N.)SH
11280 56335 MT
(A Structure-Sharing Representation for Unification-Based Grammar Formalisms.)SH
11280 57440 MT
(In)SH
/Times-Italic SF
12363 XM
(Proceedings of the 23rd annual meeting of the ACL)SH
/Times-Roman SF
(, pages 137-144.  ACL, Chicago, 1985.)SH
8280 59231 MT
([23])SH
11280 XM
(Pereira, F. and S. Shieber.)SH
11280 60336 MT
(The Semantics of Grammar Formalisms Seen as Computer Languages.)SH
11280 61441 MT
(In)SH
/Times-Italic SF
12363 XM
(Proceedings of the Tenth International Conference on Computational Linguistics \050COLING 84\051)SH
/Times-Roman SF
(, pages)SH
12780 62546 MT
(123-129. ACL,)
250 W( Stanford University, Stanford, Ca, July, 1984.)SH
8280 64337 MT
([24])SH
11280 XM
(Ritchie, G.D.)SH
11280 65442 MT
(Simulating a Turing Machine using Functional Unification Grammar.)SH
11280 66547 MT
(In)SH
/Times-Italic SF
12363 XM
(Proceedings of the Europeean Conference on AI \050ECAI 84\051)SH
/Times-Roman SF
(, pages 127-136.  1984.)SH
8280 68338 MT
([25])SH
11280 XM
(Ritchie, G.D.)SH
11280 69443 MT
(The Computational Complexity of Sentence Derivation in Functional Unification Grammar.)SH
11280 70548 MT
(In)SH
/Times-Italic SF
12363 XM
(Proceedings of the 11th International Conference on Computational Linguistics \050COLING 86\051)SH
/Times-Roman SF
(, pages)SH
12780 71653 MT
(584-586. ACL,)
250 W( Bonn, 1986.)SH
ES
%%Page: 142 143
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(142)SH
6120 11486 MT
([26])SH
9120 XM
(Rounds, W.C. and A. Manaster-Ramer.)SH
9120 12591 MT
(A Logical Version of Functional Grammar.)SH
9120 13696 MT
(In)SH
/Times-Italic SF
10203 XM
(Proceedings of the 25th meeting of the ACL)SH
/Times-Roman SF
(, pages 89-96.  ACL, Stanford University, June, 1987.)SH
6120 15487 MT
([27])SH
9120 XM
(Shieber, S.M.)SH
9120 16592 MT
(The Design of a Computer Language for Linguistic Information.)SH
9120 17697 MT
(In)SH
/Times-Italic SF
10203 XM
(Proceedings of the 10th International Conference on Computational Linguistics \050COLING 84\051)SH
/Times-Roman SF
(, pages)SH
10620 18802 MT
(362-366. ACL,)
250 W( Stanford University, 1984.)SH
6120 20593 MT
([28])SH
9120 XM
(Shieber, S.M.)SH
9120 21698 MT
(Using Restriction to Extend Parsing Algorithms for Complex Feature-Based Formalisms.)SH
9120 22803 MT
(In)SH
/Times-Italic SF
10203 XM
(Proceedings of the 23rd annual meeting of the ACL)SH
/Times-Roman SF
(, pages 145-152.  ACL, Chicago, 1985.)SH
6120 24594 MT
([29])SH
9120 XM
(Shieber, S.M.)SH
/Times-Italic SF
9120 25699 MT
(A Compilation of Papers on Unification-Based Grammar Formalisms, Parts I & II)SH
/Times-Roman SF
(.)SH
9120 26804 MT
(Technical Report CSLI-85-48, CSLI, 1985.)SH
9120 27909 MT
(3 papers COLING 84 + 3 ACL 85.)SH
6120 29700 MT
([30])SH
9120 XM
(Shieber, S.)SH
/Times-Italic SF
9120 30805 MT
(CSLI Lecture Notes)SH
/Times-Roman SF
(. Volume)
250 W( 4:)SH
/Times-Italic SF
22509 XM
(An introduction to Unification-Based Approaches to Grammar.)SH
/Times-Roman SF
9120 31910 MT
(University of Chicago Press, Chicago, Il, 1986.)SH
6120 33701 MT
([31])SH
9120 XM
(Winograd, T.)SH
/Times-Italic SF
9120 34806 MT
(Language as a Cognitive Process.)SH
/Times-Roman SF
9120 35911 MT
(Addison-Wesley, Reading, Ma., 1983.)SH
6120 37702 MT
([32])SH
9120 XM
(Wittenburg, K.B.)SH
/Times-Italic SF
9120 38807 MT
(Natural Language Parsing with Combinatory Categorial Grammar in Graph Unification-Based Formalism)SH
/Times-Roman SF
(.)SH
9120 39912 MT
(PhD thesis, Austin University, 1986.)SH
6120 41703 MT
([33])SH
9120 XM
(Wroblewski, D.A.)SH
9120 42808 MT
(Non Destructive Graph Unification.)SH
9120 43913 MT
(In)SH
/Times-Italic SF
10203 XM
(Proceedings of the Sixth National Conference on AI \050AAAI 87\051)SH
/Times-Roman SF
(, pages 582-587.  AAAI, Seattle, 1987.)SH
ES
%%Page: 143 144
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(143)SH
16 /Times-Bold AF
8280 11872 MT
(Index)SH
8 /Times-Roman AF
12280 13720 MT
(# notation)
SH( 21)400 W
12280 14644 MT
(# notation)
SH( 94)400 W
12280 15568 MT
(#@ notation)
SH( 124,)
400 W( 134, 139)SH
12280 17416 MT
($ notation \050unix\051)
SH( 120)400 W
12280 18340 MT
($fug5 120)400 W
12280 20188 MT
(%break% 79,)
400 W( 92)SH
12280 22036 MT
(* notation)
SH( 104,)
400 W( 123)SH
12280 22960 MT
(*agenda-policy* \050variable\051)
SH( 118)400 W
12280 23884 MT
(*all-trace-off* \050variable\051)
SH( 108)400 W
12280 24808 MT
(*all-trace-on* \050variable\051)
SH( 108)400 W
12280 25732 MT
(*any-at-unification* \050variable\051)
SH( 117)400 W
12280 26656 MT
(*cat-attribute* \050variable\051)
SH( 27,)
400 W( 99)SH
12280 27580 MT
(*default-external-value* \050variable\051)
SH( 51)400 W
12280 28504 MT
(*dictionary* \050variable\051)
SH( 113)400 W
12280 29428 MT
(*irreg-plurals* \050variable\051)
SH( 53,)
400 W( 55)SH
12280 30352 MT
(*irreg-verbs* \050variable\051)
SH( 53,)
400 W( 56)SH
12280 31276 MT
(*keep-cset* \050variable\051)
SH( 118)400 W
12280 32200 MT
(*keep-none* \050variable\051)
SH( 118)400 W
12280 33124 MT
(*lexical-categories* \050variable\051)
SH( 99)400 W
12280 34048 MT
(*top* \050variable\051)
SH( 109)400 W
12280 34972 MT
(*trace-determine* \050variable\051)
SH( 108)400 W
12280 35896 MT
(*trace-marker* \050variable\051)
SH( 82,)
400 W( 108)SH
12280 36820 MT
(*u-grammar* \050variable\051)
SH( 99)400 W
12280 37744 MT
(*use-any* \050variable\051)
SH( 118)400 W
12280 38668 MT
(*use-given* \050variable\051)
SH( 118)400 W
12280 40516 MT
(... notation)
SH( 21)400 W
12280 42364 MT
(:! \050notation\051)
SH( 30)400 W
12280 43288 MT
(:& \050notation\051)
SH( 30)400 W
12280 44212 MT
(:& notation)
SH( 33)400 W
12280 45136 MT
(:anonymous 93)400 W
12280 46060 MT
(:bk-class \050annotation\051)
SH( 59)400 W
12280 46984 MT
(:demo \050annotation\051)
SH( 59,)
400 W( 86)SH
12280 47908 MT
(:ignore-unless \050annotation\051)
SH( 59)400 W
12280 48832 MT
(:ignore-when \050annotation\051)
SH( 59)400 W
12280 49756 MT
(:index \050annotation\051)
SH( 59)400 W
12280 50680 MT
(:order \050annotation\051)
SH( 19,)
400 W( 59)SH
12280 51604 MT
(:wait \050annotation\051)
SH( 59)400 W
12280 53452 MT
(< \050special value\051)
SH( 47)400 W
12280 54376 MT
(<= \050special value\051)
SH( 47)400 W
12280 56224 MT
(=< \050special value\051)
SH( 47)400 W
12280 57148 MT
(=== notation)
SH( 7)400 W
12280 58996 MT
(A-an \050morphological feature\051)
SH( 53,)
400 W( 54)SH
12280 59920 MT
(Absolute path)
SH( 13,)
400 W( 92)SH
12280 60844 MT
(Adj 53)400 W
12280 61768 MT
(Adv 53)400 W
12280 62692 MT
(Agreement \050subject/verb\051)
SH( 6,)
400 W( 8)SH
12280 63616 MT
(All-tracing-flags \050function\051)
SH( 79,)
400 W( 86, 109)SH
12280 64540 MT
(Alt \050keyword\051)
SH( 6,)
400 W( 19, 59, 61, 81, 116)SH
12280 65464 MT
(Alt \050special attribute\051)
SH( 90)400 W
12280 66388 MT
(Alt-gdp \050function\051)
SH( 106,)
400 W( 116)SH
12280 67312 MT
(Ambiguity of the ^ notation)
SH( 15)400 W
12280 68236 MT
(Any \050special value\051)
SH( 117,)
400 W( 25, 93, 115, 125)SH
12280 69160 MT
(Append 127,)
400 W( 129)SH
12280 70084 MT
(Arguments to procedures \050in FUG as program\051)
SH( 129)400 W
12280 71008 MT
(Avg-complexity \050function\051)
SH( 61,)
400 W( 112)SH
ES
%%Page: 144 145
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(144)SH
8 SS 
10120 11349 MT
(Bk-class \050annotation\051)
SH( 59,)
400 W( 61, 89, 93, 111)SH
10120 12273 MT
(Branch \050of an alt\051)
SH( 6)400 W
10120 14121 MT
(Call-linearizer \050function\051)
SH( 114)400 W
10120 15045 MT
(Car \050in FDs\051)
SH( 35,)
400 W( 128)SH
10120 15969 MT
(Cardinal 53)400 W
10120 16893 MT
(Case 54)400 W
10120 17817 MT
(Cat \050special attribute\051)
SH( 26,)
400 W( 53, 62, 93, 102)SH
10120 18741 MT
(Cat attribute)
SH( 62)400 W
10120 19665 MT
(Categories-not-unified \050function\051)
SH( 53)400 W
10120 20589 MT
(Category 26)400 W
10120 21513 MT
(Cdr \050in FDs\051)
SH( 35,)
400 W( 128)SH
10120 22437 MT
(Clean-fd \050function\051)
SH( 92)400 W
10120 23361 MT
(Clear-bk-class \050function\051)
SH( 93,)
400 W( 94)SH
10120 24285 MT
(Common lisp)
SH( 119)400 W
10120 25209 MT
(Common noun)
SH( 6)400 W
10120 26133 MT
(Comparison prolog/FUG as program)
SH( 130)400 W
10120 27057 MT
(Compile-fug \050function\051)
SH( 119)400 W
10120 27981 MT
(Complexity \050function\051)
SH( 61,)
400 W( 113)SH
10120 28905 MT
(Complexity 29,)
400 W( 60)SH
10120 29829 MT
(Con 53)400 W
10120 30753 MT
(Conflation 14)400 W
10120 31677 MT
(Conjunction 13)400 W
10120 32601 MT
(Constituent 6,)
400 W( 22)SH
10120 33525 MT
(Constituent traversal)
SH( 7,)
400 W( 22, 25, 63, 72, 73, 88, 89, 93)SH
10120 34449 MT
(Constraint \050feature as\051)
SH( 13)400 W
10120 35373 MT
(Constraints \050specifying complex\051)
SH( 124)400 W
10120 36297 MT
(Control \050keyword\051)
SH( 94,)
400 W( 124, 134)SH
10120 37221 MT
(Control in FUF)
SH( 89,)
400 W( 90)SH
10120 38145 MT
(Control-demo \050function\051)
SH( 86)400 W
10120 39069 MT
(Cset \050keyword\051)
SH( 7,)
400 W( 22, 89, 123)SH
10120 39993 MT
(Cset \050special attribute\051)
SH( 45,)
400 W( 93)SH
10120 40917 MT
(Cset \050unification\051)
SH( 22,)
400 W( 24)SH
10120 42765 MT
(Def-alt \050construct\051)
SH( 29,)
400 W( 30)SH
10120 43689 MT
(Def-conj \050construct\051)
SH( 29,)
400 W( 30)SH
10120 44613 MT
(Default \050in alt\051)
SH( 6,)
400 W( 19)SH
10120 45537 MT
(Define-feature-type \050function\051)
SH( 46,)
400 W( 94)SH
10120 46461 MT
(Define-procedural-type \050function\051)
SH( 49,)
400 W( 94)SH
10120 47385 MT
(Demo \050annotation\051)
SH( 59)400 W
10120 48309 MT
(Demonstrative 54)400 W
10120 49233 MT
(Denotation \050of FDs\051)
SH( 13)400 W
10120 50157 MT
(Desperation \050when debugging FUF\051)
SH( 92)400 W
10120 51081 MT
(Det 53,)
400 W( 54)SH
10120 52005 MT
(Determination 25,)
400 W( 66, 73, 87, 101, 102, 117, 129, 134)SH
10120 52929 MT
(Dictionary 55)400 W
10120 53853 MT
(Digit \050morphological feature\051)
SH( 53)400 W
10120 54777 MT
(Disjunction 19)400 W
10120 55701 MT
(Disjunctive normal form)
SH( 113)400 W
10120 56625 MT
(Distance 54)400 W
10120 57549 MT
(DNF \050disjunctive normal form\051)
SH( 60)400 W
10120 58473 MT
(Dots \050in pattern\051)
SH( 21)400 W
10120 59397 MT
(Draw-grammar \050function\051)
SH( 31)400 W
10120 60321 MT
(Draw-types \050function\051)
SH( 48,)
400 W( 94)SH
10120 62169 MT
(Efficiency \050of unification\051)
SH( 61)400 W
10120 63093 MT
(EMACS \050text editor\051)
SH( 93)400 W
10120 64017 MT
(Empty-fd \050function\051)
SH( 95)400 W
10120 64941 MT
(Ending 54)400 W
10120 65865 MT
(Environment \050of a FUG as a program\051)
SH( 129)400 W
10120 66789 MT
(Equations 13,)
400 W( 14)SH
10120 67713 MT
(Examples 5)400 W
10120 68637 MT
(External \050keyword\051)
SH( 94)400 W
10120 69561 MT
(External 51,)
400 W( 135)SH
10120 70485 MT
(External symbols)
SH( 120)400 W
10120 72333 MT
(Failure \050of unification\051)
SH( 8,)
400 W( 19, 25, 81)SH
ES
%%Page: 145 146
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(145)SH
8 SS 
12280 11349 MT
(Far 54)400 W
12280 12273 MT
(FD 1,)
400 W( 5)SH
12280 13197 MT
(Fd-intersection \050function\051)
SH( 114)400 W
12280 14121 MT
(Fd-member \050function\051)
SH( 115)400 W
12280 15045 MT
(Fd-p \050function\051)
SH( 3,)
400 W( 5, 91, 106, 133)SH
12280 15969 MT
(Fd-sem \050function\051)
SH( 105,)
400 W( 133)SH
12280 16893 MT
(Fd-syntax \050function\051)
SH( 103)400 W
12280 17817 MT
(Fd-to-list \050function\051)
SH( 115)400 W
12280 18741 MT
(Features 13)400 W
12280 19665 MT
(Filter-nils \050function\051)
SH( 96)400 W
12280 20589 MT
(First \050person\051)
SH( 54)400 W
12280 21513 MT
(Fset \050special attribute\051)
SH( 41,)
400 W( 43, 48, 133, 92)SH
12280 22437 MT
(Fuf-postscript \050function\051)
SH( 31)400 W
12280 23361 MT
(Fug5 \050package\051)
SH( 120)400 W
12280 24285 MT
(Fug5.l \050file\051)
SH( 119)400 W
12280 26133 MT
(Gap 114,)
400 W( 124)SH
12280 27057 MT
(Gdp \050function\051)
SH( 115)400 W
12280 27981 MT
(Gdpp \050function\051)
SH( 115)400 W
12280 28905 MT
(Gender 54)400 W
12280 29829 MT
(Get-error-pair \050function\051)
SH( 107)400 W
12280 30753 MT
(Given \050special value\051)
SH( 25,)
400 W( 48, 93, 125, 135)SH
12280 31677 MT
(Gr0.l \050file\051)
SH( 5,)
400 W( 119)SH
12280 32601 MT
(Gr1.l \050file\051)
SH( 119)400 W
12280 33525 MT
(Gr11.l \050file\051)
SH( 11)400 W
12280 34449 MT
(Gr2.l \050file\051)
SH( 119)400 W
12280 35373 MT
(Gr3.l \050file\051)
SH( 119)400 W
12280 36297 MT
(Gr4.l \050file\051)
SH( 11,)
400 W( 119)SH
12280 37221 MT
(Gr5.l \050file\051)
SH( 119)400 W
12280 38145 MT
(Gr7.l \050file\051)
SH( 136,)
400 W( 64)SH
12280 39069 MT
(Grammar organization)
SH( 26)400 W
12280 39993 MT
(Grammar-p \050function\051)
SH( 3,)
400 W( 91, 107, 133)SH
12280 40917 MT
(Graph \050FD as\051)
SH( 15,)
400 W( 92)SH
12280 42765 MT
(Hyper-trace-category \050function\051)
SH( 79,)
400 W( 88)SH
12280 44613 MT
(Ignore \050annotation\051)
SH( 93)400 W
12280 45537 MT
(Ignore-unless \050annotation\051)
SH( 59)400 W
12280 46461 MT
(Ignore-when \050annotation\051)
SH( 59)400 W
12280 47385 MT
(Index \050annotation\051)
SH( 59,)
400 W( 93)SH
12280 48309 MT
(Indexing 61,)
400 W( 134)SH
12280 49233 MT
(Infinitive 54)400 W
12280 50157 MT
(Initial failure)
SH( 77)400 W
12280 51081 MT
(Initialize-lexicon \050function\051)
SH( 55)400 W
12280 52005 MT
(Insert-fd \050function\051)
SH( 96)400 W
12280 52929 MT
(Instantiated features)
SH( 25,)
400 W( 128)SH
12280 53853 MT
(Internal-trace-off \050function\051)
SH( 109)400 W
12280 54777 MT
(Internal-trace-on \050function\051)
SH( 109)400 W
12280 55701 MT
(Ir0.l \050file\051)
SH( 119)400 W
12280 56625 MT
(Ir1.l \050file\051)
SH( 119)400 W
12280 57549 MT
(Ir2.l \050file\051)
SH( 119)400 W
12280 58473 MT
(Ir3.l \050file\051)
SH( 119)400 W
12280 59397 MT
(Ir4.l \050file\051)
SH( 119)400 W
12280 60321 MT
(Ir5.l \050file\051)
SH( 119)400 W
12280 61245 MT
(Ir7 \050file\051)
SH( 65,)
400 W( 66)SH
12280 63093 MT
(Jumping \050to a branch\051)
SH( 62)400 W
12280 64941 MT
(Leaf 13)400 W
12280 65865 MT
(Lex \050special attribute\051)
SH( 7)400 W
12280 66789 MT
(Lexfetch \050function\051)
SH( 113)400 W
12280 67713 MT
(Lexical categories)
SH( 53)400 W
12280 68637 MT
(Lexicon.l \050file\051)
SH( 55,)
400 W( 113)SH
12280 69561 MT
(Lexstore \050function\051)
SH( 113)400 W
12280 70485 MT
(Limit \050keyword\051)
SH( 93)400 W
12280 71409 MT
(Limit 100)400 W
ES
%%Page: 146 147
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(146)SH
8 SS 
10120 11349 MT
(Limits on disjunction in input)
SH( 133)400 W
10120 12273 MT
(Linearization 1,)
400 W( 9, 20, 53, 114)SH
10120 13197 MT
(Linearize.l \050file\051)
SH( 53)400 W
10120 14121 MT
(Linearizer 93)400 W
10120 15045 MT
(List \050as FDs\051)
SH( 128)400 W
10120 15969 MT
(List-to-fd \050function\051)
SH( 98,)
400 W( 117)SH
10120 16893 MT
(Lists \050as fds\051)
SH( 114,)
400 W( 115, 117)SH
10120 18741 MT
(Member 127,)
400 W( 129)SH
10120 19665 MT
(Mergeable constituents \050in pattern\051)
SH( 104,)
400 W( 123, 134)SH
10120 20589 MT
(Modal 53)400 W
10120 21513 MT
(Morphology 9,)
400 W( 10, 53, 56, 114)SH
10120 22437 MT
(Morphology-help \050function\051)
SH( 10,)
400 W( 53, 114)SH
10120 24285 MT
(Near 54)400 W
10120 25209 MT
(Nil \050special value\051)
SH( 13,)
400 W( 96, 115, 128)SH
10120 26133 MT
(Non-deterministic constructs)
SH( 21,)
400 W( 61)SH
10120 27057 MT
(Non-interactive \050keyword\051)
SH( 88)400 W
10120 27981 MT
(Non-standard features of implementation)
SH( 27,)
400 W( 133)SH
10120 28905 MT
(None \050special value\051)
SH( 42,)
400 W( 25, 92, 96, 115)SH
10120 29829 MT
(Normalize-fd \050function\051)
SH( 15,)
400 W( 97, 100, 107, 133)SH
10120 30753 MT
(Noun 53,)
400 W( 54)SH
10120 31677 MT
(Number 54)400 W
10120 33525 MT
(Objective 54)400 W
10120 34449 MT
(Opt \050keyword\051)
SH( 20,)
400 W( 61, 81, 116)SH
10120 35373 MT
(Optional features)
SH( 20)400 W
10120 36297 MT
(Order \050annotation\051)
SH( 19,)
400 W( 59)SH
10120 37221 MT
(Order independence)
SH( 19)400 W
10120 38145 MT
(Ordering constraints)
SH( 6,)
400 W( 20)SH
10120 39069 MT
(Ordinal 53)400 W
10120 40917 MT
(Packages 120)400 W
10120 41841 MT
(Pair \050attribute/value\051)
SH( 13)400 W
10120 42765 MT
(Past 54)400 W
10120 43689 MT
(Past-participle 54)400 W
10120 44613 MT
(Path \050flat description of FDs\051)
SH( 13)400 W
10120 45537 MT
(Path \050unification\051)
SH( 14)400 W
10120 46461 MT
(Path 13,)
400 W( 115)SH
10120 47385 MT
(Path-value \050function\051)
SH( 85,)
400 W( 92)SH
10120 48309 MT
(Pattern \050keyword\051)
SH( 6,)
400 W( 9, 20, 61, 104)SH
10120 49233 MT
(Pattern \050special attribute\051)
SH( 45)400 W
10120 50157 MT
(Pattern \050unification\051)
SH( 21)400 W
10120 51081 MT
(Person 54)400 W
10120 52005 MT
(Personal 54)400 W
10120 52929 MT
(Phrase 53)400 W
10120 53853 MT
(Plural 54)400 W
10120 54777 MT
(Porting to a new machine)
SH( 119)400 W
10120 55701 MT
(Possessive 54)400 W
10120 56625 MT
(Pound \050in pattern\051)
SH( 21)400 W
10120 57549 MT
(Prep 53)400 W
10120 58473 MT
(Present 54)400 W
10120 59397 MT
(Procedures \050in FUG as program\051)
SH( 129)400 W
10120 60321 MT
(Prolog 127,)
400 W( 129)SH
10120 61245 MT
(Pronoun 54)400 W
10120 62169 MT
(Pronoun-type 54)400 W
10120 63093 MT
(Proper noun)
SH( 6)400 W
10120 64017 MT
(Punctuation 53,)
400 W( 54, 56)SH
10120 65865 MT
(Quantified 54)400 W
10120 66789 MT
(Question 54)400 W
10120 68637 MT
(Ralt \050keyword\051)
SH( 19,)
400 W( 61, 116)SH
10120 69561 MT
(Recursion 7,)
400 W( 22)SH
10120 70485 MT
(Reference to the FD in a test expression)
SH( 124)400 W
10120 71409 MT
(Reflexive 54)400 W
ES
%%Page: 147 148
BS
0 SI
10 /Times-Roman AF
53580 4286 MT
(147)SH
8 SS 
12280 11349 MT
(Register-category-not-unified \050function\051)
SH( 53)400 W
12280 12273 MT
(Relative path)
SH( 13,)
400 W( 91)SH
12280 13197 MT
(Reload-fug5 \050function\051)
SH( 119)400 W
12280 14121 MT
(Relocate \050function\051)
SH( 96)400 W
12280 15045 MT
(Relpro 53)400 W
12280 15969 MT
(Require \050lisp function\051)
SH( 119)400 W
12280 16893 MT
(Reset-typed-features \050function\051)
SH( 47,)
400 W( 93, 94)SH
12280 17817 MT
(Restrictions 27,)
400 W( 133)SH
12280 18741 MT
(Root 54)400 W
12280 20589 MT
(Search \050through the grammar\051)
SH( 61)400 W
12280 21513 MT
(Second \050person\051)
SH( 54)400 W
12280 22437 MT
(Set values in FDs)
SH( 131)400 W
12280 23361 MT
(Set-path-value \050function\051)
SH( 85)400 W
12280 24285 MT
(Singular 54)400 W
12280 25209 MT
(Structure sharing)
SH( 14)400 W
12280 26133 MT
(Sub-constituents 7)400 W
12280 27057 MT
(Subjective 54)400 W
12280 27981 MT
(Subsume \050function\051)
SH( 46)400 W
12280 28905 MT
(Sunder \050special value\051)
SH( 47)400 W
12280 29829 MT
(Syntax 13)400 W
12280 31677 MT
(Tense 54)400 W
12280 32601 MT
(Test \050keyword\051)
SH( 25,)
400 W( 94, 124, 134)SH
12280 33525 MT
(Third \050person\051)
SH( 54)400 W
12280 34449 MT
(Top-fd-to-list \050function\051)
SH( 98)400 W
12280 35373 MT
(Top-gdp \050function\051)
SH( 92,)
400 W( 95, 115, 116)SH
12280 36297 MT
(Top-gdpp \050function\051)
SH( 95,)
400 W( 116)SH
12280 37221 MT
(Total fd)
SH( 25,)
400 W( 95, 101, 102, 116, 117, 129)SH
12280 38145 MT
(Total-fd 116)400 W
12280 39069 MT
(Trace-alts \050function\051)
SH( 79,)
400 W( 90, 93)SH
12280 39993 MT
(Trace-bk-class \050function\051)
SH( 66,)
400 W( 79, 89, 111)SH
12280 40917 MT
(Trace-bp \050function\051)
SH( 79,)
400 W( 92)SH
12280 41841 MT
(Trace-category \050function\051)
SH( 79,)
400 W( 88, 111)SH
12280 42765 MT
(Trace-cset \050function\051)
SH( 79,)
400 W( 89)SH
12280 43689 MT
(Trace-determine \050function\051)
SH( 79,)
400 W( 87, 111)SH
12280 44613 MT
(Trace-disable \050function\051)
SH( 79,)
400 W( 86, 109)SH
12280 45537 MT
(Trace-disable-all \050function\051)
SH( 79,)
400 W( 86, 92, 109)SH
12280 46461 MT
(Trace-disable-alt \050function\051)
SH( 79,)
400 W( 86)SH
12280 47385 MT
(Trace-disable-match \050function\051)
SH( 79,)
400 W( 86, 110)SH
12280 48309 MT
(Trace-enable \050function\051)
SH( 79,)
400 W( 86, 110)SH
12280 49233 MT
(Trace-enable-all \050function\051)
SH( 79,)
400 W( 86, 110)SH
12280 50157 MT
(Trace-enable-alt \050function\051)
SH( 79,)
400 W( 86, 92)SH
12280 51081 MT
(Trace-enable-match \050function\051)
SH( 79,)
400 W( 86, 110)SH
12280 52005 MT
(Trace-level \050function\051)
SH( 79,)
400 W( 80, 92)SH
12280 52929 MT
(Trace-off \050function\051)
SH( 79,)
400 W( 92, 110)SH
12280 53853 MT
(Trace-on \050function\051)
SH( 79,)
400 W( 92, 110)SH
12280 54777 MT
(Trace-wait \050function\051)
SH( 79,)
400 W( 90)SH
12280 55701 MT
(Tracing \050local\051)
SH( 82)400 W
12280 56625 MT
(Tracing \050of alt\051)
SH( 81)400 W
12280 57549 MT
(Tracing \050of opt\051)
SH( 81)400 W
12280 58473 MT
(Tracing 77)400 W
12280 59397 MT
(Tracing flag)
SH( 82,)
400 W( 103, 104, 108)SH
12280 60321 MT
(Tracing messages)
SH( 81)400 W
12280 61245 MT
(Types in unification)
SH( 133)400 W
12280 62169 MT
(Types-postscript \050function\051)
SH( 48)400 W
12280 64017 MT
(U \050function\051)
SH( 100)400 W
12280 64941 MT
(U-disjunctions \050function\051)
SH( 133,)
400 W( 100)SH
12280 65865 MT
(U-exhaust \050function\051)
SH( 102)400 W
12280 66789 MT
(U-exhaust-top \050function\051)
SH( 102)400 W
12280 67713 MT
(Under \050special value\051)
SH( 26,)
400 W( 47, 94, 135)SH
12280 68637 MT
(Uni \050function\051)
SH( 3,)
400 W( 101)SH
12280 69561 MT
(Uni-fd \050function\051)
SH( 3,)
400 W( 92, 101)SH
12280 70485 MT
(Uni-num \050function\051)
SH( 103)400 W
12280 71409 MT
(Uni-string \050function\051)
SH( 101)400 W
ES
%%Page: 148 149
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(148)SH
8 SS 
10120 11349 MT
(Unif \050function\051)
SH( 3,)
400 W( 102)SH
10120 12273 MT
(Unification \050overall mechanism\051)
SH( 7)400 W
10120 13197 MT
(Unification 1)400 W
10120 14121 MT
(Unification functions)
SH( 99)400 W
10120 15045 MT
(Unknown category)
SH( 10,)
400 W( 53, 93)SH
10120 15969 MT
(Use-package \050function\051)
SH( 122)400 W
10120 16893 MT
(User-defined types)
SH( 133)400 W
10120 18741 MT
(Value \050morphological feature\051)
SH( 53)400 W
10120 19665 MT
(Variables \050in FUGs\051)
SH( 128,)
400 W( 129)SH
10120 20589 MT
(Verb 53,)
400 W( 54)SH
10120 22437 MT
(Wait \050annotation\051)
SH( 59,)
400 W( 61, 90, 93)SH
10120 23361 MT
(Wait \050control annotation\051)
SH( 25)400 W
10120 25209 MT
(^ notation \050ambiguity\051)
SH( 15)400 W
10120 26133 MT
(^ notation)
SH( 115)400 W
10120 27057 MT
(^n notation)
SH( 13,)
400 W( 91)SH
10120 28905 MT
(~ notation)
SH( 128)400 W
10120 29829 MT
(~n notation)
SH( 117,)
400 W( 129)SH
ES
%%Page: i 150
BS
0 SI
10 /Times-Roman AF
54802 4286 MT
(i)SH
16 /Times-Bold AF
25591 11872 MT
(Table of Contents)SH
12 SS 
8280 13396 MT
(1. Introduction)SH
54480 XM
(1)SH
10 SS 
9780 14786 MT
(1.1. How to Read this Manual)SH
54580 XM
(1)SH
9780 15866 MT
(1.2. Function and Content of the Package)SH
54580 XM
(1)SH
12 SS 
8280 17390 MT
(2. Getting Started)SH
54480 XM
(3)SH
10 SS 
9780 18780 MT
(2.1. Main User Functions)SH
54580 XM
(3)SH
12 SS 
8280 20304 MT
(3. FDs, Unification and Linearization)SH
54480 XM
(5)SH
10 SS 
9780 21694 MT
(3.1. What is an FD?)SH
54580 XM
(5)SH
9780 22774 MT
(3.2. A Simple Example of Unification)SH
54580 XM
(5)SH
9780 23854 MT
(3.3. Linearization)SH
54580 XM
(9)SH
12 SS 
8280 25378 MT
(4. Writing and Modifying Grammars)SH
53880 XM
(11)SH
8280 26902 MT
(5. Precise Characterization of FDs)SH
53880 XM
(13)SH
10 SS 
9780 28292 MT
(5.1. Generalities: Features, Syntax, Paths and Equations)SH
54080 XM
(13)SH
9780 29372 MT
(5.2. FDs as Graphs)SH
54080 XM
(15)SH
9780 30452 MT
(5.3. Functional Descriptions vs. First-order Terms)SH
54080 XM
(18)SH
9780 31532 MT
(5.4. Disjunctions: The)SH
/Times-Roman SF
19364 XM
(ALT)SH
/Times-Bold SF
21558 XM
(and)SH
/Times-Roman SF
23420 XM
(RALT)SH
/Times-Bold SF
26281 XM
(Keywords)SH
54080 XM
(19)SH
9780 32612 MT
(5.5. Optional Features: the)SH
/Times-Roman SF
21446 XM
(OPT)SH
/Times-Bold SF
23585 XM
(Keyword)SH
54080 XM
(20)SH
9780 33692 MT
(5.6. Control of the Ordering: the)SH
/Times-Roman SF
23945 XM
(PATTERN)SH
/Times-Bold SF
28695 XM
(Keyword)SH
54080 XM
(20)SH
9780 34772 MT
(5.7. Explicit Specification of Sub-constituents: the)SH
/Times-Roman SF
31225 XM
(CSET)SH
/Times-Bold SF
33920 XM
(Keyword)SH
54080 XM
(22)SH
11780 35852 MT
(5.7.1. Implicit and Incremental CSET Specification)SH
54080 XM
(23)SH
11780 36932 MT
(5.7.2. Unification of Incremental CSET Specifications)SH
54080 XM
(24)SH
9780 38012 MT
(5.8. The Special Value)SH
/Times-Roman SF
19503 XM
(NONE)SH
/Times-Bold SF
54080 XM
(25)SH
9780 39092 MT
(5.9. The Special Value ANY - The Determination Stage)SH
54080 XM
(25)SH
9780 40172 MT
(5.10. The Special Value)SH
/Times-Roman SF
20003 XM
(GIVEN)SH
/Times-Bold SF
54080 XM
(25)SH
9780 41252 MT
(5.11. The Special Attribute)SH
/Times-Roman SF
21502 XM
(CAT)SH
/Times-Bold SF
(: General Outline of a Grammar)SH
54080 XM
(26)SH
12 SS 
8280 42776 MT
(6. Modular Organization of Grammars: Def-alt and Def-conj)SH
53880 XM
(29)SH
10 SS 
9780 44166 MT
(6.1. Modular Definition of FDs)SH
54080 XM
(29)SH
9780 45246 MT
(6.2. Drawing the Map of a Grammar)SH
54080 XM
(30)SH
12 SS 
8280 46770 MT
(7. Defining Input for Regression Testing: The Test Facility)SH
53880 XM
(33)SH
8280 48294 MT
(8. Using Lists in FDs)SH
53880 XM
(35)SH
10 SS 
9780 49684 MT
(8.1. Encoding Lists as FDs)SH
54080 XM
(35)SH
9780 50764 MT
(8.2. When to Use Lists: an Example)SH
54080 XM
(36)SH
9780 51844 MT
(8.3. Typical List Traversal in FUF)SH
54080 XM
(37)SH
9780 52924 MT
(8.4. Path Notations for Lists: ~ ^~ and ~n)SH
54080 XM
(39)SH
12 SS 
8280 54448 MT
(9. Types in Unification)SH
53880 XM
(41)SH
10 SS 
9780 55838 MT
(9.1. Why Types?)SH
54080 XM
(41)SH
11780 56918 MT
(9.1.1. Typed features)SH
54080 XM
(41)SH
13780 57998 MT
(9.1.1.1. A Limitation of FUGs: No Structure over the Set of Values)SH
54080 XM
(41)SH
13780 59078 MT
(9.1.1.2. Introducing Typed Features)SH
54080 XM
(42)SH
11780 60158 MT
(9.1.2. Typed Constituents: The)SH
/Times-Roman SF
25142 XM
(FSET)SH
/Times-Bold SF
27726 XM
(Construct)SH
54080 XM
(43)SH
11780 61238 MT
(9.1.3. Procedural Types)SH
54080 XM
(45)SH
9780 62318 MT
(9.2. Typed Features:)SH
/Times-Roman SF
18807 XM
(define-feature-type)SH
/Times-Bold SF
54080 XM
(46)SH
11780 63398 MT
(9.2.1. Type Definition)SH
54080 XM
(46)SH
11780 64478 MT
(9.2.2. The)SH
/Times-Roman SF
16197 XM
(under)SH
/Times-Bold SF
18724 XM
(Family of Constructs)SH
54080 XM
(47)SH
11780 65558 MT
(9.2.3. Drawing Type Hierarchies)SH
54080 XM
(48)SH
9780 66638 MT
(9.3. Typed Constituents: the)SH
/Times-Roman SF
22058 XM
(FSET)SH
/Times-Bold SF
24642 XM
(Construct)SH
54080 XM
(48)SH
9780 67718 MT
(9.4. Procedural Types)SH
54080 XM
(49)SH
ES
%%Page: ii 151
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(ii)SH
12 /Times-Bold AF
6120 11623 MT
(10.)SH
/Times-Roman SF
7920 XM
(EXTERNAL)SH
/Times-Bold SF
14550 XM
(and Unification Macros)SH
51720 XM
(51)SH
6120 13147 MT
(11. Morphology and Linearization)SH
51720 XM
(53)SH
10 SS 
7620 14537 MT
(11.1. Lexical Categories are not Unified)SH
51920 XM
(53)SH
7620 15617 MT
(11.2. CATegories Accepted by the Morphology Module)SH
51920 XM
(53)SH
7620 16697 MT
(11.3. Accepted Features for)SH
/Times-Roman SF
19561 XM
(VERB, NOUN, PRONOUN, DET, ORDINAL, CARDINAL)SH
/Times-Bold SF
44308 XM
(and)SH
51920 XM
(54)SH
/Times-Roman SF
9870 17777 MT
(PUNCTUATION)SH
/Times-Bold SF
7620 18857 MT
(11.4. Possible Values for Features)SH
/Times-Roman SF
22202 XM
(NUMBER, PERSON, TENSE, ENDING, BEFORE, AFTER, CASE,)SH
51920 XM
(54)SH
9870 19937 MT
(GENDER, PERSON, DISTANCE, PRONOUN-TYPE, A-AN, DIGIT)SH
/Times-Bold SF
38339 XM
(and)SH
/Times-Roman SF
40201 XM
(VALUE)SH
/Times-Bold SF
7620 21017 MT
(11.5. The Dictionary)SH
51920 XM
(55)SH
7620 22097 MT
(11.6. Linearization and Punctuation)SH
51920 XM
(56)SH
12 SS 
6120 23621 MT
(12. Control in FUF)SH
51720 XM
(59)SH
10 SS 
7620 25011 MT
(12.1. Complexity)SH
51920 XM
(60)SH
7620 26091 MT
(12.2. Indexing)SH
51920 XM
(61)SH
7620 27171 MT
(12.3. Dependency-directed Backtracking and)SH
/Times-Roman SF
27064 XM
(BK-CLASS)SH
/Times-Bold SF
51920 XM
(63)SH
7620 28251 MT
(12.4. Lazy Evaluation and Freeze with)SH
/Times-Roman SF
24231 XM
(wait)SH
/Times-Bold SF
51920 XM
(71)SH
9620 29331 MT
(12.4.1. Wait and Constituent Traversal)SH
51920 XM
(73)SH
7620 30411 MT
(12.5. Conditional-Evaluation with Ignore)SH
51920 XM
(74)SH
12 SS 
6120 31935 MT
(13. Tracing and Debugging)SH
51720 XM
(77)SH
10 SS 
7620 33325 MT
(13.1. What it Means to Debug a FUF Program)SH
51920 XM
(77)SH
7620 34405 MT
(13.2. Checking the Validity of FDs and Grammars)SH
51920 XM
(78)SH
7620 35485 MT
(13.3. Fine Tuning Tracing: Overview of FUF Tracing Functions)SH
51920 XM
(78)SH
7620 36565 MT
(13.4. Identifying Possible Bugs: Trace-bp)SH
51920 XM
(79)SH
7620 37645 MT
(13.5. Levels of Tracing)SH
51920 XM
(80)SH
7620 38725 MT
(13.6. Tracing of Alternatives and Options)SH
51920 XM
(81)SH
7620 39805 MT
(13.7. Local tracing with boundaries)SH
51920 XM
(82)SH
9620 40885 MT
(13.7.1. Special Flags %trace-on% and %trace-off%)SH
51920 XM
(82)SH
9620 41965 MT
(13.7.2. The Special Tracing Flag %break%)SH
51920 XM
(83)SH
7620 43045 MT
(13.8. The)SH
/Times-Roman SF
11787 XM
(trace-enable)SH
/Times-Bold SF
16923 XM
(and)SH
/Times-Roman SF
18785 XM
(trace-disable)SH
/Times-Bold SF
24144 XM
(Family of Functions)SH
51920 XM
(86)SH
7620 44125 MT
(13.9. The)SH
/Times-Roman SF
11787 XM
(:demo)SH
/Times-Bold SF
14537 XM
(directive)SH
51920 XM
(86)SH
7620 45205 MT
(13.10. Tracing of Specific Stages of the Unification)SH
51920 XM
(87)SH
9620 46285 MT
(13.10.1. Trace-determine)SH
51920 XM
(87)SH
9620 47365 MT
(13.10.2. Trace-Category and Hyper-trace-category)SH
51920 XM
(88)SH
9620 48445 MT
(13.10.3. Trace-Cset)SH
51920 XM
(89)SH
9620 49525 MT
(13.10.4. Trace-BK-Class)SH
51920 XM
(89)SH
9620 50605 MT
(13.10.5. Trace-Wait)SH
51920 XM
(90)SH
9620 51685 MT
(13.10.6. Trace-Alts)SH
51920 XM
(90)SH
7620 52765 MT
(13.11. Some Advice on FUF Debugging)SH
51920 XM
(91)SH
9620 53845 MT
(13.11.1. Syntax Errors)SH
51920 XM
(91)SH
9620 54925 MT
(13.11.2. Semantic Errors)SH
51920 XM
(91)SH
9620 56005 MT
(13.11.3. Expression of Negative Constraints)SH
51920 XM
(92)SH
9620 57085 MT
(13.11.4. Control)SH
51920 XM
(92)SH
12 SS 
6120 58609 MT
(14. Manipulation of FDs as Data-structures)SH
51720 XM
(95)SH
10 SS 
7620 59999 MT
(14.1. FD Accessors)SH
51920 XM
(95)SH
7620 61079 MT
(14.2. FD Relocation)SH
51920 XM
(96)SH
7620 62159 MT
(14.3. FD Normalization)SH
51920 XM
(97)SH
7620 63239 MT
(14.4. Lists of FDs)SH
51920 XM
(98)SH
12 SS 
6120 64763 MT
(15. Reference Manual)SH
51720 XM
(99)SH
10 SS 
7620 66153 MT
(15.1. Unification functions)SH
51920 XM
(99)SH
9620 67233 MT
(15.1.1.)SH
/Times-Roman SF
12620 XM
(*lexical-categories*)SH
/Times-Bold SF
51920 XM
(99)SH
9620 68313 MT
(15.1.2.)SH
/Times-Roman SF
12620 XM
(*u-grammar*)SH
/Times-Bold SF
51920 XM
(99)SH
ES
%%Page: iii 152
BS
0 SI
10 /Times-Roman AF
54246 4286 MT
(iii)SH
/Times-Bold SF
11780 11486 MT
(15.1.3.)SH
/Times-Roman SF
14780 XM
(*cat-attribute*)SH
/Times-Bold SF
54080 XM
(99)SH
11780 12566 MT
(15.1.4.)SH
/Times-Roman SF
14780 XM
(u)SH
/Times-Bold SF
53580 XM
(100)SH
11780 13646 MT
(15.1.5.)SH
/Times-Roman SF
14780 XM
(u-disjunctions)SH
/Times-Bold SF
53580 XM
(100)SH
11780 14726 MT
(15.1.6.)SH
/Times-Roman SF
14780 XM
(uni)SH
/Times-Bold SF
53580 XM
(101)SH
11780 15806 MT
(15.1.7.)SH
/Times-Roman SF
14780 XM
(uni-string)SH
/Times-Bold SF
53580 XM
(101)SH
11780 16886 MT
(15.1.8.)SH
/Times-Roman SF
14780 XM
(uni-fd)SH
/Times-Bold SF
53580 XM
(101)SH
11780 17966 MT
(15.1.9.)SH
/Times-Roman SF
14780 XM
(unif)SH
/Times-Bold SF
53580 XM
(102)SH
11780 19046 MT
(15.1.10.)SH
/Times-Roman SF
15280 XM
(u-exhaust)SH
/Times-Bold SF
53580 XM
(102)SH
11780 20126 MT
(15.1.11.)SH
/Times-Roman SF
15280 XM
(u-exhaust-top)SH
/Times-Bold SF
53580 XM
(102)SH
11780 21206 MT
(15.1.12.)SH
/Times-Roman SF
15280 XM
(uni-num)SH
/Times-Bold SF
53580 XM
(103)SH
9780 22286 MT
(15.2. Checking)SH
53580 XM
(103)SH
11780 23366 MT
(15.2.1.)SH
/Times-Roman SF
14780 XM
(fd-syntax)SH
/Times-Bold SF
53580 XM
(103)SH
11780 24446 MT
(15.2.2.)SH
/Times-Roman SF
14780 XM
(fd-sem)SH
/Times-Bold SF
53580 XM
(105)SH
11780 25526 MT
(15.2.3.)SH
/Times-Roman SF
14780 XM
(fd-p)SH
/Times-Bold SF
53580 XM
(106)SH
11780 26606 MT
(15.2.4.)SH
/Times-Roman SF
14780 XM
(grammar-p)SH
/Times-Bold SF
53580 XM
(107)SH
11780 27686 MT
(15.2.5.)SH
/Times-Roman SF
14780 XM
(get-error-pair)SH
/Times-Bold SF
53580 XM
(107)SH
11780 28766 MT
(15.2.6.)SH
/Times-Roman SF
14780 XM
(normalize-fd)SH
/Times-Bold SF
53580 XM
(107)SH
9780 29846 MT
(15.3. Tracing)SH
53580 XM
(108)SH
11780 30926 MT
(15.3.1.)SH
/Times-Roman SF
14780 XM
(*all-trace-off*)SH
/Times-Bold SF
53580 XM
(108)SH
11780 32006 MT
(15.3.2.)SH
/Times-Roman SF
14780 XM
(*all-trace-on*)SH
/Times-Bold SF
53580 XM
(108)SH
11780 33086 MT
(15.3.3.)SH
/Times-Roman SF
14780 XM
(*trace-determine*)SH
/Times-Bold SF
53580 XM
(108)SH
11780 34166 MT
(15.3.4.)SH
/Times-Roman SF
14780 XM
(*trace-marker*)SH
/Times-Bold SF
53580 XM
(108)SH
11780 35246 MT
(15.3.5.)SH
/Times-Roman SF
14780 XM
(*top*)SH
/Times-Bold SF
53580 XM
(109)SH
11780 36326 MT
(15.3.6.)SH
/Times-Roman SF
14780 XM
(all-tracing-flags)SH
/Times-Bold SF
53580 XM
(109)SH
11780 37406 MT
(15.3.7.)SH
/Times-Roman SF
14780 XM
(internal-trace-off)SH
/Times-Bold SF
53580 XM
(109)SH
11780 38486 MT
(15.3.8.)SH
/Times-Roman SF
14780 XM
(internal-trace-on)SH
/Times-Bold SF
53580 XM
(109)SH
11780 39566 MT
(15.3.9.)SH
/Times-Roman SF
14780 XM
(trace-disable)SH
/Times-Bold SF
53580 XM
(109)SH
11780 40646 MT
(15.3.10.)SH
/Times-Roman SF
15280 XM
(trace-disable-all)SH
/Times-Bold SF
53580 XM
(109)SH
11780 41726 MT
(15.3.11.)SH
/Times-Roman SF
15280 XM
(trace-disable-match)SH
/Times-Bold SF
53580 XM
(110)SH
11780 42806 MT
(15.3.12.)SH
/Times-Roman SF
15280 XM
(trace-enable)SH
/Times-Bold SF
53580 XM
(110)SH
11780 43886 MT
(15.3.13.)SH
/Times-Roman SF
15280 XM
(trace-enable-all)SH
/Times-Bold SF
53580 XM
(110)SH
11780 44966 MT
(15.3.14.)SH
/Times-Roman SF
15280 XM
(trace-enable-match)SH
/Times-Bold SF
53580 XM
(110)SH
11780 46046 MT
(15.3.15.)SH
/Times-Roman SF
15280 XM
(trace-off)SH
/Times-Bold SF
53580 XM
(110)SH
11780 47126 MT
(15.3.16.)SH
/Times-Roman SF
15280 XM
(trace-on)SH
/Times-Bold SF
53580 XM
(110)SH
11780 48206 MT
(15.3.17.)SH
/Times-Roman SF
15280 XM
(trace-determine)SH
/Times-Bold SF
53580 XM
(111)SH
11780 49286 MT
(15.3.18.)SH
/Times-Roman SF
15280 XM
(trace-bk-class)SH
/Times-Bold SF
53580 XM
(111)SH
11780 50366 MT
(15.3.19.)SH
/Times-Roman SF
15280 XM
(trace-category)SH
/Times-Bold SF
53580 XM
(111)SH
9780 51446 MT
(15.4. Complexity)SH
53580 XM
(112)SH
11780 52526 MT
(15.4.1.)SH
/Times-Roman SF
14780 XM
(avg-complexity)SH
/Times-Bold SF
53580 XM
(112)SH
11780 53606 MT
(15.4.2.)SH
/Times-Roman SF
14780 XM
(complexity)SH
/Times-Bold SF
53580 XM
(113)SH
9780 54686 MT
(15.5. Manipulation of the Dictionary)SH
53580 XM
(113)SH
11780 55766 MT
(15.5.1.)SH
/Times-Roman SF
14780 XM
(*dictionary*)SH
/Times-Bold SF
53580 XM
(113)SH
11780 56846 MT
(15.5.2.)SH
/Times-Roman SF
14780 XM
(lexfetch)SH
/Times-Bold SF
53580 XM
(113)SH
11780 57926 MT
(15.5.3.)SH
/Times-Roman SF
14780 XM
(lexstore)SH
/Times-Bold SF
53580 XM
(113)SH
9780 59006 MT
(15.6. Linearization and Morphology)SH
53580 XM
(114)SH
11780 60086 MT
(15.6.1.)SH
/Times-Roman SF
14780 XM
(call-linearizer)SH
/Times-Bold SF
53580 XM
(114)SH
11780 61166 MT
(15.6.2.)SH
/Times-Roman SF
14780 XM
(gap)SH
/Times-Bold SF
53580 XM
(114)SH
11780 62246 MT
(15.6.3.)SH
/Times-Roman SF
14780 XM
(morphology-help)SH
/Times-Bold SF
53580 XM
(114)SH
9780 63326 MT
(15.7. Manipulation of FDs as Data-structures)SH
53580 XM
(114)SH
11780 64406 MT
(15.7.1.)SH
/Times-Roman SF
14780 XM
(fd-intersection)SH
/Times-Bold SF
53580 XM
(114)SH
11780 65486 MT
(15.7.2.)SH
/Times-Roman SF
14780 XM
(fd-member)SH
/Times-Bold SF
53580 XM
(115)SH
11780 66566 MT
(15.7.3.)SH
/Times-Roman SF
14780 XM
(fd-to-list)SH
/Times-Bold SF
53580 XM
(115)SH
11780 67646 MT
(15.7.4.)SH
/Times-Roman SF
14780 XM
(gdp)SH
/Times-Bold SF
53580 XM
(115)SH
ES
%%Page: iv 153
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(iv)SH
/Times-Bold SF
9620 11486 MT
(15.7.5.)SH
/Times-Roman SF
12620 XM
(gdpp)SH
/Times-Bold SF
51420 XM
(115)SH
9620 12566 MT
(15.7.6.)SH
/Times-Roman SF
12620 XM
(top-gdp)SH
/Times-Bold SF
51420 XM
(116)SH
9620 13646 MT
(15.7.7.)SH
/Times-Roman SF
12620 XM
(top-gdpp)SH
/Times-Bold SF
51420 XM
(116)SH
9620 14726 MT
(15.7.8.)SH
/Times-Roman SF
12620 XM
(alt-gdp)SH
/Times-Bold SF
51420 XM
(116)SH
9620 15806 MT
(15.7.9.)SH
/Times-Roman SF
12620 XM
(list-to-fd)SH
/Times-Bold SF
51420 XM
(117)SH
7620 16886 MT
(15.8. fine tuning of the unifier)SH
51420 XM
(117)SH
9620 17966 MT
(15.8.1.)SH
/Times-Roman SF
12620 XM
(*any-at-unification*)SH
/Times-Bold SF
51420 XM
(117)SH
9620 19046 MT
(15.8.2.)SH
/Times-Roman SF
12620 XM
(*use-given*)SH
/Times-Bold SF
51420 XM
(118)SH
9620 20126 MT
(15.8.3.)SH
/Times-Roman SF
12620 XM
(*use-any*)SH
/Times-Bold SF
51420 XM
(118)SH
9620 21206 MT
(15.8.4.)SH
/Times-Roman SF
12620 XM
(*keep-cset*)SH
/Times-Bold SF
51420 XM
(118)SH
9620 22286 MT
(15.8.5.)SH
/Times-Roman SF
12620 XM
(*keep-none*)SH
/Times-Bold SF
51420 XM
(118)SH
9620 23366 MT
(15.8.6.)SH
/Times-Roman SF
12620 XM
(*agenda-policy*)SH
/Times-Bold SF
51420 XM
(118)SH
12 SS 
6120 24890 MT
(Appendix I. Installation of the Package)SH
51120 XM
(119)SH
10 SS 
7620 26280 MT
(I.1. Finding the Files)SH
51420 XM
(119)SH
7620 27360 MT
(I.2. Porting to a New Machine)SH
51420 XM
(119)SH
7620 28440 MT
(I.3. Packages)SH
51420 XM
(120)SH
12 SS 
6120 29964 MT
(Appendix II. Advanced Features)SH
51120 XM
(123)SH
10 SS 
7620 31354 MT
(II.1. Advanced Uses of Patterns)SH
51420 XM
(123)SH
7620 32434 MT
(II.2. Advanced uses of)SH
/Times-Roman SF
17287 XM
(CSET)SH
/Times-Bold SF
51420 XM
(123)SH
7620 33514 MT
(II.3. Long Distance Dependencies and the)SH
/Times-Roman SF
25565 XM
(GAP)SH
/Times-Bold SF
27815 XM
(feature)SH
51420 XM
(124)SH
7620 34594 MT
(II.4. Specifying Complex Constraints: the)SH
/Times-Roman SF
25592 XM
(TEST)SH
/Times-Bold SF
28231 XM
(and)SH
/Times-Roman SF
30093 XM
(CONTROL)SH
/Times-Bold SF
35065 XM
(Keywords)SH
51420 XM
(124)SH
7620 35674 MT
(II.5. Copying vs Conflation: The #{} notation)SH
51420 XM
(125)SH
12 SS 
6120 37198 MT
(Appendix III. Non Linguistic Applications of the Unifier: FUF as a Programming)SH
51120 XM
(127)SH
13422 38454 MT
(Language)SH
10 SS 
7620 39844 MT
(III.1. Dealing with Lists: The Member/Append Example)SH
51420 XM
(127)SH
7620 40924 MT
(III.2. Representing Lists as FDs)SH
51420 XM
(128)SH
9620 42004 MT
(III.2.1. NIL and variables)SH
51420 XM
(128)SH
9620 43084 MT
(III.2.2. The "~" notation)SH
51420 XM
(128)SH
7620 44164 MT
(III.3. Environment and Variable Names vs. FD and Path)SH
51420 XM
(129)SH
7620 45244 MT
(III.4. Procedures vs. Categories, Arguments vs. Constituents)SH
51420 XM
(129)SH
7620 46324 MT
(III.5. The total FD Includes the Stack of all Computation)SH
51420 XM
(129)SH
7620 47404 MT
(III.6. Analogy with PROLOG programs)SH
51420 XM
(130)SH
7620 48484 MT
(III.7. Use of Set Values in Linguistic Applications)SH
51420 XM
(131)SH
12 SS 
6120 50008 MT
(Appendix IV. Non Standard Features of the Implementation and Restrictions)SH
51120 XM
(133)SH
10 SS 
7620 51398 MT
(IV.1. Typed Features)SH
51420 XM
(133)SH
7620 52478 MT
(IV.2. The)SH
/Times-Roman SF
11898 XM
(FSET)SH
/Times-Bold SF
14482 XM
(Special Attribute and Typed Constituents)SH
51420 XM
(133)SH
7620 53558 MT
(IV.3. User-defined Types)SH
51420 XM
(133)SH
7620 54638 MT
(IV.4. Limits on Disjunction in Input)SH
51420 XM
(133)SH
7620 55718 MT
(IV.5. Mergeable Constituents in Patterns)SH
51420 XM
(134)SH
7620 56798 MT
(IV.6. Indexing of Alternation)SH
51420 XM
(134)SH
7620 57878 MT
(IV.7. Test and Control)SH
51420 XM
(134)SH
7620 58958 MT
(IV.8.)SH
/Times-Roman SF
9981 XM
(GIVEN)SH
/Times-Bold SF
13341 XM
(and)SH
/Times-Roman SF
15203 XM
(UNDER)SH
/Times-Bold SF
51420 XM
(135)SH
7620 60038 MT
(IV.9.)SH
/Times-Roman SF
9981 XM
(EXTERNAL)SH
/Times-Bold SF
15508 XM
(Specifications and Macros)SH
51420 XM
(135)SH
7620 61118 MT
(IV.10. User-defined)SH
/Times-Roman SF
16230 XM
(CAT)SH
/Times-Bold SF
18480 XM
(Parameter)SH
51420 XM
(135)SH
7620 62198 MT
(IV.11. Resource Limited Processing)SH
51420 XM
(135)SH
7620 63278 MT
(IV.12.)SH
/Times-Roman SF
10481 XM
(BK-CLASS)SH
/Times-Bold SF
15565 XM
(Control Specification)SH
51420 XM
(135)SH
7620 64358 MT
(IV.13. WAIT Control Specification)SH
51420 XM
(136)SH
7620 65438 MT
(IV.14. IGNORE Control Specifications)SH
51420 XM
(137)SH
ES
%%Page: v 154
BS
0 SI
10 /Times-Roman AF
54580 4286 MT
(v)SH
12 /Times-Bold AF
8280 11604 MT
(Appendix V. Changes from Version to Version)SH
53280 XM
(139)SH
10 SS 
9780 12994 MT
(V.1. New Features and Modifications in Version 3)SH
53580 XM
(139)SH
9780 14074 MT
(V.2. New Features and Modification in Version 4)SH
53580 XM
(139)SH
9780 15154 MT
(V.3. New Features and Modification in Version 5)SH
53580 XM
(139)SH
12 SS 
8280 16678 MT
(Index)SH
53280 XM
(143)SH
ES
%%Page: vi 155
BS
0 SI
10 /Times-Roman AF
6120 4286 MT
(vi)SH
ES
%%Page: vii 156
BS
0 SI
10 /Times-Roman AF
54024 4286 MT
(vii)SH
16 /Times-Bold AF
26702 11872 MT
(List of Figures)SH
10 SS 
9780 12952 MT
(Figure 5-1:)
SH( FD)
500 W( as a graph)SH
54080 XM
(16)SH
9780 14032 MT
(Figure 5-2:)
SH( Conflation)
500 W( in an FD graph)SH
54080 XM
(16)SH
9780 15112 MT
(Figure 5-3:)
SH( A)
500 W( grammar for conjunction)SH
54080 XM
(17)SH
9780 16192 MT
(Figure 6-1:)
SH( Map)
500 W( of the SURGE grammar using the def-alt syntax)SH
54080 XM
(32)SH
9780 17272 MT
(Figure 12-1:)
SH( Effect)
500 W( of bk-class)SH
54080 XM
(68)SH
9780 18352 MT
(Figure 12-2:)
SH( Determination)
500 W( of the address of failure)SH
54080 XM
(69)SH
ES
%%Trailer
%%Pages: 156
%%DocumentFonts: Times-Roman Times-Bold Times-Italic Symbol Courier Courier-Oblique Courier-Bold
